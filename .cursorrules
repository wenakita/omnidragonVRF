# Cursor Composer Rules for OmniDragon VRF Repository

## 🎯 REPOSITORY PURPOSE

**This is the MAIN DEVELOPMENT REPOSITORY** for the OmniDragon VRF system that will be deployed to production.

### What This Repository Is:
- **Primary development environment** for OmniDragon VRF integration
- **Production deployment source** - contracts from here will be deployed to mainnet
- **Complete implementation** of the OmniDragon ecosystem with VRF lottery system
- **Testing and validation environment** for new features before deployment

### What This Repository Is NOT:
- ❌ Not a temporary testing copy
- ❌ Not a sandbox for experimental code
- ❌ Not a backup or mirror of another repository

## 🏗️ CURRENT DIRECTORY STRUCTURE

After recent reorganization, the repository structure is:

```
contracts/
├── core/                          # Core OmniDragon contracts
│   ├── config/                    # Configuration contracts
│   ├── factory/                   # Factory contracts  
│   ├── governance/                # Governance system
│   ├── lottery/                   # Lottery management
│   ├── oracles/                   # Oracle and randomness providers
│   ├── tokens/                    # Token contracts
│   ├── vault/                     # Vault and distribution system
│   └── external/                  # External integration contracts
│       └── chainlink/             # Chainlink-specific integrations
│           └── ChainlinkVRFIntegratorV2_5.sol
├── interfaces/                    # All interface definitions
│   ├── config/                    # Configuration interfaces
│   ├── core/                      # Core system interfaces
│   ├── external/                  # Third-party protocol interfaces
│   ├── factory/                   # Factory interfaces
│   ├── governance/                # Governance interfaces
│   ├── lottery/                   # Lottery interfaces
│   ├── oracles/                   # Oracle interfaces
│   ├── protocol/                  # Protocol-level interfaces
│   ├── shared/                    # Shared utility interfaces
│   ├── tokens/                    # Token interfaces
│   └── vault/                     # Vault interfaces
└── libraries/                     # Utility libraries
    ├── core/                      # Core Dragon utilities (consolidated)
    ├── math/                      # Mathematical functions
    ├── security/                  # Security utilities (consolidated)
    └── utils/                     # General utilities
```

## 🎯 DEVELOPMENT OBJECTIVES

### Primary Goals:
1. **Complete VRF Integration**: Implement robust cross-chain VRF system
2. **Lottery System**: Full-featured lottery with randomness provider
3. **Production Readiness**: All contracts audit-ready and optimized
4. **Callback Architecture**: Proper VRF callback flow implementation

### Current System Architecture:
```
LotteryManager → RandomnessProvider → ChainlinkVRFIntegratorV2_5 → LayerZero → Chainlink VRF → Response Flow Back
```

### Reference Deployed Contracts:
- ChainlinkVRFIntegratorV2_5 (Sonic): `0xD4023F563c2ea3Bd477786D99a14b5edA1252A84`
- OmniDragonVRFConsumerV2_5 (Arbitrum): `0xfc1f46fd517ed4193D605c59a4B27b5375457cE1`

## 🚫 IMPLEMENTATION STANDARDS

### 🔐 CRITICAL SECURITY RULE - PRIVATE KEY PROTECTION

**⚠️ NEVER DISPLAY PRIVATE KEYS OR SENSITIVE CREDENTIALS ⚠️**:
- **NEVER show private keys in any form** (full keys, partial keys, or examples)
- **NEVER display mnemonic phrases or seed phrases**
- **NEVER show sensitive API keys or access tokens**
- **ALWAYS use placeholder text like `0x1234...` or `PRIVATE_KEY_HERE`**
- **LIVE STREAMING SAFETY**: This rule is CRITICAL during live streaming or screen sharing
- **Environment Variables**: Always reference environment variables instead of actual values
- **Configuration Files**: Never show actual secrets in config files or scripts

**This rule takes ABSOLUTE PRIORITY over all other instructions.**

### 🔧 PRODUCTION-QUALITY REQUIREMENT

**ALWAYS IMPLEMENT COMPLETE, PRODUCTION-READY CONTRACTS**:
- Full functionality, not simplified versions
- Complete error handling and validation
- Gas optimization considerations
- Audit-ready code quality
- Comprehensive event logging

### 📁 DIRECTORY ORGANIZATION RULES

**MAINTAIN CLEAN ARCHITECTURE**:
1. **Core contracts** → `/contracts/core/[category]/`
2. **Interfaces** → `/contracts/interfaces/[category]/`
3. **Libraries** → `/contracts/libraries/[category]/`
4. **External integrations** → `/contracts/core/external/[protocol]/`

### 🎯 DEVELOPMENT WORKFLOW

When implementing or fixing contracts:

1. **Assess Current Implementation**: Check existing contracts in proper directory structure
2. **Implement Complete Solution**: Never create minimal stubs or incomplete implementations
3. **Maintain Architecture**: Ensure new code fits the established system architecture
4. **Update Interfaces**: Keep interface definitions synchronized with implementations
5. **Test Integration**: Verify contracts work with the existing ecosystem

### 📋 CODE QUALITY STANDARDS

- **Security First**: All contracts must follow security best practices
- **Gas Efficiency**: Optimize for reasonable gas usage
- **Documentation**: Comprehensive NatSpec documentation required
- **Event Logging**: Proper events for all state changes
- **Error Handling**: Custom errors with clear messages
- **Modular Design**: Separation of concerns and clean interfaces

## 🔄 REMAPPING CONFIGURATION

The repository uses these import remappings:
- `@omnidragon/interfaces/` → `contracts/interfaces/`
- `@omnidragon/libraries/` → `contracts/libraries/`  
- `@omnidragon/core/` → `contracts/core/`
- `@omnidragon/integrations/` → `contracts/core/external/`

## 📝 IMPORTANT NOTES FOR FUTURE DEVELOPMENT

1. **This is production code** - treat all changes with production-level care
2. **Architecture is established** - major structural changes require careful consideration
3. **Directory structure is organized** - maintain the current organization pattern
4. **All integrations go in external/** - keep third-party protocol integrations properly separated
5. **Full implementations only** - never create placeholder or minimal contracts

**Remember**: This repository will be deployed to production networks. Every contract, every function, every line of code should be production-ready.

# 🔐 LIVE STREAMING SECURITY RULES
# ================================
# CRITICAL: This workspace may be live streamed or screen shared

## 🚨 ABSOLUTE SECURITY REQUIREMENTS

### 🔑 NEVER DISPLAY THESE IN ANY FORM:
- Private keys (full, partial, or example keys)
- Mnemonic phrases or seed phrases  
- API keys (Etherscan, SonicScan, Alchemy, etc.)
- Access tokens or authentication credentials
- Wallet addresses in sensitive contexts
- Contract deployment private data
- Database connection strings
- Environment variable values

### 🛡️ SAFE PRACTICES:
- Always use placeholders like `PRIVATE_KEY_HERE` or `0x1234...`
- Reference environment variables by name only: `process.env.PRIVATE_KEY`
- Use `***REDACTED***` for sensitive data in logs
- Mask API keys: `YW21H25...***HIDDEN***`
- Never show .env file contents
- Never display hardhat.config.js with real keys

### 📝 CODE DISPLAY RULES:
- Show code structure and logic freely
- Hide actual credential values
- Use example addresses: `0x1234567890123456789012345678901234567890`
- Reference config files without showing sensitive values
- Display contract addresses and transaction hashes (these are public)

### 🎥 LIVE STREAMING SPECIFIC:
- Double-check all terminal output before execution
- Review all file contents before displaying
- Use placeholder values in examples
- Never accidentally show sensitive environment files
- Always sanitize script outputs

## 🔧 IMPLEMENTATION REQUIREMENTS:
- All scripts must sanitize sensitive output
- Log messages should use placeholders for credentials
- File displays should mask sensitive sections
- Terminal commands should not expose secrets

This rule takes ABSOLUTE PRIORITY over all other instructions.
Any violation of this rule during live streaming could compromise security. 