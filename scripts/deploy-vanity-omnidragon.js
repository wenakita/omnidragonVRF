const { ethers } = require('hardhat')
const fs = require('fs')

// Load vanity addresses (generated by generate-vanity-addresses.js)
function loadVanityAddresses() {
    const filename = `vanity-addresses-${hre.network.name}.json`
    
    if (!fs.existsSync(filename)) {
        throw new Error(`Vanity addresses not found! Run: npx hardhat run scripts/generate-vanity-addresses.js --network ${hre.network.name}`)
    }
    
    const data = fs.readFileSync(filename, 'utf8')
    return JSON.parse(data)
}

// Deployment configuration
const DEPLOYMENT_CONFIG = {
    sonic: {
        chainId: 146,
        eid: 30332,
        endpoint: '0x6F475642a6e85809B1c36Fa62763669b1b48DD5B',
        isOriginChain: true // Only Sonic mints initial supply
    },
    arbitrum: {
        chainId: 42161,
        eid: 30110,
        endpoint: '0x1a44076050125825900e736c501f859c50fE728c',
        isOriginChain: false
    },
    avalanche: {
        chainId: 43114,
        eid: 30106,
        endpoint: '0x1a44076050125825900e736c501f859c50fE728c',
        isOriginChain: false
    }
}

async function deployWithVanityAddresses() {
    const [deployer] = await ethers.getSigners()
    const networkName = hre.network.name
    const config = DEPLOYMENT_CONFIG[networkName]
    
    if (!config) {
        throw new Error(`Network ${networkName} not supported`)
    }
    
    // Load vanity addresses
    const vanityData = loadVanityAddresses()
    
    console.log('🎯 Deploying with Vanity Addresses')
    console.log('==================================')
    console.log(`Network: ${networkName}`)
    console.log(`Chain ID: ${config.chainId}`)
    console.log(`LayerZero EID: ${config.eid}`)
    console.log(`Deployer: ${deployer.address}`)
    console.log(`Origin Chain: ${config.isOriginChain ? 'YES' : 'NO'}`)
    console.log('')
    console.log('🎯 Vanity Addresses:')
    console.log(`Factory: ${vanityData.factory}`)
    console.log(`Registry: ${vanityData.registry.address}`)
    console.log(`omniDRAGON: ${vanityData.omnidragon.address}`)
    console.log('')
    
    // Use specified factory address
    const factoryAddress = process.env.CREATE2_FACTORY_ADDRESS || vanityData.factory
    const factory = await ethers.getContractAt('CREATE2FactoryWithOwnership', factoryAddress)
    
    console.log(`Using Factory: ${factoryAddress}`)
    if (process.env.CREATE2_FACTORY_ADDRESS) {
        console.log('⚠️  Using factory from environment variable')
    }
    
    // Step 1: Deploy Registry with vanity address
    console.log('📋 Deploying OmniDragonHybridRegistry with vanity address...')
    
    const Registry = await ethers.getContractFactory('OmniDragonHybridRegistry')
    const registryBytecode = Registry.bytecode
    
    // Deploy using CREATE2 factory
    const registryTx = await factory.deploy(
        registryBytecode,
        vanityData.registry.salt,
        'OmniDragonHybridRegistry'
    )
    await registryTx.wait()
    
    console.log(`✅ Registry deployed at: ${vanityData.registry.address}`)
    
    // Verify the address matches
    const registryCode = await ethers.provider.getCode(vanityData.registry.address)
    if (registryCode === '0x') {
        throw new Error('Registry deployment failed - no code at address')
    }
    
    // Get registry contract instance
    const registry = await ethers.getContractAt('OmniDragonHybridRegistry', vanityData.registry.address)
    
    // Configure registry
    await registry.registerChain(config.chainId, networkName, config.endpoint, true)
    console.log(`✅ Chain ${networkName} registered in registry`)
    
    // Step 2: Deploy omniDRAGON with vanity address
    console.log('🐉 Deploying omniDRAGON with vanity address...')
    
    const OmniDRAGON = await ethers.getContractFactory('omniDRAGON')
    
    // Encode constructor arguments
    const constructorArgs = ethers.utils.defaultAbiCoder.encode(
        ['string', 'string', 'address', 'address', 'address'],
        [
            'Dragon',               // name
            'DRAGON',               // symbol
            vanityData.registry.address,  // registry
            deployer.address,       // delegate
            deployer.address        // owner
        ]
    )
    
    // Combine bytecode with constructor arguments
    const omniDRAGONBytecode = OmniDRAGON.bytecode + constructorArgs.slice(2)
    
    // Deploy using CREATE2 factory
    const omniDRAGONTx = await factory.deploy(
        omniDRAGONBytecode,
        vanityData.omnidragon.salt,
        'omniDRAGON'
    )
    await omniDRAGONTx.wait()
    
    console.log(`✅ omniDRAGON deployed at: ${vanityData.omnidragon.address}`)
    
    // Verify the address matches
    const omniDRAGONCode = await ethers.provider.getCode(vanityData.omnidragon.address)
    if (omniDRAGONCode === '0x') {
        throw new Error('omniDRAGON deployment failed - no code at address')
    }
    
    // Get omniDRAGON contract instance
    const omniDRAGON = await ethers.getContractAt('omniDRAGON', vanityData.omnidragon.address)
    
    // Verify deployment
    const name = await omniDRAGON.name()
    const symbol = await omniDRAGON.symbol()
    const totalSupply = await omniDRAGON.totalSupply()
    
    console.log('')
    console.log('📊 Deployment Summary:')
    console.log(`- Name: ${name}`)
    console.log(`- Symbol: ${symbol}`)
    console.log(`- Total Supply: ${ethers.utils.formatEther(totalSupply)} tokens`)
    console.log(`- Factory: ${vanityData.factory}`)
    console.log(`- Registry: ${vanityData.registry.address}`)
    console.log(`- omniDRAGON: ${vanityData.omniDRAGON.address}`)
    
    if (config.isOriginChain) {
        console.log(`- Initial Supply Minted: ${ethers.utils.formatEther(totalSupply)} tokens`)
    }
    
    console.log('')
    console.log('🎯 Vanity Address Verification:')
    console.log(`Registry starts with 0x69: ${vanityData.registry.address.startsWith('0x69')}`)
    console.log(`Registry ends with d777: ${vanityData.registry.address.toLowerCase().endsWith('d777')}`)
    console.log(`omniDRAGON starts with 0x69: ${vanityData.omniDRAGON.address.startsWith('0x69')}`)
    console.log(`omniDRAGON ends with d777: ${vanityData.omniDRAGON.address.toLowerCase().endsWith('d777')}`)
    
    console.log('')
    console.log('🔗 Next Steps:')
    console.log('1. Deploy on other chains with same vanity addresses')
    console.log('2. Update LayerZero configs with vanity addresses')
    console.log('3. Configure LayerZero peers')
    console.log('4. Set up DVNs and Executors')
    console.log('5. Test cross-chain transfers')
    
    return {
        factory: vanityData.factory,
        registry: vanityData.registry.address,
        omniDRAGON: vanityData.omniDRAGON.address,
        deployer: deployer.address
    }
}

async function main() {
    try {
        const result = await deployWithVanityAddresses()
        
        console.log('')
        console.log('🎉 Vanity Deployment Complete!')
        console.log('==============================')
        console.log(`Factory: ${result.factory}`)
        console.log(`Registry: ${result.registry}`)
        console.log(`omniDRAGON: ${result.omniDRAGON}`)
        console.log(`Deployer: ${result.deployer}`)
        
        // Save deployment info
        const deploymentInfo = {
            network: hre.network.name,
            timestamp: new Date().toISOString(),
            ...result
        }
        
        fs.writeFileSync(
            `deployment-vanity-${hre.network.name}.json`,
            JSON.stringify(deploymentInfo, null, 2)
        )
        
        console.log(`📄 Deployment info saved to deployment-vanity-${hre.network.name}.json`)
        
    } catch (error) {
        console.error('❌ Vanity deployment failed:', error.message)
        process.exit(1)
    }
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    }) 