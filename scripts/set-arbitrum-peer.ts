import { ethers } from "hardhat";

/**
 * Set peer connection on Arbitrum side: Arbitrum Consumer ‚Üí Sonic Integrator
 * This might help complete the bidirectional connection needed for VRF
 */

const CONTRACTS = {
    SONIC_INTEGRATOR: "0x89Ce5E25d8c635Bd41E5Ee33bF7c63DC50A3F0fb",
    ARBITRUM_CONSUMER: "0xD192343D5E351C983F6613e6d7c5c33f62C0eea4"
};

const CHAIN_EIDS = {
    SONIC: 30332
};

async function setArbitrumPeer() {
    console.log("üîó Setting Arbitrum ‚Üí Sonic Peer Connection");
    console.log("This completes the bidirectional connection");
    console.log("=" .repeat(50));

    // Note: This would need to be run on Arbitrum network
    console.log("‚ö†Ô∏è This script should be run with --network arbitrum");
    console.log("üìã Arbitrum Consumer:", CONTRACTS.ARBITRUM_CONSUMER);
    console.log("üéØ Sonic Integrator:", CONTRACTS.SONIC_INTEGRATOR);
    console.log("üîó Sonic EID:", CHAIN_EIDS.SONIC);
    
    // Convert Sonic integrator address to bytes32
    const sonicIntegratorBytes32 = ethers.utils.hexZeroPad(CONTRACTS.SONIC_INTEGRATOR, 32);
    console.log("üì¶ Sonic address as bytes32:", sonicIntegratorBytes32);
    
    console.log("\nüîß Command to run on Arbitrum:");
    console.log("npx hardhat run scripts/set-arbitrum-peer.ts --network arbitrum");
    
    // If we're actually on Arbitrum, do the peer setting
    const network = await ethers.provider.getNetwork();
    if (network.chainId === 42161) { // Arbitrum mainnet
        console.log("\n‚úÖ Running on Arbitrum - setting peer...");
        
        const [deployer] = await ethers.getSigners();
        console.log("üìã Deployer:", deployer.address);
        
        const arbitrumConsumer = await ethers.getContractAt(
            "OmniDragonVRFConsumerV2_5",
            CONTRACTS.ARBITRUM_CONSUMER
        );
        
        try {
            const setPeerTx = await arbitrumConsumer.setPeer(
                CHAIN_EIDS.SONIC,
                sonicIntegratorBytes32,
                { gasLimit: 200000 }
            );
            
            console.log("‚è≥ Setting peer connection...");
            await setPeerTx.wait();
            console.log("‚úÖ Arbitrum ‚Üí Sonic peer connection set!");
            console.log("üìã Transaction:", setPeerTx.hash);
            
        } catch (error: any) {
            console.log("‚ùå Failed to set peer:", error.message);
        }
    } else {
        console.log("‚ùå Not on Arbitrum network (chainId:", network.chainId, ")");
        console.log("Please run: npx hardhat run scripts/set-arbitrum-peer.ts --network arbitrum");
    }
}

if (require.main === module) {
    setArbitrumPeer().catch(console.error);
} 