{
  "address": "0x81515D6c0CC71811E64a1dF4ea68B7339b919C5D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfIntegrator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldIntegrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newIntegrator",
          "type": "address"
        }
      ],
      "name": "ChainlinkVRFIntegratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "ConsumerAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "EmergencyFallbackUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vrfFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        }
      ],
      "name": "FeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "RandomnessDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "RandomnessDeliveryFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromVRF",
          "type": "bool"
        }
      ],
      "name": "RandomnessFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum OmniDragonRandomnessProvider.RequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "vrfSequence",
          "type": "uint64"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "vrfSequence",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "VRFCallbackReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "authorizeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedConsumers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkVRFEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkVRFIntegrator",
      "outputs": [
        {
          "internalType": "contract IChainlinkVRFIntegratorV2_5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkFeeMStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "drawUnpredictableFromPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        }
      ],
      "name": "emergencyFulfillRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEstimatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vrfFeeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "instantFeeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomnessId",
          "type": "uint256"
        }
      ],
      "name": "getRandomnessRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "requestType",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatistics",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalVRF",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPool",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalInstant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "successfulCallbacks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRequests",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instantFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVRFEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPendingRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRandomnessId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomnessRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomValue",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "requestType",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "vrfSequence",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        }
      ],
      "name": "receiveRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomnessFromChainlinkVRF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomnessFromPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrator",
          "type": "address"
        }
      ],
      "name": "setChainlinkVRFIntegrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vrfFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_instantFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPendingRequests",
          "type": "uint256"
        }
      ],
      "name": "setMaxPendingRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "successfulVRFCallbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalInstantRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPoolRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVRFRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "vrfSequenceToRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x38e159242a4619799494d5bfcaa97aa9a991d9a9681cae784e0d9c28dc8430f7",
  "receipt": {
    "to": null,
    "from": "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F",
    "contractAddress": "0x81515D6c0CC71811E64a1dF4ea68B7339b919C5D",
    "transactionIndex": 0,
    "gasUsed": "1809308",
    "logsBloom": "0x
    "blockHash": "0x1371b7d84a849aea219ab22487d9d6dcbf0999b55942ccccb9277ce36c99c265",
    "transactionHash": "0x38e159242a4619799494d5bfcaa97aa9a991d9a9681cae784e0d9c28dc8430f7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 36088860,
        "transactionHash": "0x38e159242a4619799494d5bfcaa97aa9a991d9a9681cae784e0d9c28dc8430f7",
        "address": "0x81515D6c0CC71811E64a1dF4ea68B7339b919C5D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ddd0050d1e084dfc72d5d06447cc10bcd3fef60f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1371b7d84a849aea219ab22487d9d6dcbf0999b55942ccccb9277ce36c99c265"
      }
    ],
    "blockNumber": 36088860,
    "cumulativeGasUsed": "1809308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3aB9Bf4C30F5995Ac27f09c487a32e97c87899E4"
  ],
  "numDeployments": 2,
  "solcInputHash": "163865cc55892e8ecff25c8dca601d8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfIntegrator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldIntegrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIntegrator\",\"type\":\"address\"}],\"name\":\"ChainlinkVRFIntegratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"ConsumerAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"EmergencyFallbackUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vrfFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"RandomnessDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RandomnessDeliveryFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromVRF\",\"type\":\"bool\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum OmniDragonRandomnessProvider.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"vrfSequence\",\"type\":\"uint64\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"vrfSequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"VRFCallbackReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"authorizeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedConsumers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkVRFEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkVRFIntegrator\",\"outputs\":[{\"internalType\":\"contract IChainlinkVRFIntegratorV2_5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkFeeMStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"drawUnpredictableFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"}],\"name\":\"emergencyFulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEstimatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instantFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomnessId\",\"type\":\"uint256\"}],\"name\":\"getRandomnessRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"requestType\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVRF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"successfulCallbacks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRequests\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVRFEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPendingRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRandomnessId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomnessRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"requestType\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"vrfSequence\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"name\":\"receiveRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomnessFromChainlinkVRF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomnessFromPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrator\",\"type\":\"address\"}],\"name\":\"setChainlinkVRFIntegrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vrfFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instantFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPendingRequests\",\"type\":\"uint256\"}],\"name\":\"setMaxPendingRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"successfulVRFCallbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInstantRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPoolRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVRFRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"vrfSequenceToRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Advanced randomness provider that wraps ChainlinkVRFIntegratorV2_5 with full cross-chain VRF integration  FEATURES: - Full Chainlink VRF integration via ChainlinkVRFIntegratorV2_5 (Sonic \\u2192 Arbitrum \\u2192 Chainlink) - Authorization system for consumers - Request mapping and callback handling - Fallback pseudo-randomness for instant decisions - Fee management and withdrawal - Comprehensive event logging https://x.com/sonicreddragon https://t.me/sonicreddragon\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"drawUnpredictableFromPool(address,address,address,uint256,uint256)\":{\"details\":\"Get instant randomness for per-swap lotteries (no fee, pseudo-random)\",\"params\":{\"amountIn\":\"The input amount\",\"amountOut\":\"The output amount\",\"swapper\":\"The address of the user making the swap\",\"tokenA\":\"The first token in the swap\",\"tokenB\":\"The second token in the swap  \"},\"returns\":{\"randomness\":\"The generated random value\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveRandomWords(uint256[],uint64)\":{\"details\":\"Receives random words from ChainlinkVRFIntegratorV2_5\",\"params\":{\"randomWords\":\"Array of random words from Chainlink VRF\",\"sequence\":\"The VRF sequence number from the integrator\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestRandomnessFromChainlinkVRF()\":{\"details\":\"Request randomness from Chainlink VRF via cross-chain integrator\",\"returns\":{\"_0\":\"randomnessId The unique identifier for this randomness request\"}},\"requestRandomnessFromPool()\":{\"details\":\"Request randomness from pool (uses pseudo-randomness for now)\",\"returns\":{\"_0\":\"randomnessId The unique identifier for this randomness request\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"OmniDragonRandomnessProvider\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/oracles/OmniDragonRandomnessProvider.sol\":\"OmniDragonRandomnessProvider\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373530393832303230323638\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/core/oracles/OmniDragonRandomnessProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IChainlinkVRFIntegratorV2_5 } from \\\"../../interfaces/external/chainlink/IChainlinkVRFIntegratorV2_5.sol\\\";\\n\\n// ============ INTERFACES ============\\n\\ninterface IRandomWordsCallbackV2_5 {\\n    function receiveRandomWords(uint256[] memory randomWords, uint64 sequence) external;\\n}\\n\\ninterface IRandomnessRequester {\\n    function receiveRandomness(uint256 requestId, uint256 randomValue) external;\\n}\\n\\n/**\\n * @title OmniDragonRandomnessProvider\\n * @dev Advanced randomness provider that wraps ChainlinkVRFIntegratorV2_5 with full cross-chain VRF integration\\n * \\n * FEATURES:\\n * - Full Chainlink VRF integration via ChainlinkVRFIntegratorV2_5 (Sonic \\u2192 Arbitrum \\u2192 Chainlink)\\n * - Authorization system for consumers\\n * - Request mapping and callback handling\\n * - Fallback pseudo-randomness for instant decisions\\n * - Fee management and withdrawal\\n * - Comprehensive event logging\\n *\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */ \\ncontract OmniDragonRandomnessProvider is Ownable, ReentrancyGuard, IRandomWordsCallbackV2_5 {\\n\\n    // ============ CONSTANTS ============\\n    \\n    uint32 constant ARBITRUM_EID = 30110; // Arbitrum's LayerZero V2 Endpoint ID\\n\\n    // ============ STATE VARIABLES ============\\n\\n    struct RandomnessRequest {\\n        address requester;\\n        uint64 timestamp;\\n        bool fulfilled;\\n        uint256 randomValue;\\n        uint32 requestType;\\n        uint64 vrfSequence; // Maps to ChainlinkVRFIntegrator sequence\\n    }\\n\\n    enum RequestType {\\n        POOL,           // Pool-based randomness (pseudo for now)\\n        CHAINLINK_VRF,  // Cross-chain Chainlink VRF\\n        INSTANT         // Instant pseudo-randomness\\n    }\\n\\n    mapping(uint256 => RandomnessRequest) public randomnessRequests;\\n    mapping(uint64 => uint256) public vrfSequenceToRequestId; // VRF sequence \\u2192 randomness ID\\n    uint256 public nextRandomnessId;\\n    \\n    // Chainlink VRF integration\\n    IChainlinkVRFIntegratorV2_5 public chainlinkVRFIntegrator;\\n    bool public chainlinkVRFEnabled;\\n    \\n    // Authorization\\n    mapping(address => bool) public authorizedConsumers;\\n    \\n    // Fees and limits\\n    uint256 public vrfFee = 0.2 ether;      // Fee for cross-chain VRF (covers LayerZero + Chainlink)\\n    uint256 public poolFee = 0.001 ether;   // Fee for pool-based randomness\\n    uint256 public instantFee = 0;           // No fee for instant pseudo-randomness\\n    uint256 public maxPendingRequests = 100; // Prevent spam\\n\\n    // Statistics\\n    uint256 public totalVRFRequests;\\n    uint256 public totalPoolRequests;\\n    uint256 public totalInstantRequests;\\n    uint256 public successfulVRFCallbacks;\\n\\n    // ============ EVENTS ============\\n    \\n    event RandomnessRequested(uint256 indexed randomnessId, address indexed requester, RequestType requestType, uint64 vrfSequence);\\n    event RandomnessFulfilled(uint256 indexed randomnessId, uint256 randomValue, bool fromVRF);\\n    event RandomnessDelivered(uint256 indexed requestId, address indexed requester, uint256 randomValue);\\n    event RandomnessDeliveryFailed(uint256 indexed requestId, address indexed requester, string reason);\\n    event ChainlinkVRFIntegratorUpdated(address indexed oldIntegrator, address indexed newIntegrator);\\n    event VRFCallbackReceived(uint256 indexed randomnessId, uint64 indexed vrfSequence, uint256 randomValue);\\n    event ConsumerAuthorized(address indexed consumer, bool authorized);\\n    event FeesUpdated(uint256 vrfFee, uint256 poolFee, uint256 instantFee);\\n    event EmergencyFallbackUsed(uint256 indexed randomnessId, string reason);\\n\\n    // ============ CONSTRUCTOR ============\\n\\n    constructor(address _vrfIntegrator) Ownable(msg.sender) {\\n        if (_vrfIntegrator != address(0)) {\\n            chainlinkVRFIntegrator = IChainlinkVRFIntegratorV2_5(_vrfIntegrator);\\n            chainlinkVRFEnabled = true;\\n        } else {\\n            chainlinkVRFEnabled = false;\\n        }\\n        \\n        // Register for Sonic FeeM automatically\\n    }\\n\\n    // ============ EXTERNAL FUNCTIONS ============\\n\\n    /**\\n     * @dev Request randomness from pool (uses pseudo-randomness for now)\\n     * @return randomnessId The unique identifier for this randomness request\\n     */\\n    function requestRandomnessFromPool() external payable nonReentrant returns (uint256) {\\n        require(msg.value >= poolFee, \\\"Insufficient fee\\\");\\n        require(_getPendingRequestCount() < maxPendingRequests, \\\"Too many pending requests\\\");\\n        \\n        uint256 randomnessId = nextRandomnessId++;\\n        randomnessRequests[randomnessId] = RandomnessRequest({\\n            requester: msg.sender,\\n            timestamp: uint64(block.timestamp),\\n            fulfilled: false,\\n            randomValue: 0,\\n            requestType: uint32(RequestType.POOL),\\n            vrfSequence: 0\\n        });\\n\\n        totalPoolRequests++;\\n        emit RandomnessRequested(randomnessId, msg.sender, RequestType.POOL, 0);\\n        \\n        // Generate strong pseudo-randomness\\n        uint256 pseudoRandom = _generatePseudoRandom(randomnessId, msg.sender);\\n        \\n        // Fulfill immediately\\n        randomnessRequests[randomnessId].randomValue = pseudoRandom;\\n        randomnessRequests[randomnessId].fulfilled = true;\\n        \\n        emit RandomnessFulfilled(randomnessId, pseudoRandom, false);\\n        _deliverRandomness(randomnessId);\\n        \\n        return randomnessId;\\n    }\\n\\n    /**\\n     * @dev Request randomness from Chainlink VRF via cross-chain integrator\\n     * @return randomnessId The unique identifier for this randomness request\\n     */\\n    function requestRandomnessFromChainlinkVRF() external payable nonReentrant returns (uint256) {\\n        require(chainlinkVRFEnabled, \\\"Chainlink VRF not enabled\\\");\\n        require(address(chainlinkVRFIntegrator) != address(0), \\\"VRF integrator not set\\\");\\n        require(msg.value >= vrfFee, \\\"Insufficient fee for VRF\\\");\\n        require(_getPendingRequestCount() < maxPendingRequests, \\\"Too many pending requests\\\");\\n        \\n        uint256 randomnessId = nextRandomnessId++;\\n        \\n                 // Make the VRF request to the integrator\\n         try chainlinkVRFIntegrator.requestRandomWordsSimple{value: msg.value}(ARBITRUM_EID) {\\n            \\n            // For simplicity, we'll track by request ID instead of VRF sequence for now\\n            // The callback will match by finding pending VRF requests\\n            randomnessRequests[randomnessId] = RandomnessRequest({\\n                requester: msg.sender,\\n                timestamp: uint64(block.timestamp),\\n                fulfilled: false,\\n                randomValue: 0,\\n                requestType: uint32(RequestType.CHAINLINK_VRF),\\n                vrfSequence: 0 // Will be updated in callback if needed\\n            });\\n            \\n            totalVRFRequests++;\\n            emit RandomnessRequested(randomnessId, msg.sender, RequestType.CHAINLINK_VRF, 0);\\n            \\n        } catch (bytes memory reason) {\\n            // If VRF request fails, use fallback pseudo-randomness\\n            emit EmergencyFallbackUsed(randomnessId, string(reason));\\n            \\n            randomnessRequests[randomnessId] = RandomnessRequest({\\n                requester: msg.sender,\\n                timestamp: uint64(block.timestamp),\\n                fulfilled: false,\\n                randomValue: 0,\\n                requestType: uint32(RequestType.CHAINLINK_VRF),\\n                vrfSequence: 0\\n            });\\n            \\n            uint256 fallbackRandom = _generatePseudoRandom(randomnessId, msg.sender);\\n            randomnessRequests[randomnessId].randomValue = fallbackRandom;\\n            randomnessRequests[randomnessId].fulfilled = true;\\n            \\n            emit RandomnessFulfilled(randomnessId, fallbackRandom, false);\\n            _deliverRandomness(randomnessId);\\n        }\\n        \\n        return randomnessId;\\n    }\\n\\n    /**\\n     * @dev Get instant randomness for per-swap lotteries (no fee, pseudo-random)\\n     * @param swapper The address of the user making the swap\\n     * @param tokenA The first token in the swap\\n     * @param tokenB The second token in the swap  \\n     * @param amountIn The input amount\\n     * @param amountOut The output amount\\n     * @return randomness The generated random value\\n     */\\n    function drawUnpredictableFromPool(\\n        address swapper,\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    ) external returns (uint256 randomness) {\\n        require(authorizedConsumers[msg.sender], \\\"Not authorized consumer\\\");\\n        \\n        // Generate high-quality pseudo-randomness for instant decisions\\n        randomness = uint256(keccak256(abi.encodePacked(\\n            swapper, tokenA, tokenB, amountIn, amountOut,\\n            block.timestamp, block.prevrandao, block.coinbase,\\n            tx.gasprice, gasleft(), msg.sender,\\n            totalInstantRequests++ // Ensures uniqueness\\n        )));\\n        \\n        return randomness;\\n    }\\n\\n    // ============ VRF CALLBACK ============\\n\\n    /**\\n     * @dev Receives random words from ChainlinkVRFIntegratorV2_5\\n     * @param randomWords Array of random words from Chainlink VRF\\n     * @param sequence The VRF sequence number from the integrator\\n     */\\n    function receiveRandomWords(uint256[] memory randomWords, uint64 sequence) external override {\\n        require(msg.sender == address(chainlinkVRFIntegrator), \\\"Only VRF integrator can call\\\");\\n        require(randomWords.length > 0, \\\"No random words provided\\\");\\n        \\n        // Find the corresponding randomness request\\n        uint256 randomnessId = vrfSequenceToRequestId[sequence];\\n        require(randomnessId != 0 || sequence == 0, \\\"Unknown VRF sequence\\\"); // Allow sequence 0 for first request\\n        \\n        // Handle case where sequence 0 maps to first request\\n        if (sequence == 0 && randomnessId == 0) {\\n            randomnessId = _findPendingVRFRequest();\\n        }\\n        \\n        if (randomnessId == 0) {\\n            // No matching request found, log and return\\n            return;\\n        }\\n        \\n        RandomnessRequest storage request = randomnessRequests[randomnessId];\\n        \\n        // Verify this is a VRF request that hasn't been fulfilled\\n        if (request.requestType != uint32(RequestType.CHAINLINK_VRF) || request.fulfilled) {\\n            return;\\n        }\\n        \\n        // Store the random value and mark as fulfilled\\n        uint256 randomValue = randomWords[0];\\n        request.randomValue = randomValue;\\n        request.fulfilled = true;\\n        \\n        // Update statistics\\n        successfulVRFCallbacks++;\\n        \\n        // Clean up the mapping\\n        delete vrfSequenceToRequestId[sequence];\\n        \\n        // Emit events\\n        emit VRFCallbackReceived(randomnessId, sequence, randomValue);\\n        emit RandomnessFulfilled(randomnessId, randomValue, true);\\n        \\n        // Deliver the randomness to the requester\\n        _deliverRandomness(randomnessId);\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n\\n    function setChainlinkVRFIntegrator(address _integrator) external onlyOwner {\\n        address oldIntegrator = address(chainlinkVRFIntegrator);\\n        chainlinkVRFIntegrator = IChainlinkVRFIntegratorV2_5(_integrator);\\n        chainlinkVRFEnabled = _integrator != address(0);\\n        \\n        emit ChainlinkVRFIntegratorUpdated(oldIntegrator, _integrator);\\n    }\\n\\n    function authorizeConsumer(address consumer, bool authorized) external onlyOwner {\\n        authorizedConsumers[consumer] = authorized;\\n        emit ConsumerAuthorized(consumer, authorized);\\n    }\\n\\n    function setFees(uint256 _vrfFee, uint256 _poolFee, uint256 _instantFee) external onlyOwner {\\n        vrfFee = _vrfFee;\\n        poolFee = _poolFee;\\n        instantFee = _instantFee;\\n        \\n        emit FeesUpdated(_vrfFee, _poolFee, _instantFee);\\n    }\\n\\n    function setMaxPendingRequests(uint256 _maxPendingRequests) external onlyOwner {\\n        maxPendingRequests = _maxPendingRequests;\\n    }\\n\\n    function withdrawFees() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No fees to withdraw\\\");\\n        \\n        payable(owner()).transfer(balance);\\n    }\\n\\n    function emergencyFulfillRequest(uint256 randomnessId, uint256 randomValue) external onlyOwner {\\n        RandomnessRequest storage request = randomnessRequests[randomnessId];\\n        require(!request.fulfilled, \\\"Request already fulfilled\\\");\\n        require(request.requester != address(0), \\\"Request does not exist\\\");\\n        \\n        request.randomValue = randomValue;\\n        request.fulfilled = true;\\n        \\n        emit EmergencyFallbackUsed(randomnessId, \\\"Emergency fulfillment by owner\\\");\\n        emit RandomnessFulfilled(randomnessId, randomValue, false);\\n        \\n        _deliverRandomness(randomnessId);\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n\\n    function getRandomnessRequest(uint256 randomnessId) external view returns (\\n        address requester,\\n        uint64 timestamp,\\n        bool fulfilled,\\n        uint256 randomValue,\\n        uint32 requestType\\n    ) {\\n        RandomnessRequest memory request = randomnessRequests[randomnessId];\\n        return (\\n            request.requester,\\n            request.timestamp,\\n            request.fulfilled,\\n            request.randomValue,\\n            request.requestType\\n        );\\n    }\\n\\n    function getEstimatedFees() external view returns (\\n        uint256 poolFeeAmount, \\n        uint256 vrfFeeAmount, \\n        uint256 instantFeeAmount\\n    ) {\\n        return (poolFee, vrfFee, instantFee);\\n    }\\n\\n    function getStatistics() external view returns (\\n        uint256 totalVRF,\\n        uint256 totalPool,\\n        uint256 totalInstant,\\n        uint256 successfulCallbacks,\\n        uint256 pendingRequests\\n    ) {\\n        return (\\n            totalVRFRequests,\\n            totalPoolRequests,\\n            totalInstantRequests,\\n            successfulVRFCallbacks,\\n            _getPendingRequestCount()\\n        );\\n    }\\n\\n    function isVRFEnabled() external view returns (bool) {\\n        return chainlinkVRFEnabled && address(chainlinkVRFIntegrator) != address(0);\\n    }\\n\\n    function checkFeeMStatus() external view returns (bool isRegistered) {\\n    }\\n\\n    // ============ INTERNAL FUNCTIONS ============\\n\\n    function _deliverRandomness(uint256 randomnessId) internal {\\n        RandomnessRequest storage request = randomnessRequests[randomnessId];\\n        \\n        // Try to deliver randomness to requester if it implements the interface\\n        if (request.requester.code.length > 0) {\\n            try IRandomnessRequester(request.requester).receiveRandomness(randomnessId, request.randomValue) {\\n                emit RandomnessDelivered(randomnessId, request.requester, request.randomValue);\\n            } catch Error(string memory reason) {\\n                emit RandomnessDeliveryFailed(randomnessId, request.requester, reason);\\n            } catch (bytes memory) {\\n                emit RandomnessDeliveryFailed(randomnessId, request.requester, \\\"Low-level delivery failure\\\");\\n            }\\n        } else {\\n            // For EOA requests, just emit the delivered event\\n            emit RandomnessDelivered(randomnessId, request.requester, request.randomValue);\\n        }\\n    }\\n\\n    function _generatePseudoRandom(uint256 randomnessId, address requester) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\n            block.timestamp,\\n            block.prevrandao,\\n            block.coinbase,\\n            requester,\\n            randomnessId,\\n            tx.gasprice,\\n            gasleft(),\\n            address(this).balance\\n        )));\\n    }\\n\\n    function _getPendingRequestCount() internal view returns (uint256) {\\n        uint256 count = 0;\\n        uint256 endId = nextRandomnessId;\\n        uint256 startId = endId > 100 ? endId - 100 : 0; // Check last 100 requests\\n        \\n        for (uint256 i = startId; i < endId; i++) {\\n            if (!randomnessRequests[i].fulfilled && randomnessRequests[i].requester != address(0)) {\\n                count++;\\n            }\\n        }\\n        \\n        return count;\\n    }\\n\\n    function _findPendingVRFRequest() internal view returns (uint256) {\\n        uint256 endId = nextRandomnessId;\\n        uint256 startId = endId > 10 ? endId - 10 : 0; // Check last 10 requests\\n        \\n        for (uint256 i = endId; i > startId; i--) {\\n            uint256 requestId = i - 1;\\n            RandomnessRequest memory request = randomnessRequests[requestId];\\n            \\n            if (request.requestType == uint32(RequestType.CHAINLINK_VRF) && \\n                !request.fulfilled && \\n                request.requester != address(0)) {\\n                return requestId;\\n            }\\n        }\\n        \\n        return 0;\\n    }\\n\\n    // Required to receive ETH\\n    receive() external payable {}\\n} \",\"keccak256\":\"0x17ad19f3960b077d6f3f90c10a6ad99f5d633bf4507d90c4a1ae4bae312fcd3f\",\"license\":\"MIT\"},\"contracts/interfaces/external/chainlink/IChainlinkVRFIntegratorV2_5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport { MessagingFee } from \\\"../../../../lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"../../../../lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\n\\n/**\\n * @title IChainlinkVRFIntegratorV2_5\\n * @dev Interface for Chainlink VRF 2.5 integration with cross-chain support\\n * \\n * This contract forwards VRF requests to peer chains for Chainlink VRF 2.5 processing via LayerZero V2.\\n */\\ninterface IChainlinkVRFIntegratorV2_5 {\\n    \\n    // Events\\n    event RandomWordsRequested(uint64 indexed requestId, address indexed requester, uint32 dstEid);\\n    event MessageSent(uint64 indexed requestId, uint32 indexed dstEid, bytes message);\\n    event RandomWordsReceived(uint256[] randomWords, uint64 indexed sequence, address indexed provider);\\n    event CallbackFailed(uint64 indexed sequence, address indexed provider, string reason);\\n    event CallbackSucceeded(uint64 indexed sequence, address indexed provider);\\n    event RequestExpired(uint64 indexed sequence, address indexed provider);\\n    event GasLimitUpdated(uint32 oldLimit, uint32 newLimit);\\n    event RequestTimeoutUpdated(uint256 oldTimeout, uint256 newTimeout); // AUDIT FIX: Add missing event\\n    event FeeMRegistered(address indexed contractAddress, uint256 indexed feeId);\\n    event ContractFunded(address indexed funder, uint256 amount, uint256 newBalance);\\n\\n    /**\\n     * @notice Check the status of a request\\n     * @param requestId The request ID to check\\n     * @return fulfilled Whether the request has been fulfilled\\n     * @return exists Whether the request exists\\n     * @return provider The address that made the request\\n     * @return randomWord The random word (0 if not fulfilled)\\n     * @return timestamp When the request was made\\n     * @return expired Whether the request has expired\\n     */\\n    function checkRequestStatus(uint64 requestId) external view returns (\\n        bool fulfilled,\\n        bool exists,\\n        address provider,\\n        uint256 randomWord,\\n        uint256 timestamp,\\n        bool expired\\n    );\\n\\n    /**\\n     * @notice Get the random word for a fulfilled request\\n     * @param requestId The request ID to query\\n     * @return randomWord The random word (0 if not fulfilled)\\n     * @return fulfilled Whether the request has been fulfilled\\n     */\\n    function getRandomWord(uint64 requestId) external view returns (uint256 randomWord, bool fulfilled);\\n\\n    /**\\n     * @dev Request random words from a peer VRF Consumer\\n     * @param _dstEid The destination endpoint ID\\n     * @param _options LayerZero options for the cross-chain message\\n     */\\n    function requestRandomWords(uint32 _dstEid, bytes calldata _options) external payable returns (MessagingReceipt memory receipt, uint64 requestId);\\n\\n    /**\\n     * @dev Request random words with default gas limit\\n     * @param _dstEid The destination endpoint ID\\n     */\\n    function requestRandomWordsSimple(uint32 _dstEid) external payable returns (MessagingReceipt memory receipt, uint64 requestId);\\n    \\n    /**\\n     * @dev Quote the fee for a random words request\\n     * @param _dstEid The destination endpoint ID\\n     * @param _options LayerZero options for the cross-chain message\\n     */\\n    function quote(uint32 _dstEid, bytes calldata _options) external view returns (MessagingFee memory fee);\\n\\n    /**\\n     * @dev Update default gas limit (owner only)\\n     */\\n    function setDefaultGasLimit(uint32 _gasLimit) external;\\n\\n    /**\\n     * @dev Update request timeout (owner only)\\n     */\\n    function setRequestTimeout(uint256 _timeout) external;\\n\\n    /**\\n     * @dev Clean up expired requests (anyone can call)\\n     * @param requestIds Array of request IDs to clean up\\n     */\\n    function cleanupExpiredRequests(uint64[] calldata requestIds) external;\\n\\n    /**\\n     * @dev Register contract on Sonic FeeM\\n     */\\n    function registerMe() external; // TEMPORARILY DISABLED - requires valid FeeM Project ID\\n\\n    /**\\n     * @dev Emergency withdraw (owner only)\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @dev Fund contract with ETH for LayerZero operations\\n     */\\n    function fundContract() external payable;\\n\\n    /**\\n     * @dev Authorize/deauthorize callers\\n     * @param caller The address to authorize/deauthorize\\n     * @param authorized Whether to authorize or deauthorize\\n     */\\n    function setAuthorizedCaller(address caller, bool authorized) external;\\n\\n    /**\\n     * @dev Get current contract balance and status\\n     * @return balance Current ETH balance\\n     * @return canOperate Whether contract has sufficient funds for operations\\n     */\\n    function getContractStatus() external view returns (uint256 balance, bool canOperate);\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    function requestCounter() external view returns (uint64);\\n    function defaultGasLimit() external view returns (uint32);\\n    function requestTimeout() external view returns (uint256);\\n    function s_requests(uint64 requestId) external view returns (\\n        bool fulfilled,\\n        bool exists,\\n        address provider,\\n        uint256 randomWord,\\n        uint256 timestamp,\\n        bool isContract\\n    );\\n    // AUDIT FIX: Removed redundant randomWordsProviders mapping from interface\\n} \",\"keccak256\":\"0x9c84b92f34e6d9da59cce2a1221dfee7fe8867c9806ec9235f1d7d1af780feb9\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0xb586cb0afd93daad6a94d17fbb0eedf2385c0470c15344d9b6335a05c6c143de\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x2bbebed6292d9d4b39a8813a350b82967586c932e5f916f6009a1bbc95775d8c\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x34b575e32247f1082a4888dbe6db235158cb2b56de8580acfcd1f4cae29e7ca5\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0x43714ea20ed076dc051cfb49f99cb3650e1e900c8483698f416f490023c0372a\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461011a57601f611c0538819003918201601f19168301916001600160401b0383118484101761011f5780849260209460405283398101031261011a57516001600160a01b0381169081900361011a5733156101045760008054336001600160a01b0319821681178355604051939290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180556702c68af0bb14000060075566038d7ea4c6800060085560006009556064600a5580156100f157600580546001600160a81b031916909117600160a01b1790555b611acf90816101368239f35b506005805460ff60a01b191690556100e5565b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163020e3d0f1461120b5750806307055840146111cc578063089fe6aa146111ae5780630d584d691461112f5780630e60e1d014610f585780631017507d14610f3a57806324a8a56814610f085780632636106414610e65578063372d6b2714610e205780633b68135e14610e02578063476343ee14610d825780635349c04614610c3657806353fa683714610c185780635cb6dfff14610b9c5780636954414114610b5a578063715018a614610b0157806377fd2fdd14610ae35780637f3539d6146106415780638546212d1461061857806385fb45fb146105a05780638da5cb5b14610577578063a8393fad14610556578063a9b68b5f14610538578063b181ee851461048d578063c47d51be1461046f578063ce65ec1b14610453578063cec10c11146103df578063d585013c146103c1578063d5d5ca5d146103a3578063e2a21b461461023e578063f2fde38b146101b55763f5b413201461018a573861000f565b346101b05760003660031901126101b057602060ff60055460a01c166040519015158152f35b600080fd5b346101b05760203660031901126101b0576101ce611245565b6101d66115d2565b6001600160a01b0316801561022857600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b346101b05760403660031901126101b05760243560043561025d6115d2565b80600052600260205260406000209182549260ff8460e01c1661035e576001600160a01b03841615610320576040828261001b9686956001600080516020611a7a833981519152960155600160e01b9060ff60e01b1916179055837f15c2632244cf9e34a75944294454bc5f794e9db8223c72ba82f61a9895b6a7886060845160208152601e60208201527f456d657267656e63792066756c66696c6c6d656e74206279206f776e6572000086820152a2815190815260006020820152a261178f565b60405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f5265717565737420616c72656164792066756c66696c6c6564000000000000006044820152606490fd5b346101b05760003660031901126101b0576020600a54604051908152f35b346101b05760003660031901126101b0576020600454604051908152f35b346101b05760603660031901126101b0577fcf8a1e1d5f09cf3c97dbb653cd9a4d7aace9292fbc1bb8211febf2d400febbdd60243560043561044e6044356104256115d2565b826007558360085580600955604051938493846040919493926060820195825260208201520152565b0390a1005b346101b05760003660031901126101b057602060405160008152f35b346101b05760003660031901126101b0576020600954604051908152f35b346101b05760203660031901126101b057600435600052600260205260a060406000206040516104bc8161125b565b815491600180851b0383169283835260ff6001600160401b0382871c169182602086015260e01c161515908160408501526002600184015493846060870152015493866001600160401b0363ffffffff87169687608085015260201c169101526040519485526020850152604084015260608301526080820152f35b346101b05760003660031901126101b0576020600c54604051908152f35b346101b05760203660031901126101b05761056f6115d2565b600435600a55005b346101b05760003660031901126101b0576000546040516001600160a01b039091168152602090f35b346101b05760203660031901126101b0576105b9611245565b6105c16115d2565b600580546001600160a81b031981166001600160a01b0393841690811781151560a01b60ff60a01b16179092559091167f6b86c9bf0982cc54eb344d63736017f271119dc502e2743fcb85f557625978a5600080a3005b346101b05760003660031901126101b0576005546040516001600160a01b039091168152602090f35b60003660031901126101b0576106556115fb565b60055460ff8160a01c1615610a9e576001600160a01b03168015610a60576007543410610a1b5760249061069361068a61161d565b600a5411611297565b60a0600454916106a2836112e3565b60045560405193848092631b1ae8b960e21b825261759e600483015234905af180610950575b6020925061083e57807f15c2632244cf9e34a75944294454bc5f794e9db8223c72ba82f61a9895b6a7886107096106fd61154a565b60405191829182611589565b0390a26040516107188161125b565b338152426001600160401b0316838201908152600060408084018281526060850183815260016080870190815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b0319161717905580600080516020611a7a83398151915260406107f333846116bd565b600084815260028088528382206001018390558582528752828120805460ff60e01b1916600160e01b179055825191825281870152a26108328161178f565b60018055604051908152f35b60405161084a8161125b565b338152426001600160401b0316838201908152600060408084018281526060850183815260016080870190815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b03191617179055610914600b546112e3565b600b5560405160018152600083820152817f1e03afcb3afb71ddf3e841b49655103be87ee23283ad593478277e0aa919a87360403393a3610832565b8260a03d60a011610a14575b6109668183611276565b8101039260a084126101b057608084126101b0576040519360608501908582106001600160401b038311176109fe576040918252825186526109aa60208401611536565b6020870152603f1901126101b0576040519360408501918583106001600160401b038411176109fe5760209560406080936109f8958252818401518352606084015189840152015201611536565b506106c8565b634e487b7160e01b600052604160045260246000fd5b503d61095c565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742066656520666f722056524600000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275159491881a5b9d1959dc985d1bdc881b9bdd081cd95d60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f436861696e6c696e6b20565246206e6f7420656e61626c6564000000000000006044820152606490fd5b346101b05760003660031901126101b0576020600e54604051908152f35b346101b05760003660031901126101b057610b1a6115d2565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101b05760003660031901126101b057602060055460ff8160a01c169081610b89575b506040519015158152f35b6001600160a01b03161515905082610b7e565b346101b05760203660031901126101b057600435600052600260205260c060406000206001600160401b03815491600260018201549101549060ff6040519460018060a01b0381168652848160a01c16602087015260e01c1615156040850152606084015263ffffffff8116608084015260201c1660a0820152f35b346101b05760003660031901126101b0576020600b54604051908152f35b346101b05760a03660031901126101b057610c4f611245565b602435906001600160a01b03821682036101b057604435916001600160a01b03831683036101b05733600052600660205260ff6040600020541615610d3d576020925a600d5491610c9f836112e3565b600d5560405193868501956001600160601b03199060601b1686526001600160601b03199060601b1660348501526001600160601b03199060601b166048840152606435605c840152608435607c84015242609c8401524460bc8401524160601b60dc8401523a60f08401526101108301523360601b6101308301526101448201526101448152610d3261016482611276565b519020604051908152f35b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420617574686f72697a656420636f6e73756d65720000000000000000006044820152606490fd5b346101b05760003660031901126101b057610d9b6115d2565b478015610dc75760008080809360018060a01b0382541682f115610dbb57005b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b6044820152606490fd5b346101b05760003660031901126101b0576020600d54604051908152f35b346101b05760003660031901126101b05760a0600b54600c54600d54600e5490610e4861161d565b926040519485526020850152604084015260608301526080820152f35b346101b05760403660031901126101b0576004356001600160401b0381116101b057366023820112156101b0578060040135906001600160401b0382116109fe578160051b60405192610ebb6020830185611276565b835260246020840191830101913683116101b057602401905b828210610ef857836024356001600160401b03811681036101b05761001b91611308565b8135815260209182019101610ed4565b346101b05760003660031901126101b05760085460075460095460408051938452602084019290925290820152606090f35b346101b05760003660031901126101b0576020600754604051908152f35b60003660031901126101b057610f6c6115fb565b60085434106110f757610f8061068a61161d565b6020600454610f8e816112e3565b600455604051610f9d8161125b565b338152426001600160401b031683820190815260006040808401828152606085018381526080860184815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b03191617179055611065600c546112e3565b600c5580600080516020611a7a833981519152604080516000908181528187820152847f1e03afcb3afb71ddf3e841b49655103be87ee23283ad593478277e0aa919a873843393a36110b733856116bd565b84825260028088528383206001018290558583528752828220805460ff60e01b1916600160e01b179055825190815280870191909152a26108328161178f565b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101b05760403660031901126101b057611148611245565b602435908115158092036101b05760207f173a32dd6a1ebf7355312db11356615b9bc7fc754332e376edb18c783f55eef8916111826115d2565b60018060a01b0316928360005260068252604060002060ff1981541660ff8316179055604051908152a2005b346101b05760003660031901126101b0576020600854604051908152f35b346101b05760203660031901126101b0576001600160a01b036111ed611245565b166000526006602052602060ff604060002054166040519015158152f35b346101b05760203660031901126101b057600435906001600160401b0382168092036101b057602091600052600382526040600020548152f35b600435906001600160a01b03821682036101b057565b60c081019081106001600160401b038211176109fe57604052565b90601f801991011681019081106001600160401b038211176109fe57604052565b1561129e57565b60405162461bcd60e51b815260206004820152601960248201527f546f6f206d616e792070656e64696e67207265717565737473000000000000006044820152606490fd5b60001981146112f25760010190565b634e487b7160e01b600052601160045260246000fd5b6005549091906001600160a01b031633036114f1578151156114ac576001600160401b0316806000526003602052604060002054908115808015906114a4575b156114685781159081611460575b50611450575b811561144b57816000526002602052604060002090600163ffffffff6002840154161480159061143d575b611437578351156114215760408392600080516020611a7a83398151915292602061141f97015191826001820155600160e01b60ff60e01b198254161790556113d1600e546112e3565b600e55806000526003602052600083812055847ffd75d4660ebf9cf7ce55922f2e09981aec0f1aae23da93841ae796bea8cf725360208551858152a3815190815260016020820152a261178f565b565b634e487b7160e01b600052603260045260246000fd5b50505050565b5060ff825460e01c16611387565b505050565b905061145a61197f565b9061135c565b905038611356565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e205652462073657175656e636560601b6044820152606490fd5b508115611348565b60405162461bcd60e51b815260206004820152601860248201527f4e6f2072616e646f6d20776f7264732070726f766964656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792056524620696e7465677261746f722063616e2063616c6c000000006044820152606490fd5b51906001600160401b03821682036101b057565b3d15611584573d906001600160401b0382116109fe5760405191611578601f8201601f191660200184611276565b82523d6000602084013e565b606090565b91909160208152825180602083015260005b8181106115bc575060409293506000838284010152601f8019910116010190565b806020809287010151604082860101520161159b565b6000546001600160a01b031633036115e657565b63118cdaa760e01b6000523360045260246000fd5b60026001541461160c576002600155565b633ee5aeb560e01b60005260046000fd5b6000600454606481116000146116b75760631981018181116116a3575b81811061164657505090565b80600052600260205260ff60406000205460e01c161580611683575b61166f575b60010161163a565b9161167b6001916112e3565b929050611667565b506000818152600260205260409020546001600160a01b03161515611662565b634e487b7160e01b83526011600452602483fd5b8161163a565b5a47906040519260208401944286524460408601524160601b60608601526001600160601b03199060601b16607485015260888401523a60a884015260c883015260e882015260e8815261171361010882611276565b51902090565b600060443d1061177e576040513d600319016004823e8051913d60248401116001600160401b0384111761178957828201928351916001600160401b038311611781573d84016003190185840160200111611781575061177e92910160200190611276565b90565b949350505050565b92915050565b600081815260026020526040812080549091906001600160a01b0316803b1561194a5760018301908154813b1561194657839160448392604051948593849263210b9f0360e01b84528b600485015260248401525af19081611932575b506118f257506001908060033d116118e2575b6308c379a014611881575b50611813575050565b61181b61154a565b5060018060a01b03905416907f2bd49d9fd47fc0e1cdd0c97db18a3208b9211a864991f1ea6969071679b20912606060405160208152601a60208201527f4c6f772d6c6576656c2064656c6976657279206661696c7572650000000000006040820152a3565b611889611719565b9081611896575b5061180a565b83546040519193506001600160a01b03169185917f2bd49d9fd47fc0e1cdd0c97db18a3208b9211a864991f1ea6969071679b209129181906118d89082611589565b0390a33880611890565b50600481803e805160e01c6117ff565b915491546040519081526001600160a01b0390921692917fe84e678feda1cb3aa2465f715ad100c4cd51b7184ff516232675a8830ff7472d9150602090a3565b8361193f91949294611276565b91386117ec565b8380fd5b92917fe84e678feda1cb3aa2465f715ad100c4cd51b7184ff516232675a8830ff7472d915060016020910154604051908152a3565b600454600a811115611a715760091981018181116112f257905b8181116119a7575050600090565b60001981018181116112f25780600052600260205260406000206040516119cd8161125b565b60016002835493828060a01b03851684526001600160401b038560a01c16602085015260ff604085019560e01c161515855282810154606085015201546001600160401b0363ffffffff82169182608086015260201c1660a0840152149182611a67575b5081611a53575b50611a4d575080156112f25760001901611999565b91505090565b516001600160a01b03161515905038611a38565b5115915038611a31565b60009061199956fe9a0135f78541ba6bbfb2501db95cd4f3af86d31296088d8afb8c251876caf94da264697066735822122072e5ead6157219cd2bec68758c7062e585d5c90b5055cfdc1acffdeca945d42164736f6c634300081c0033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163020e3d0f1461120b5750806307055840146111cc578063089fe6aa146111ae5780630d584d691461112f5780630e60e1d014610f585780631017507d14610f3a57806324a8a56814610f085780632636106414610e65578063372d6b2714610e205780633b68135e14610e02578063476343ee14610d825780635349c04614610c3657806353fa683714610c185780635cb6dfff14610b9c5780636954414114610b5a578063715018a614610b0157806377fd2fdd14610ae35780637f3539d6146106415780638546212d1461061857806385fb45fb146105a05780638da5cb5b14610577578063a8393fad14610556578063a9b68b5f14610538578063b181ee851461048d578063c47d51be1461046f578063ce65ec1b14610453578063cec10c11146103df578063d585013c146103c1578063d5d5ca5d146103a3578063e2a21b461461023e578063f2fde38b146101b55763f5b413201461018a573861000f565b346101b05760003660031901126101b057602060ff60055460a01c166040519015158152f35b600080fd5b346101b05760203660031901126101b0576101ce611245565b6101d66115d2565b6001600160a01b0316801561022857600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b346101b05760403660031901126101b05760243560043561025d6115d2565b80600052600260205260406000209182549260ff8460e01c1661035e576001600160a01b03841615610320576040828261001b9686956001600080516020611a7a833981519152960155600160e01b9060ff60e01b1916179055837f15c2632244cf9e34a75944294454bc5f794e9db8223c72ba82f61a9895b6a7886060845160208152601e60208201527f456d657267656e63792066756c66696c6c6d656e74206279206f776e6572000086820152a2815190815260006020820152a261178f565b60405162461bcd60e51b815260206004820152601660248201527514995c5d595cdd08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f5265717565737420616c72656164792066756c66696c6c6564000000000000006044820152606490fd5b346101b05760003660031901126101b0576020600a54604051908152f35b346101b05760003660031901126101b0576020600454604051908152f35b346101b05760603660031901126101b0577fcf8a1e1d5f09cf3c97dbb653cd9a4d7aace9292fbc1bb8211febf2d400febbdd60243560043561044e6044356104256115d2565b826007558360085580600955604051938493846040919493926060820195825260208201520152565b0390a1005b346101b05760003660031901126101b057602060405160008152f35b346101b05760003660031901126101b0576020600954604051908152f35b346101b05760203660031901126101b057600435600052600260205260a060406000206040516104bc8161125b565b815491600180851b0383169283835260ff6001600160401b0382871c169182602086015260e01c161515908160408501526002600184015493846060870152015493866001600160401b0363ffffffff87169687608085015260201c169101526040519485526020850152604084015260608301526080820152f35b346101b05760003660031901126101b0576020600c54604051908152f35b346101b05760203660031901126101b05761056f6115d2565b600435600a55005b346101b05760003660031901126101b0576000546040516001600160a01b039091168152602090f35b346101b05760203660031901126101b0576105b9611245565b6105c16115d2565b600580546001600160a81b031981166001600160a01b0393841690811781151560a01b60ff60a01b16179092559091167f6b86c9bf0982cc54eb344d63736017f271119dc502e2743fcb85f557625978a5600080a3005b346101b05760003660031901126101b0576005546040516001600160a01b039091168152602090f35b60003660031901126101b0576106556115fb565b60055460ff8160a01c1615610a9e576001600160a01b03168015610a60576007543410610a1b5760249061069361068a61161d565b600a5411611297565b60a0600454916106a2836112e3565b60045560405193848092631b1ae8b960e21b825261759e600483015234905af180610950575b6020925061083e57807f15c2632244cf9e34a75944294454bc5f794e9db8223c72ba82f61a9895b6a7886107096106fd61154a565b60405191829182611589565b0390a26040516107188161125b565b338152426001600160401b0316838201908152600060408084018281526060850183815260016080870190815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b0319161717905580600080516020611a7a83398151915260406107f333846116bd565b600084815260028088528382206001018390558582528752828120805460ff60e01b1916600160e01b179055825191825281870152a26108328161178f565b60018055604051908152f35b60405161084a8161125b565b338152426001600160401b0316838201908152600060408084018281526060850183815260016080870190815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b03191617179055610914600b546112e3565b600b5560405160018152600083820152817f1e03afcb3afb71ddf3e841b49655103be87ee23283ad593478277e0aa919a87360403393a3610832565b8260a03d60a011610a14575b6109668183611276565b8101039260a084126101b057608084126101b0576040519360608501908582106001600160401b038311176109fe576040918252825186526109aa60208401611536565b6020870152603f1901126101b0576040519360408501918583106001600160401b038411176109fe5760209560406080936109f8958252818401518352606084015189840152015201611536565b506106c8565b634e487b7160e01b600052604160045260246000fd5b503d61095c565b60405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e742066656520666f722056524600000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275159491881a5b9d1959dc985d1bdc881b9bdd081cd95d60521b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f436861696e6c696e6b20565246206e6f7420656e61626c6564000000000000006044820152606490fd5b346101b05760003660031901126101b0576020600e54604051908152f35b346101b05760003660031901126101b057610b1a6115d2565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101b05760003660031901126101b057602060055460ff8160a01c169081610b89575b506040519015158152f35b6001600160a01b03161515905082610b7e565b346101b05760203660031901126101b057600435600052600260205260c060406000206001600160401b03815491600260018201549101549060ff6040519460018060a01b0381168652848160a01c16602087015260e01c1615156040850152606084015263ffffffff8116608084015260201c1660a0820152f35b346101b05760003660031901126101b0576020600b54604051908152f35b346101b05760a03660031901126101b057610c4f611245565b602435906001600160a01b03821682036101b057604435916001600160a01b03831683036101b05733600052600660205260ff6040600020541615610d3d576020925a600d5491610c9f836112e3565b600d5560405193868501956001600160601b03199060601b1686526001600160601b03199060601b1660348501526001600160601b03199060601b166048840152606435605c840152608435607c84015242609c8401524460bc8401524160601b60dc8401523a60f08401526101108301523360601b6101308301526101448201526101448152610d3261016482611276565b519020604051908152f35b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420617574686f72697a656420636f6e73756d65720000000000000000006044820152606490fd5b346101b05760003660031901126101b057610d9b6115d2565b478015610dc75760008080809360018060a01b0382541682f115610dbb57005b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020600482015260136024820152724e6f206665657320746f20776974686472617760681b6044820152606490fd5b346101b05760003660031901126101b0576020600d54604051908152f35b346101b05760003660031901126101b05760a0600b54600c54600d54600e5490610e4861161d565b926040519485526020850152604084015260608301526080820152f35b346101b05760403660031901126101b0576004356001600160401b0381116101b057366023820112156101b0578060040135906001600160401b0382116109fe578160051b60405192610ebb6020830185611276565b835260246020840191830101913683116101b057602401905b828210610ef857836024356001600160401b03811681036101b05761001b91611308565b8135815260209182019101610ed4565b346101b05760003660031901126101b05760085460075460095460408051938452602084019290925290820152606090f35b346101b05760003660031901126101b0576020600754604051908152f35b60003660031901126101b057610f6c6115fb565b60085434106110f757610f8061068a61161d565b6020600454610f8e816112e3565b600455604051610f9d8161125b565b338152426001600160401b031683820190815260006040808401828152606085018381526080860184815260a08088018681528987526002808c529590962097518854975194516001600160e81b03199098166001600160a01b03919091161793901b67ffffffffffffffff60a01b169290921794151560e01b60ff60e01b1694909417855593919263ffffffff9290516001820155019251166bffffffffffffffff0000000083549251861b16916001600160601b03191617179055611065600c546112e3565b600c5580600080516020611a7a833981519152604080516000908181528187820152847f1e03afcb3afb71ddf3e841b49655103be87ee23283ad593478277e0aa919a873843393a36110b733856116bd565b84825260028088528383206001018290558583528752828220805460ff60e01b1916600160e01b179055825190815280870191909152a26108328161178f565b60405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742066656560801b6044820152606490fd5b346101b05760403660031901126101b057611148611245565b602435908115158092036101b05760207f173a32dd6a1ebf7355312db11356615b9bc7fc754332e376edb18c783f55eef8916111826115d2565b60018060a01b0316928360005260068252604060002060ff1981541660ff8316179055604051908152a2005b346101b05760003660031901126101b0576020600854604051908152f35b346101b05760203660031901126101b0576001600160a01b036111ed611245565b166000526006602052602060ff604060002054166040519015158152f35b346101b05760203660031901126101b057600435906001600160401b0382168092036101b057602091600052600382526040600020548152f35b600435906001600160a01b03821682036101b057565b60c081019081106001600160401b038211176109fe57604052565b90601f801991011681019081106001600160401b038211176109fe57604052565b1561129e57565b60405162461bcd60e51b815260206004820152601960248201527f546f6f206d616e792070656e64696e67207265717565737473000000000000006044820152606490fd5b60001981146112f25760010190565b634e487b7160e01b600052601160045260246000fd5b6005549091906001600160a01b031633036114f1578151156114ac576001600160401b0316806000526003602052604060002054908115808015906114a4575b156114685781159081611460575b50611450575b811561144b57816000526002602052604060002090600163ffffffff6002840154161480159061143d575b611437578351156114215760408392600080516020611a7a83398151915292602061141f97015191826001820155600160e01b60ff60e01b198254161790556113d1600e546112e3565b600e55806000526003602052600083812055847ffd75d4660ebf9cf7ce55922f2e09981aec0f1aae23da93841ae796bea8cf725360208551858152a3815190815260016020820152a261178f565b565b634e487b7160e01b600052603260045260246000fd5b50505050565b5060ff825460e01c16611387565b505050565b905061145a61197f565b9061135c565b905038611356565b60405162461bcd60e51b8152602060048201526014602482015273556e6b6e6f776e205652462073657175656e636560601b6044820152606490fd5b508115611348565b60405162461bcd60e51b815260206004820152601860248201527f4e6f2072616e646f6d20776f7264732070726f766964656400000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4f6e6c792056524620696e7465677261746f722063616e2063616c6c000000006044820152606490fd5b51906001600160401b03821682036101b057565b3d15611584573d906001600160401b0382116109fe5760405191611578601f8201601f191660200184611276565b82523d6000602084013e565b606090565b91909160208152825180602083015260005b8181106115bc575060409293506000838284010152601f8019910116010190565b806020809287010151604082860101520161159b565b6000546001600160a01b031633036115e657565b63118cdaa760e01b6000523360045260246000fd5b60026001541461160c576002600155565b633ee5aeb560e01b60005260046000fd5b6000600454606481116000146116b75760631981018181116116a3575b81811061164657505090565b80600052600260205260ff60406000205460e01c161580611683575b61166f575b60010161163a565b9161167b6001916112e3565b929050611667565b506000818152600260205260409020546001600160a01b03161515611662565b634e487b7160e01b83526011600452602483fd5b8161163a565b5a47906040519260208401944286524460408601524160601b60608601526001600160601b03199060601b16607485015260888401523a60a884015260c883015260e882015260e8815261171361010882611276565b51902090565b600060443d1061177e576040513d600319016004823e8051913d60248401116001600160401b0384111761178957828201928351916001600160401b038311611781573d84016003190185840160200111611781575061177e92910160200190611276565b90565b949350505050565b92915050565b600081815260026020526040812080549091906001600160a01b0316803b1561194a5760018301908154813b1561194657839160448392604051948593849263210b9f0360e01b84528b600485015260248401525af19081611932575b506118f257506001908060033d116118e2575b6308c379a014611881575b50611813575050565b61181b61154a565b5060018060a01b03905416907f2bd49d9fd47fc0e1cdd0c97db18a3208b9211a864991f1ea6969071679b20912606060405160208152601a60208201527f4c6f772d6c6576656c2064656c6976657279206661696c7572650000000000006040820152a3565b611889611719565b9081611896575b5061180a565b83546040519193506001600160a01b03169185917f2bd49d9fd47fc0e1cdd0c97db18a3208b9211a864991f1ea6969071679b209129181906118d89082611589565b0390a33880611890565b50600481803e805160e01c6117ff565b915491546040519081526001600160a01b0390921692917fe84e678feda1cb3aa2465f715ad100c4cd51b7184ff516232675a8830ff7472d9150602090a3565b8361193f91949294611276565b91386117ec565b8380fd5b92917fe84e678feda1cb3aa2465f715ad100c4cd51b7184ff516232675a8830ff7472d915060016020910154604051908152a3565b600454600a811115611a715760091981018181116112f257905b8181116119a7575050600090565b60001981018181116112f25780600052600260205260406000206040516119cd8161125b565b60016002835493828060a01b03851684526001600160401b038560a01c16602085015260ff604085019560e01c161515855282810154606085015201546001600160401b0363ffffffff82169182608086015260201c1660a0840152149182611a67575b5081611a53575b50611a4d575080156112f25760001901611999565b91505090565b516001600160a01b03161515905038611a38565b5115915038611a31565b60009061199956fe9a0135f78541ba6bbfb2501db95cd4f3af86d31296088d8afb8c251876caf94da264697066735822122072e5ead6157219cd2bec68758c7062e585d5c90b5055cfdc1acffdeca945d42164736f6c634300081c0033",
  "devdoc": {
    "details": "Advanced randomness provider that wraps ChainlinkVRFIntegratorV2_5 with full cross-chain VRF integration  FEATURES: - Full Chainlink VRF integration via ChainlinkVRFIntegratorV2_5 (Sonic → Arbitrum → Chainlink) - Authorization system for consumers - Request mapping and callback handling - Fallback pseudo-randomness for instant decisions - Fee management and withdrawal - Comprehensive event logging https://x.com/sonicreddragon https://t.me/sonicreddragon",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "drawUnpredictableFromPool(address,address,address,uint256,uint256)": {
        "details": "Get instant randomness for per-swap lotteries (no fee, pseudo-random)",
        "params": {
          "amountIn": "The input amount",
          "amountOut": "The output amount",
          "swapper": "The address of the user making the swap",
          "tokenA": "The first token in the swap",
          "tokenB": "The second token in the swap  "
        },
        "returns": {
          "randomness": "The generated random value"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveRandomWords(uint256[],uint64)": {
        "details": "Receives random words from ChainlinkVRFIntegratorV2_5",
        "params": {
          "randomWords": "Array of random words from Chainlink VRF",
          "sequence": "The VRF sequence number from the integrator"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestRandomnessFromChainlinkVRF()": {
        "details": "Request randomness from Chainlink VRF via cross-chain integrator",
        "returns": {
          "_0": "randomnessId The unique identifier for this randomness request"
        }
      },
      "requestRandomnessFromPool()": {
        "details": "Request randomness from pool (uses pseudo-randomness for now)",
        "returns": {
          "_0": "randomnessId The unique identifier for this randomness request"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "OmniDragonRandomnessProvider",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 42109,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 44492,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18945,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "randomnessRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RandomnessRequest)18936_storage)"
      },
      {
        "astId": 18949,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "vrfSequenceToRequestId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 18951,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "nextRandomnessId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 18954,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "chainlinkVRFIntegrator",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IChainlinkVRFIntegratorV2_5)24415"
      },
      {
        "astId": 18956,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "chainlinkVRFEnabled",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 18960,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "authorizedConsumers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18963,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "vrfFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 18966,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "poolFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 18969,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "instantFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 18972,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "maxPendingRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18974,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "totalVRFRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 18976,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "totalPoolRequests",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 18978,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "totalInstantRequests",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 18980,
        "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
        "label": "successfulVRFCallbacks",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChainlinkVRFIntegratorV2_5)24415": {
        "encoding": "inplace",
        "label": "contract IChainlinkVRFIntegratorV2_5",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(RandomnessRequest)18936_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OmniDragonRandomnessProvider.RandomnessRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(RandomnessRequest)18936_storage"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RandomnessRequest)18936_storage": {
        "encoding": "inplace",
        "label": "struct OmniDragonRandomnessProvider.RandomnessRequest",
        "members": [
          {
            "astId": 18925,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18927,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "timestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 18929,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "fulfilled",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 18931,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "randomValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18933,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "requestType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 18935,
            "contract": "contracts/core/oracles/OmniDragonRandomnessProvider.sol:OmniDragonRandomnessProvider",
            "label": "vrfSequence",
            "offset": 4,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}