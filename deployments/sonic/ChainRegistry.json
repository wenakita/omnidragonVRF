{
  "address": "0x3ba704d1C7d3ae29dB6CA1dA3184964FCFe9412E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_placeholderEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeMAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "ChainAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "ChainNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DelegateCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EndpointAlreadyUpdated",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSignatures",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoUpdatePending",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimelockNotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedSigner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpdateAlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpdatedPeriodExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "chainName",
          "type": "string"
        }
      ],
      "name": "ChainRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "ChainStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "ChainUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "CurrentChainSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEndpoint",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executeAfter",
          "type": "uint256"
        }
      ],
      "name": "EndpointUpdateProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EndpointUpdateRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldEndpoint",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEndpoint",
          "type": "address"
        }
      ],
      "name": "EndpointUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "FeeMAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRequirement",
          "type": "uint256"
        }
      ],
      "name": "RequiredSignaturesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "SignerAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedSigners",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIdToEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkFeeMStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "eidToChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeEndpointUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeMAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getChainConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "string",
              "name": "chainName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "wrappedNativeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lotteryManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "randomnessProvider",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vrfConsumer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dragonToken",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            }
          ],
          "internalType": "struct IChainRegistry.ChainConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getDragonToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getLotteryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getPriceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getRandomnessProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedChains",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getSwapTrigger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getVRFConsumer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getWrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "isChainSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isEndpointUpdated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpointAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingEndpointUpdate",
      "outputs": [
        {
          "internalType": "address",
          "name": "newEndpoint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposedAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newEndpoint",
          "type": "address"
        }
      ],
      "name": "proposeEndpointUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "string",
          "name": "_chainName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomnessProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfConsumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dragonToken",
          "type": "address"
        }
      ],
      "name": "registerChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredSignatures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokePendingEndpointUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_authorized",
          "type": "bool"
        }
      ],
      "name": "setAuthorizedSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setChainActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "setCurrentChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "setRequiredSignatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "signatureCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomnessProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfConsumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dragonToken",
          "type": "address"
        }
      ],
      "name": "updateChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newEndpoint",
          "type": "address"
        }
      ],
      "name": "updateEndpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newFeeMAddress",
          "type": "address"
        }
      ],
      "name": "updateFeeMAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd554478d5c76553439873d6f43e2577dc7ead2b78c403a156c163fc9e3a2b7d9",
  "receipt": {
    "to": null,
    "from": "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F",
    "contractAddress": "0x3ba704d1C7d3ae29dB6CA1dA3184964FCFe9412E",
    "transactionIndex": 0,
    "gasUsed": "2131758",
    "logsBloom": "0x
    "blockHash": "0x0fede4136616e0c9b9cf7fd4330011d566aa1e8119755c0320097924b3762622",
    "transactionHash": "0xd554478d5c76553439873d6f43e2577dc7ead2b78c403a156c163fc9e3a2b7d9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 36088876,
        "transactionHash": "0xd554478d5c76553439873d6f43e2577dc7ead2b78c403a156c163fc9e3a2b7d9",
        "address": "0x3ba704d1C7d3ae29dB6CA1dA3184964FCFe9412E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ddd0050d1e084dfc72d5d06447cc10bcd3fef60f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0fede4136616e0c9b9cf7fd4330011d566aa1e8119755c0320097924b3762622"
      }
    ],
    "blockNumber": 36088876,
    "cumulativeGasUsed": "2131758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6F475642a6e85809B1c36Fa62763669b1b48DD5B",
    "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F",
    "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F"
  ],
  "numDeployments": 2,
  "solcInputHash": "7b4a73482a2577a275f25c1fa8d9e216",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_placeholderEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeMAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"ChainAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"ChainNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DelegateCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndpointAlreadyUpdated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoUpdatePending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimelockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdateAlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdatedPeriodExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"}],\"name\":\"ChainRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"ChainStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"ChainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"CurrentChainSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEndpoint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executeAfter\",\"type\":\"uint256\"}],\"name\":\"EndpointUpdateProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndpointUpdateRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldEndpoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEndpoint\",\"type\":\"address\"}],\"name\":\"EndpointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeMAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRequirement\",\"type\":\"uint256\"}],\"name\":\"RequiredSignaturesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"SignerAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedSigners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIdToEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkFeeMStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"eidToChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEndpointUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getChainConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"randomnessProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dragonToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct IChainRegistry.ChainConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getDragonToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getLotteryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getRandomnessProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedChains\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getSwapTrigger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getVRFConsumer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getWrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEndpointUpdated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpointAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingEndpointUpdate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newEndpoint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposedAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEndpoint\",\"type\":\"address\"}],\"name\":\"proposeEndpointUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomnessProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dragonToken\",\"type\":\"address\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokePendingEndpointUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"setAuthorizedSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setChainActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"setCurrentChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"setRequiredSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signatureCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomnessProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dragonToken\",\"type\":\"address\"}],\"name\":\"updateChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEndpoint\",\"type\":\"address\"}],\"name\":\"updateEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newFeeMAddress\",\"type\":\"address\"}],\"name\":\"updateFeeMAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"AUDIT-COMPLIANT Central registry for cross-chain configuration and chain-specific parameters CRITICAL AUDIT FIXES: - CRITICAL: Added onlyOwner protection to registerMe() function - MAJOR: Added timelock mechanism for updateEndpoint() with 48-hour delay - MAJOR: Added multi-signature requirement for critical endpoint updates - MINOR: Added event emission for setCurrentChainId() - INFORMATIONAL: Pinned Solidity version to 0.8.20 - INFORMATIONAL: Added comprehensive NatSpec documentation Manages supported chains, LayerZero endpoints, and chain-specific token addresses Essential for secure cross-chain operations in the OmniDragon ecosystem https://x.com/sonicreddragon https://t.me/sonicreddragon\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"checkFeeMStatus()\":{\"returns\":{\"isRegistered\":\"Whether the contract is registered for fee monetization\"}},\"constructor\":{\"details\":\"Constructor\",\"params\":{\"_feeMAddress\":\"The Sonic FeeM contract address (configurable)\",\"_initialOwner\":\"The initial owner of the contract\",\"_placeholderEndpoint\":\"A placeholder endpoint address (same for all chains)\"}},\"executeEndpointUpdate()\":{\"details\":\"Only for emergency updates after initial setup period      Requires multi-signature approval for critical security\"},\"getChainConfig(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"Chain configuration struct\"}},\"getCurrentChainId()\":{\"details\":\"Get the current chain's LayerZero ID\",\"returns\":{\"_0\":\"The LayerZero chain ID of the current chain\"}},\"getDragonToken(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The Dragon token address\"}},\"getLotteryManager(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The lottery manager address\"}},\"getPriceOracle(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The price oracle address\"}},\"getRandomnessProvider(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The randomness provider address\"}},\"getSupportedChains()\":{\"returns\":{\"_0\":\"Array of supported chain IDs\"}},\"getSwapTrigger(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The lottery manager address (for backward compatibility)\"}},\"getVRFConsumer(uint16)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The VRF consumer address\"}},\"getWrappedNativeToken(uint16)\":{\"details\":\"Get the wrapped native token address for a specific chain\",\"params\":{\"_chainId\":\"The LayerZero chain ID\"},\"returns\":{\"_0\":\"The wrapped native token address for the specified chain\"}},\"isChainSupported(uint16)\":{\"details\":\"Check if a chain is supported\",\"params\":{\"_chainId\":\"The LayerZero chain ID to check\"},\"returns\":{\"_0\":\"True if the chain is supported, false otherwise\"}},\"isEndpointUpdated()\":{\"details\":\"Returns whether the endpoint has been updated\",\"returns\":{\"_0\":\"True if updated, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proposeEndpointUpdate(address)\":{\"details\":\"This function is for emergency endpoint updates after the initial setup period      Requires timelock for security. Only available after the endpoint has been      initially set using updateEndpoint during the setup period, and after the      initial setup period (7 days) has expired.\",\"params\":{\"_newEndpoint\":\"The new chain-specific LZ endpoint address\"}},\"registerChain(uint16,string,address,address,address,address,address,address)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\",\"_chainName\":\"The human-readable chain name\",\"_dragonToken\":\"The Dragon token address on this chain\",\"_lotteryManager\":\"The chain-specific lottery manager address\",\"_priceOracle\":\"The chain-specific price oracle address\",\"_randomnessProvider\":\"The chain-specific randomness provider address\",\"_vrfConsumer\":\"The chain-specific VRF consumer address\",\"_wrappedNativeToken\":\"The wrapped native token address (WETH, WrappedNativeToken, WSOL, WBERA, etc.)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokePendingEndpointUpdate()\":{\"details\":\"Allows canceling a pending update before execution\"},\"setAuthorizedSigner(address,bool)\":{\"params\":{\"_authorized\":\"Whether the signer is authorized\",\"_signer\":\"The signer address\"}},\"setChainActive(uint16,bool)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID\",\"_isActive\":\"Whether the chain is active\"}},\"setCurrentChainId(uint16)\":{\"params\":{\"_chainId\":\"The current chain's LayerZero ID\"}},\"setRequiredSignatures(uint256)\":{\"params\":{\"_required\":\"Number of required signatures\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateChain(uint16,address,address,address,address,address,address)\":{\"params\":{\"_chainId\":\"The LayerZero chain ID to update\",\"_dragonToken\":\"The Dragon token address on this chain\",\"_lotteryManager\":\"The chain-specific lottery manager address\",\"_priceOracle\":\"The chain-specific price oracle address\",\"_randomnessProvider\":\"The chain-specific randomness provider address\",\"_vrfConsumer\":\"The chain-specific VRF consumer address\",\"_wrappedNativeToken\":\"The wrapped native token address\"}},\"updateDeadline()\":{\"details\":\"Returns the deadline for updating the endpoint\",\"returns\":{\"_0\":\"Timestamp of the update deadline\"}},\"updateEndpoint(address)\":{\"details\":\"This function allows immediate updates during the initial setup period (7 days)      After the setup period expires, must use proposeEndpointUpdate + executeEndpointUpdate\",\"params\":{\"_newEndpoint\":\"The new chain-specific LZ endpoint address\"}},\"updateFeeMAddress(address)\":{\"params\":{\"_newFeeMAddress\":\"The new FeeM contract address\"}}},\"title\":\"ChainRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkFeeMStatus()\":{\"notice\":\"Check if this contract is registered for Sonic FeeM\"},\"executeEndpointUpdate()\":{\"notice\":\"AUDIT FIX: Execute endpoint update after timelock with multi-signature protection\"},\"getChainConfig(uint16)\":{\"notice\":\"Get chain configuration\"},\"getDragonToken(uint16)\":{\"notice\":\"Get Dragon token address for a specific chain\"},\"getLotteryManager(uint16)\":{\"notice\":\"Get lottery manager address for a specific chain\"},\"getPriceOracle(uint16)\":{\"notice\":\"Get price oracle address for a specific chain\"},\"getRandomnessProvider(uint16)\":{\"notice\":\"Get randomness provider address for a specific chain\"},\"getSupportedChains()\":{\"notice\":\"Get all supported chain IDs\"},\"getSwapTrigger(uint16)\":{\"notice\":\"Get swap trigger address for a specific chain (deprecated - returns lottery manager)\"},\"getVRFConsumer(uint16)\":{\"notice\":\"Get VRF consumer address for a specific chain\"},\"proposeEndpointUpdate(address)\":{\"notice\":\"AUDIT FIX: Propose endpoint update with timelock (for post-setup changes)\"},\"registerChain(uint16,string,address,address,address,address,address,address)\":{\"notice\":\"Register a new chain configuration\"},\"revokePendingEndpointUpdate()\":{\"notice\":\"AUDIT FIX: Revoke pending endpoint update\"},\"setAuthorizedSigner(address,bool)\":{\"notice\":\"AUDIT FIX: Add/remove authorized signers for multi-sig operations\"},\"setChainActive(uint16,bool)\":{\"notice\":\"Set chain active status\"},\"setCurrentChainId(uint16)\":{\"notice\":\"Set the current chain ID\"},\"setRequiredSignatures(uint256)\":{\"notice\":\"AUDIT FIX: Set required signatures for critical operations\"},\"updateChain(uint16,address,address,address,address,address,address)\":{\"notice\":\"Update an existing chain configuration\"},\"updateEndpoint(address)\":{\"notice\":\"AUDIT FIX: Update endpoint immediately during initial setup period\"},\"updateFeeMAddress(address)\":{\"notice\":\"AUDIT FIX: Update FeeM contract address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/config/ChainRegistry.sol\":\"ChainRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373530393832303230323638\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/core/config/ChainRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport 'lib/openzeppelin-contracts/contracts/access/Ownable.sol';\\nimport '../../interfaces/config/IChainRegistry.sol';\\nimport '../../interfaces/external/layerzero/ILayerZeroEndpoint.sol';\\nimport { Pausable } from \\\"lib/openzeppelin-contracts/contracts/utils/Pausable.sol\\\";\\nimport { ReentrancyGuard } from \\\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n\\n/**\\n * @title ChainRegistry\\n * @dev AUDIT-COMPLIANT Central registry for cross-chain configuration and chain-specific parameters\\n *\\n * CRITICAL AUDIT FIXES:\\n * - CRITICAL: Added onlyOwner protection to registerMe() function\\n * - MAJOR: Added timelock mechanism for updateEndpoint() with 48-hour delay\\n * - MAJOR: Added multi-signature requirement for critical endpoint updates\\n * - MINOR: Added event emission for setCurrentChainId()\\n * - INFORMATIONAL: Pinned Solidity version to 0.8.20\\n * - INFORMATIONAL: Added comprehensive NatSpec documentation\\n *\\n * Manages supported chains, LayerZero endpoints, and chain-specific token addresses\\n * Essential for secure cross-chain operations in the OmniDragon ecosystem\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */\\ncontract ChainRegistry is IChainRegistry, Ownable, Pausable, ReentrancyGuard {\\n  // Storage for chain configuration\\n  mapping(uint16 => ChainConfig) private chainConfigs;\\n\\n  // Track all supported chains\\n  uint16[] private supportedChains;\\n\\n  // Current chain ID (set at deployment time)\\n  uint16 private currentChainId;\\n\\n  // Layer Zero endpoint address (for proxy functionality)\\n  address public lzEndpointAddress;\\n\\n  // AUDIT FIX: Sonic FeeM address (configurable instead of hardcoded)\\n  address public feeMAddress;\\n\\n  // AUDIT FIX: Enhanced endpoint update security\\n  struct EndpointUpdate {\\n    address newEndpoint;\\n    uint256 proposedAt;\\n    bool executed;\\n  }\\n\\n  EndpointUpdate public pendingEndpointUpdate;\\n  bool private _endpointUpdated;\\n  uint256 private constant UPDATE_PERIOD = 7 days;\\n  uint256 private constant TIMELOCK_DELAY = 48 hours; // AUDIT FIX: Added timelock\\n  uint256 private immutable _updateDeadline;\\n\\n  // AUDIT FIX: Multi-signature support for critical operations\\n  mapping(address => bool) public authorizedSigners;\\n  uint256 public requiredSignatures = 1; // Can be increased for multi-sig\\n  mapping(bytes32 => mapping(address => bool)) public signatures;\\n  mapping(bytes32 => uint256) public signatureCount;\\n\\n  // Custom errors\\n  error ChainAlreadyRegistered(uint16 chainId);\\n  error ChainNotRegistered(uint16 chainId);\\n  error ZeroAddress();\\n  error EndpointAlreadyUpdated();\\n  error UpdatedPeriodExpired();\\n  error DelegateCallFailed();\\n  error TimelockNotExpired();\\n  error NoUpdatePending();\\n  error UpdateAlreadyExecuted();\\n  error InsufficientSignatures();\\n  error UnauthorizedSigner();\\n\\n  // Events\\n  event ChainRegistered(uint16 indexed chainId, string chainName);\\n  event ChainUpdated(uint16 indexed chainId);\\n  event ChainStatusChanged(uint16 indexed chainId, bool isActive);\\n  event CurrentChainSet(uint16 indexed chainId);\\n  event EndpointUpdateProposed(address indexed newEndpoint, uint256 executeAfter);\\n  event EndpointUpdated(address indexed oldEndpoint, address indexed newEndpoint);\\n  event EndpointUpdateRevoked();\\n  event SignerAuthorized(address indexed signer, bool authorized);\\n  event RequiredSignaturesUpdated(uint256 newRequirement);\\n  event FeeMAddressUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Constructor\\n   * @param _placeholderEndpoint A placeholder endpoint address (same for all chains)\\n   * @param _feeMAddress The Sonic FeeM contract address (configurable)\\n   * @param _initialOwner The initial owner of the contract\\n   */\\n  constructor(address _placeholderEndpoint, address _feeMAddress, address _initialOwner) Ownable(_initialOwner) {\\n    // Default to Sonic chain (will be updated if needed)\\n    currentChainId = 332;\\n\\n    // Set placeholder endpoint\\n    if (_placeholderEndpoint == address(0)) revert ZeroAddress();\\n    lzEndpointAddress = _placeholderEndpoint;\\n\\n    // AUDIT FIX: Set configurable FeeM address\\n    if (_feeMAddress == address(0)) revert ZeroAddress();\\n    feeMAddress = _feeMAddress;\\n\\n    // Set update deadline\\n    _updateDeadline = block.timestamp + UPDATE_PERIOD;\\n\\n    // AUDIT FIX: Initialize owner as authorized signer\\n    authorizedSigners[_initialOwner] = true;\\n\\n    // Register for Sonic FeeM automatically\\n  }\\n\\n  /**\\n   * @notice Set the current chain ID\\n   * @param _chainId The current chain's LayerZero ID\\n   */\\n  function setCurrentChainId(uint16 _chainId) external onlyOwner {\\n    currentChainId = _chainId;\\n    // AUDIT FIX: Always emit event\\n    emit CurrentChainSet(_chainId);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Update endpoint immediately during initial setup period\\n   * @param _newEndpoint The new chain-specific LZ endpoint address\\n   * @dev This function allows immediate updates during the initial setup period (7 days)\\n   *      After the setup period expires, must use proposeEndpointUpdate + executeEndpointUpdate\\n   */\\n  function updateEndpoint(address _newEndpoint) external onlyOwner {\\n    // Check conditions\\n    if (_newEndpoint == address(0)) revert ZeroAddress();\\n    if (_endpointUpdated) revert EndpointAlreadyUpdated();\\n    if (block.timestamp > _updateDeadline) revert UpdatedPeriodExpired();\\n\\n    // Store old address for event\\n    address oldEndpoint = lzEndpointAddress;\\n\\n    // Update endpoint address immediately during setup period\\n    lzEndpointAddress = _newEndpoint;\\n\\n    // Mark as updated to prevent further changes\\n    _endpointUpdated = true;\\n\\n    // Emit event\\n    emit EndpointUpdated(oldEndpoint, _newEndpoint);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Propose endpoint update with timelock (for post-setup changes)\\n   * @param _newEndpoint The new chain-specific LZ endpoint address\\n   * @dev This function is for emergency endpoint updates after the initial setup period\\n   *      Requires timelock for security. Only available after the endpoint has been\\n   *      initially set using updateEndpoint during the setup period, and after the\\n   *      initial setup period (7 days) has expired.\\n   */\\n  function proposeEndpointUpdate(address _newEndpoint) external onlyOwner {\\n    // Check conditions\\n    if (_newEndpoint == address(0)) revert ZeroAddress();\\n    if (!_endpointUpdated) revert('Use updateEndpoint during setup period');\\n    if (block.timestamp <= _updateDeadline) revert('Use updateEndpoint during setup period');\\n\\n    // Store pending update\\n    pendingEndpointUpdate = EndpointUpdate({ newEndpoint: _newEndpoint, proposedAt: block.timestamp, executed: false });\\n\\n    emit EndpointUpdateProposed(_newEndpoint, block.timestamp + TIMELOCK_DELAY);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Execute endpoint update after timelock with multi-signature protection\\n   * @dev Only for emergency updates after initial setup period\\n   *      Requires multi-signature approval for critical security\\n   */\\n  function executeEndpointUpdate() external {\\n    EndpointUpdate storage update = pendingEndpointUpdate;\\n\\n    if (update.newEndpoint == address(0)) revert NoUpdatePending();\\n    if (update.executed) revert UpdateAlreadyExecuted();\\n    if (block.timestamp < update.proposedAt + TIMELOCK_DELAY) revert TimelockNotExpired();\\n\\n    // CRITICAL AUDIT FIX: Enforce multi-signature requirement\\n    bytes32 updateHash = keccak256(abi.encodePacked(update.newEndpoint, update.proposedAt));\\n\\n    // Check if caller is authorized signer\\n    if (!authorizedSigners[msg.sender]) revert UnauthorizedSigner();\\n\\n    // CRITICAL FIX: Prevent duplicate signing - check if already signed BEFORE incrementing\\n    if (signatures[updateHash][msg.sender]) revert('Already signed');\\n\\n    // Record signature\\n    signatures[updateHash][msg.sender] = true;\\n    signatureCount[updateHash]++;\\n\\n    // Check if enough signatures collected\\n    if (signatureCount[updateHash] < requiredSignatures) revert InsufficientSignatures();\\n\\n    // Store old address for event\\n    address oldEndpoint = lzEndpointAddress;\\n\\n    // Update endpoint address\\n    lzEndpointAddress = update.newEndpoint;\\n\\n    // Mark update as executed\\n    update.executed = true;\\n\\n    // Clear signature tracking for this update\\n    signatureCount[updateHash] = 0;\\n\\n    // AUDIT FIX: Also clear individual signatures to prevent reuse\\n    // Note: This would require tracking signers in an array, which is gas intensive\\n    // Instead, we rely on the executed flag to prevent re-execution\\n\\n    // Emit event\\n    emit EndpointUpdated(oldEndpoint, update.newEndpoint);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Add/remove authorized signers for multi-sig operations\\n   * @param _signer The signer address\\n   * @param _authorized Whether the signer is authorized\\n   */\\n  function setAuthorizedSigner(address _signer, bool _authorized) external onlyOwner {\\n    if (_signer == address(0)) revert ZeroAddress();\\n    authorizedSigners[_signer] = _authorized;\\n    emit SignerAuthorized(_signer, _authorized);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Set required signatures for critical operations\\n   * @param _required Number of required signatures\\n   */\\n  function setRequiredSignatures(uint256 _required) external onlyOwner {\\n    require(_required > 0, 'Must require at least 1 signature');\\n    requiredSignatures = _required;\\n    emit RequiredSignaturesUpdated(_required);\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Revoke pending endpoint update\\n   * @dev Allows canceling a pending update before execution\\n   */\\n  function revokePendingEndpointUpdate() external onlyOwner {\\n    EndpointUpdate storage update = pendingEndpointUpdate;\\n\\n    if (update.newEndpoint == address(0)) revert NoUpdatePending();\\n    if (update.executed) revert UpdateAlreadyExecuted();\\n\\n    // Clear the pending update\\n    bytes32 updateHash = keccak256(abi.encodePacked(update.newEndpoint, update.proposedAt));\\n    signatureCount[updateHash] = 0;\\n\\n    // Reset pending update\\n    update.newEndpoint = address(0);\\n    update.proposedAt = 0;\\n    update.executed = false;\\n\\n    emit EndpointUpdateRevoked();\\n  }\\n\\n  /**\\n   * @dev Returns whether the endpoint has been updated\\n   * @return True if updated, false otherwise\\n   */\\n  function isEndpointUpdated() external view returns (bool) {\\n    return _endpointUpdated;\\n  }\\n\\n  /**\\n   * @dev Returns the deadline for updating the endpoint\\n   * @return Timestamp of the update deadline\\n   */\\n  function updateDeadline() external view returns (uint256) {\\n    return _updateDeadline;\\n  }\\n\\n  /**\\n   * @notice Register a new chain configuration\\n   * @param _chainId The LayerZero chain ID\\n   * @param _chainName The human-readable chain name\\n   * @param _wrappedNativeToken The wrapped native token address (WETH, WrappedNativeToken, WSOL, WBERA, etc.)\\n   * @param _lotteryManager The chain-specific lottery manager address\\n   * @param _randomnessProvider The chain-specific randomness provider address\\n   * @param _priceOracle The chain-specific price oracle address\\n   * @param _vrfConsumer The chain-specific VRF consumer address\\n   * @param _dragonToken The Dragon token address on this chain\\n   */\\n  function registerChain(\\n    uint16 _chainId,\\n    string calldata _chainName,\\n    address _wrappedNativeToken,\\n    address _lotteryManager,\\n    address _randomnessProvider,\\n    address _priceOracle,\\n    address _vrfConsumer,\\n    address _dragonToken\\n  ) external override onlyOwner {\\n    // Check if chain is already registered\\n    if (chainConfigs[_chainId].chainId == _chainId) revert ChainAlreadyRegistered(_chainId);\\n\\n    // Validate wrapped native token address\\n    if (_wrappedNativeToken == address(0)) revert ZeroAddress();\\n\\n    // Create chain config\\n    chainConfigs[_chainId] = ChainConfig({\\n      chainId: _chainId,\\n      chainName: _chainName,\\n      wrappedNativeToken: _wrappedNativeToken,\\n      lotteryManager: _lotteryManager,\\n      randomnessProvider: _randomnessProvider,\\n      priceOracle: _priceOracle,\\n      vrfConsumer: _vrfConsumer,\\n      dragonToken: _dragonToken,\\n      isActive: true\\n    });\\n\\n    // Add to supported chains\\n    supportedChains.push(_chainId);\\n\\n    // If this is the first chain, set it as current chain\\n    if (supportedChains.length == 1) {\\n      currentChainId = _chainId;\\n      emit CurrentChainSet(_chainId);\\n    }\\n\\n    emit ChainRegistered(_chainId, _chainName);\\n  }\\n\\n  /**\\n   * @notice Update an existing chain configuration\\n   * @param _chainId The LayerZero chain ID to update\\n   * @param _wrappedNativeToken The wrapped native token address\\n   * @param _lotteryManager The chain-specific lottery manager address\\n   * @param _randomnessProvider The chain-specific randomness provider address\\n   * @param _priceOracle The chain-specific price oracle address\\n   * @param _vrfConsumer The chain-specific VRF consumer address\\n   * @param _dragonToken The Dragon token address on this chain\\n   */\\n  function updateChain(\\n    uint16 _chainId,\\n    address _wrappedNativeToken,\\n    address _lotteryManager,\\n    address _randomnessProvider,\\n    address _priceOracle,\\n    address _vrfConsumer,\\n    address _dragonToken\\n  ) external override onlyOwner {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    // Validate wrapped native token address\\n    if (_wrappedNativeToken == address(0)) revert ZeroAddress();\\n\\n    // Update chain config\\n    ChainConfig storage config = chainConfigs[_chainId];\\n    config.wrappedNativeToken = _wrappedNativeToken;\\n\\n    // Only update if non-zero address provided\\n    if (_lotteryManager != address(0)) {\\n      config.lotteryManager = _lotteryManager;\\n    }\\n\\n    if (_randomnessProvider != address(0)) {\\n      config.randomnessProvider = _randomnessProvider;\\n    }\\n\\n    if (_priceOracle != address(0)) {\\n      config.priceOracle = _priceOracle;\\n    }\\n\\n    if (_vrfConsumer != address(0)) {\\n      config.vrfConsumer = _vrfConsumer;\\n    }\\n\\n    if (_dragonToken != address(0)) {\\n      config.dragonToken = _dragonToken;\\n    }\\n\\n    emit ChainUpdated(_chainId);\\n  }\\n\\n  /**\\n   * @notice Set chain active status\\n   * @param _chainId The LayerZero chain ID\\n   * @param _isActive Whether the chain is active\\n   */\\n  function setChainActive(uint16 _chainId, bool _isActive) external override onlyOwner {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    // Update active status\\n    chainConfigs[_chainId].isActive = _isActive;\\n\\n    emit ChainStatusChanged(_chainId, _isActive);\\n  }\\n\\n  /**\\n   * @notice Get chain configuration\\n   * @param _chainId The LayerZero chain ID\\n   * @return Chain configuration struct\\n   */\\n  function getChainConfig(uint16 _chainId) external view override returns (ChainConfig memory) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId];\\n  }\\n\\n  /**\\n   * @dev Get the current chain's LayerZero ID\\n   * @return The LayerZero chain ID of the current chain\\n   */\\n  function getCurrentChainId() external view override returns (uint16) {\\n    return currentChainId;\\n  }\\n\\n  /**\\n   * @dev Get the wrapped native token address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The wrapped native token address for the specified chain\\n   */\\n  function getWrappedNativeToken(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].wrappedNativeToken;\\n  }\\n\\n  /**\\n   * @notice Get lottery manager address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The lottery manager address\\n   */\\n  function getLotteryManager(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].lotteryManager;\\n  }\\n\\n  /**\\n   * @notice Get randomness provider address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The randomness provider address\\n   */\\n  function getRandomnessProvider(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].randomnessProvider;\\n  }\\n\\n  /**\\n   * @notice Get price oracle address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The price oracle address\\n   */\\n  function getPriceOracle(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].priceOracle;\\n  }\\n\\n  /**\\n   * @notice Get swap trigger address for a specific chain (deprecated - returns lottery manager)\\n   * @param _chainId The LayerZero chain ID\\n   * @return The lottery manager address (for backward compatibility)\\n   */\\n  function getSwapTrigger(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    // Return lottery manager for backward compatibility\\n    return chainConfigs[_chainId].lotteryManager;\\n  }\\n\\n  /**\\n   * @notice Get VRF consumer address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The VRF consumer address\\n   */\\n  function getVRFConsumer(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].vrfConsumer;\\n  }\\n\\n  /**\\n   * @notice Get Dragon token address for a specific chain\\n   * @param _chainId The LayerZero chain ID\\n   * @return The Dragon token address\\n   */\\n  function getDragonToken(uint16 _chainId) external view override returns (address) {\\n    // Check if chain exists\\n    if (chainConfigs[_chainId].chainId != _chainId) revert ChainNotRegistered(_chainId);\\n\\n    return chainConfigs[_chainId].dragonToken;\\n  }\\n\\n  /**\\n   * @notice Get all supported chain IDs\\n   * @return Array of supported chain IDs\\n   */\\n  function getSupportedChains() external view override returns (uint16[] memory) {\\n    return supportedChains;\\n  }\\n\\n  /**\\n   * @dev Check if a chain is supported\\n   * @param _chainId The LayerZero chain ID to check\\n   * @return True if the chain is supported, false otherwise\\n   */\\n  function isChainSupported(uint16 _chainId) external view override returns (bool) {\\n    return chainConfigs[_chainId].chainId == _chainId;\\n  }\\n\\n  /**\\n   * @notice AUDIT FIX: Update FeeM contract address\\n   * @param _newFeeMAddress The new FeeM contract address\\n   */\\n  function updateFeeMAddress(address _newFeeMAddress) external onlyOwner {\\n    if (_newFeeMAddress == address(0)) revert ZeroAddress();\\n\\n    address oldAddress = feeMAddress;\\n    feeMAddress = _newFeeMAddress;\\n\\n    emit FeeMAddressUpdated(oldAddress, _newFeeMAddress);\\n  }\\n\\n  /**\\n   * @dev Fallback function that delegates all calls to the chain-specific endpoint\\n   * This enables the registry to also act as a proxy to the LayerZero endpoint\\n   *\\n   * SECURITY NOTE: This function uses delegatecall which executes the target contract's\\n   * code in this contract's context. The security relies entirely on the integrity\\n   * of the lzEndpointAddress. The timelock mechanism for endpoint updates provides\\n   * additional protection against malicious endpoint changes.\\n   */\\n  fallback() external payable {\\n    address endpoint = lzEndpointAddress;\\n    assembly {\\n      // Copy msg.data to memory\\n      calldatacopy(0, 0, calldatasize())\\n\\n      // Forward call to endpoint\\n      let result := delegatecall(gas(), endpoint, 0, calldatasize(), 0, 0)\\n\\n      // Copy the returned data\\n      returndatacopy(0, 0, returndatasize())\\n\\n      // Return or revert\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Receive function to accept ETH\\n   */\\n  receive() external payable {}\\n\\n  /**\\n   * @notice Check if this contract is registered for Sonic FeeM\\n   * @return isRegistered Whether the contract is registered for fee monetization\\n   */\\n  function checkFeeMStatus() external view returns (bool isRegistered) {\\n  }\\n\\n  mapping(uint256 => uint32) public chainIdToEid;\\n  mapping(uint32 => uint256) public eidToChainId;\\n}\\n\",\"keccak256\":\"0x68113254f69a9c60c62a6ad2cfaaba01575862c1c7162a5d41902aa938590c6d\",\"license\":\"MIT\"},\"contracts/interfaces/config/IChainRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Interface: IChainRegistry\\n *\\n * https://x.com/sonicreddragon\\n * https://t.me/sonic_reddragon_bot\\n */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IChainRegistry\\n * @dev Interface for chain registry and cross-chain verification\\n *\\n * Manages chain IDs and validates cross-chain operations within the OmniDragon ecosystem\\n * Ensures secure LayerZero communication between supported chains\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */\\ninterface IChainRegistry {\\n    /**\\n     * @dev Struct to hold chain-specific configuration\\n     */\\n    struct ChainConfig {\\n        uint16 chainId;\\n        string chainName;\\n        address wrappedNativeToken;    // WETH, WrappedNativeToken, WSOL, WBERA, etc.\\n        address lotteryManager;        // Chain-specific lottery manager (replaces swapTrigger)\\n        address randomnessProvider;    // Chain-specific randomness provider\\n        address priceOracle;           // Chain-specific price oracle\\n        address vrfConsumer;           // Chain-specific VRF consumer\\n        address dragonToken;           // Dragon token address on this chain\\n        bool isActive;                 // Whether this chain is active\\n    }\\n\\n    /**\\n     * @notice Register a new chain configuration\\n     * @param _chainId The LayerZero chain ID\\n     * @param _chainName The human-readable chain name\\n     * @param _wrappedNativeToken The wrapped native token address (WETH, WrappedNativeToken, WSOL, WBERA, etc.)\\n     * @param _lotteryManager The chain-specific lottery manager address\\n     * @param _randomnessProvider The chain-specific randomness provider address\\n     * @param _priceOracle The chain-specific price oracle address\\n     * @param _vrfConsumer The chain-specific VRF consumer address\\n     * @param _dragonToken The Dragon token address on this chain\\n     */\\n    function registerChain(\\n        uint16 _chainId,\\n        string calldata _chainName,\\n        address _wrappedNativeToken,\\n        address _lotteryManager,\\n        address _randomnessProvider,\\n        address _priceOracle,\\n        address _vrfConsumer,\\n        address _dragonToken\\n    ) external;\\n\\n    /**\\n     * @notice Update an existing chain configuration\\n     * @param _chainId The LayerZero chain ID to update\\n     * @param _wrappedNativeToken The wrapped native token address\\n     * @param _lotteryManager The chain-specific lottery manager address\\n     * @param _randomnessProvider The chain-specific randomness provider address\\n     * @param _priceOracle The chain-specific price oracle address\\n     * @param _vrfConsumer The chain-specific VRF consumer address\\n     * @param _dragonToken The Dragon token address on this chain\\n     */\\n    function updateChain(\\n        uint16 _chainId,\\n        address _wrappedNativeToken,\\n        address _lotteryManager,\\n        address _randomnessProvider,\\n        address _priceOracle,\\n        address _vrfConsumer,\\n        address _dragonToken\\n    ) external;\\n\\n    /**\\n     * @notice Set chain active status\\n     * @param _chainId The LayerZero chain ID\\n     * @param _isActive Whether the chain is active\\n     */\\n    function setChainActive(uint16 _chainId, bool _isActive) external;\\n\\n    /**\\n     * @notice Set the current chain ID\\n     * @param _chainId The current chain's LayerZero ID\\n     */\\n    function setCurrentChainId(uint16 _chainId) external;\\n\\n    /**\\n     * @notice Get chain configuration\\n     * @param _chainId The LayerZero chain ID\\n     * @return Chain configuration struct\\n     */\\n    function getChainConfig(uint16 _chainId) external view returns (ChainConfig memory);\\n\\n    /**\\n     * @dev Get the current chain's LayerZero ID\\n     * @return The LayerZero chain ID of the current chain\\n     */\\n    function getCurrentChainId() external view returns (uint16);\\n\\n    /**\\n     * @dev Get the wrapped native token address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The wrapped native token address for the specified chain\\n     */\\n    function getWrappedNativeToken(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the lottery manager address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The lottery manager address\\n     */\\n    function getLotteryManager(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the randomness provider address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The randomness provider address\\n     */\\n    function getRandomnessProvider(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the price oracle address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The price oracle address\\n     */\\n    function getPriceOracle(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the swap trigger address for a specific chain (deprecated - returns lottery manager)\\n     * @param _chainId The LayerZero chain ID\\n     * @return The lottery manager address (for backward compatibility)\\n     */\\n    function getSwapTrigger(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the VRF consumer address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The VRF consumer address\\n     */\\n    function getVRFConsumer(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get the Dragon token address for a specific chain\\n     * @param _chainId The LayerZero chain ID\\n     * @return The Dragon token address\\n     */\\n    function getDragonToken(uint16 _chainId) external view returns (address);\\n\\n    /**\\n     * @dev Get all supported chain IDs\\n     * @return Array of supported chain IDs\\n     */\\n    function getSupportedChains() external view returns (uint16[] memory);\\n\\n    /**\\n     * @dev Check if a chain is supported\\n     * @param _chainId The LayerZero chain ID to check\\n     * @return True if the chain is supported, false otherwise\\n     */\\n    function isChainSupported(uint16 _chainId) external view returns (bool);\\n\\n    /**\\n     * @notice Updates the chain-specific LZ endpoint address\\n     * @param _newEndpoint The new chain-specific LZ endpoint address\\n     */\\n    function updateEndpoint(address _newEndpoint) external;\\n\\n    /**\\n     * @dev Returns whether the endpoint has been updated\\n     * @return True if updated, false otherwise\\n     */\\n    function isEndpointUpdated() external view returns (bool);\\n\\n    /**\\n     * @dev Returns the deadline for updating the endpoint\\n     * @return Timestamp of the update deadline\\n     */\\n    function updateDeadline() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x37e4f48e43bc2c962ff8ace077e6248d02b24785ae6dd770f0ddaa070d41650c\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerzero/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { ILayerZeroUserApplicationConfig } from \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\n/**\\n * @title ILayerZeroEndpoint\\n * @dev Complete LayerZero Endpoint interface\\n *\\n * Provides full endpoint functionality for cross-chain message passing\\n * Essential for OmniDragon's multi-chain token and communication operations\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x3cc2dabfed603c4d318fd1df2dfcdb7889fb16ce6d2834f757e87d50bf3ed5cb\",\"license\":\"MIT\"},\"contracts/interfaces/external/layerzero/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title ILayerZeroUserApplicationConfig\\n * @dev Interface for LayerZero user application configuration\\n *\\n * Enables configuration and management of LayerZero messaging parameters\\n * Essential for customizing cross-chain communication behavior in OmniDragon\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */\\n\\npragma solidity ^0.8.18;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    /**\\n     * @notice Set the configuration for the LayerZero endpoint\\n     * @param _version The messaging library version\\n     * @param _chainId The destination chain ID\\n     * @param _configType Type of configuration\\n     * @param _config The configuration data\\n     */\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    /**\\n     * @notice Set the send messaging library version\\n     * @param _version The messaging library version\\n     */\\n    function setSendVersion(uint16 _version) external;\\n\\n    /**\\n     * @notice Set the receive messaging library version\\n     * @param _version The messaging library version\\n     */\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    /**\\n     * @notice Force resume a message that got stuck because of a failed send\\n     * @param _srcChainId The source chain ID\\n     * @param _srcAddress The source address\\n     * @param _nonce The nonce of the message\\n     * @param _payload The message payload\\n     */\\n    function forceResumeReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n\\n    /**\\n     * @notice Get the configuration of the LayerZero messaging library of the specified version\\n     * @param _version - messaging library version\\n     * @param _chainId - the chainId for the pending config change\\n     * @param _configType - type of configuration. every messaging library has its own convention\\n     */\\n    function getConfig(uint16 _version, uint16 _chainId, uint256 _configType) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Get the send() LayerZero messaging library version\\n     */\\n    function getSendVersion() external view returns (uint16);\\n\\n    /**\\n     * @notice Get the lzReceive() LayerZero messaging library version\\n     */\\n    function getReceiveVersion() external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x4c6ad627205ceb9a135cb8b75ab9381dd4982388ed660134cd4543c4f60d7b86\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526001600b553480156200001657600080fd5b50604051620023a3380380620023a38339810160408190526200003991620001cb565b806001600160a01b0381166200006957604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000074816200015e565b506000805460ff60a01b19169055600180556004805461ffff191661014c1790556001600160a01b038316620000bd5760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b03808616620100000262010000600160b01b0319909216919091179091558216620001065760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0384161790556200013062093a804262000215565b6080526001600160a01b03166000908152600a60205260409020805460ff19166001179055506200023d9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001c657600080fd5b919050565b600080600060608486031215620001e157600080fd5b620001ec84620001ae565b9250620001fc60208501620001ae565b91506200020c60408501620001ae565b90509250925092565b808201808211156200023757634e487b7160e01b600052601160045260246000fd5b92915050565b60805161213c62000267600039600081816102d7015281816111710152611600015261213c6000f3fe6080604052600436106102895760003560e01c80638d06804311610153578063bddc6da2116100cb578063d59d005d1161007f578063ed1568be11610064578063ed1568be146107b2578063f151e497146107d2578063f2fde38b1461081a57610290565b8063d59d005d14610607578063dc18fa951461077757610290565b8063c4bffe2b116100b0578063c4bffe2b14610721578063ce65ec1b14610743578063d533fe1e1461075757610290565b8063bddc6da2146106d4578063c17786a0146106f457610290565b8063a7170d4811610122578063addbfbac11610107578063addbfbac14610667578063b3cc026d14610687578063b73e1b61146106b457610290565b8063a7170d4814610627578063aa1782981461064757610290565b80638d068043146105b35780638da5cb5b146105c957806393029fa7146105e75780639d3b89ba1461060757610290565b80633ae718f0116102015780635d2b6a4e116101b5578063768071111161019a57806376807111146105405780637d2b9cc0146105665780638b42babd1461058657610290565b80635d2b6a4e146104fb578063715018a61461052b57610290565b80634af91330116101e65780634af91330146104995780635c975abb146104b95780635cf0e8a4146104d857610290565b80633ae718f01461045957806340ec1b8b1461047957610290565b80631e8d846a116102585780632775b9101161023d5780632775b910146103d557806328f41de3146103ea5780633a07b8301461042157610290565b80631e8d846a146103a057806324bb7293146103b557610290565b80630214cafc146102c857806305fa92d91461030a5780630721ed461461032e578063099010391461034e57610290565b3661029057005b6004546201000090046001600160a01b03163660008037600080366000845af43d6000803e8080156102c1573d6000f35b3d6000fd5b005b3480156102d457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561031657600080fd5b5060095460ff165b6040519015158152602001610301565b34801561033a57600080fd5b506102c6610349366004611b5e565b61083a565b34801561035a57600080fd5b50600654600754600854610379926001600160a01b0316919060ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610301565b3480156103ac57600080fd5b506102c661090b565b3480156103c157600080fd5b506102c66103d0366004611b91565b610b71565b3480156103e157600080fd5b506102c6610bb9565b3480156103f657600080fd5b5061031e610405366004611b91565b61ffff9081166000818152600260205260409020549091161490565b34801561042d57600080fd5b5061044161043c366004611b91565b610cb3565b6040516001600160a01b039091168152602001610301565b34801561046557600080fd5b506102c6610474366004611bca565b610d12565b34801561048557600080fd5b506102c6610494366004611be6565b610d99565b3480156104a557600080fd5b506104416104b4366004611b91565b610f4d565b3480156104c557600080fd5b50600054600160a01b900460ff1661031e565b3480156104e457600080fd5b5060045460405161ffff9091168152602001610301565b34801561050757600080fd5b5061031e610516366004611c6c565b600a6020526000908152604090205460ff1681565b34801561053757600080fd5b506102c6610fac565b34801561054c57600080fd5b50600454610441906201000090046001600160a01b031681565b34801561057257600080fd5b506102c6610581366004611c87565b610fc0565b34801561059257600080fd5b506102f76105a1366004611ca0565b600f6020526000908152604090205481565b3480156105bf57600080fd5b506102f7600b5481565b3480156105d557600080fd5b506000546001600160a01b0316610441565b3480156105f357600080fd5b50610441610602366004611b91565b61105d565b34801561061357600080fd5b50610441610622366004611b91565b6110bd565b34801561063357600080fd5b506102c6610642366004611c6c565b61111c565b34801561065357600080fd5b50600554610441906001600160a01b031681565b34801561067357600080fd5b506102c6610682366004611cc6565b611226565b34801561069357600080fd5b506102f76106a2366004611c87565b600d6020526000908152604090205481565b3480156106c057600080fd5b506102c66106cf366004611c6c565b61156e565b3480156106e057600080fd5b506102c66106ef366004611c6c565b61170b565b34801561070057600080fd5b5061071461070f366004611b91565b61178c565b6040516103019190611df3565b34801561072d57600080fd5b5061073661193e565b6040516103019190611ec5565b34801561074f57600080fd5b50600061031e565b34801561076357600080fd5b50610441610772366004611b91565b6119be565b34801561078357600080fd5b5061031e610792366004611f0d565b600c60209081526000928352604080842090915290825290205460ff1681565b3480156107be57600080fd5b506104416107cd366004611b91565b611a1d565b3480156107de57600080fd5b506108056107ed366004611c87565b600e6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610301565b34801561082657600080fd5b506102c6610835366004611c6c565b611a7c565b610842611aba565b61ffff8083166000818152600260205260409020549091161461088357604051635112327760e01b815261ffff831660048201526024015b60405180910390fd5b61ffff8216600081815260026020526040908190206007018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116179055517f8a2e7bc3935fd57632299c1b85c1f2a2ca6b83577ced6c12e0516eb9d809c9d2906108ff90841515815260200190565b60405180910390a25050565b600680546001600160a01b03166109355760405163e8907a5560e01b815260040160405180910390fd5b600281015460ff161561095b5760405163b95c660960e01b815260040160405180910390fd5b6202a300816001015461096e9190611f46565b42101561098e5760405163621e25c360e01b815260040160405180910390fd5b8054600182015460405160609290921b6bffffffffffffffffffffffff19166020830152603482015260009060540160408051601f198184030181529181528151602092830120336000908152600a90935291205490915060ff16610a0657604051636518c33d60e11b815260040160405180910390fd5b6000818152600c6020908152604080832033845290915290205460ff1615610a705760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479207369676e6564000000000000000000000000000000000000604482015260640161087a565b6000818152600c602090815260408083203384528252808320805460ff19166001179055838352600d9091528120805491610aaa83611f5f565b9091555050600b546000828152600d60205260409020541015610ae057604051633724e34360e11b815260040160405180910390fd5b6004805483546001600160a01b039081166201000090810275ffffffffffffffffffffffffffffffffffffffff00001984161790935560028501805460ff191660011790556000848152600d60205260408082208290558654905194909304821693929091169183917f241827194635b544bceb965d0e124305c0968051403ae83cb99d1ef86bd65f5891a3505050565b610b79611aba565b6004805461ffff191661ffff83169081179091556040517ff6549dcfe73f8bc1cc6508ff53d144c3df78d7b2a4f3d670dd1cd6bb1752d3be90600090a250565b610bc1611aba565b600680546001600160a01b0316610beb5760405163e8907a5560e01b815260040160405180910390fd5b600281015460ff1615610c115760405163b95c660960e01b815260040160405180910390fd5b8054600182015460405160609290921b6bffffffffffffffffffffffff19166020830152603482015260009060540160408051601f1981840301815282825280516020918201206000818152600d90925291812081905584546001600160a01b03191685556001850181905560028501805460ff191690559092507f4b25600df6caa21596b414d6592d2d65a1a07c64cd520a05e59b004cc9dc771491a15050565b61ffff80821660008181526002602052604081205490921614610cef57604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600701546001600160a01b031690565b610d1a611aba565b6001600160a01b038216610d415760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527fd71d7c88579d0d5858da8cb9f6c4ce94826a5391ff03edf44f6a431180a1a6f591016108ff565b610da1611aba565b61ffff80881660008181526002602052604090205490911614610ddd57604051635112327760e01b815261ffff8816600482015260240161087a565b6001600160a01b038616610e045760405163d92e233d60e01b815260040160405180910390fd5b61ffff8716600090815260026020819052604090912090810180546001600160a01b0319166001600160a01b0389811691909117909155861615610e60576003810180546001600160a01b0319166001600160a01b0388161790555b6001600160a01b03851615610e8d576004810180546001600160a01b0319166001600160a01b0387161790555b6001600160a01b03841615610eba576005810180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03831615610ee7576006810180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03821615610f14576007810180546001600160a01b0319166001600160a01b0384161790555b60405161ffff8916907fe8242d0dc51110feb37170760dbf7f8f2f68ca3b7e0c076130099f0376e01df290600090a25050505050505050565b61ffff80821660008181526002602052604081205490921614610f8957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600501546001600160a01b031690565b610fb4611aba565b610fbe6000611ae7565b565b610fc8611aba565b600081116110225760405162461bcd60e51b815260206004820152602160248201527f4d7573742072657175697265206174206c656173742031207369676e617475726044820152606560f81b606482015260840161087a565b600b8190556040518181527f2d465bb3608d42a9f6601f7adf1e33540314b62582a6cd3e329dd32ff8b5d1959060200160405180910390a150565b61ffff8082166000818152600260205260408120549092161461109957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff16600090815260026020819052604090912001546001600160a01b031690565b61ffff808216600081815260026020526040812054909216146110f957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600301546001600160a01b031690565b611124611aba565b6001600160a01b03811661114b5760405163d92e233d60e01b815260040160405180910390fd5b60095460ff161561116f57604051630f583be160e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004211156111b0576040516326239b0b60e21b815260040160405180910390fd5b600480546001600160a01b038381166201000081810275ffffffffffffffffffffffffffffffffffffffff0000198516179094556009805460ff1916600117905560405193909204169182907f241827194635b544bceb965d0e124305c0968051403ae83cb99d1ef86bd65f5890600090a35050565b61122e611aba565b61ffff808a166000818152600260205260409020549091160361126a57604051630b4ab72d60e21b815261ffff8a16600482015260240161087a565b6001600160a01b0386166112915760405163d92e233d60e01b815260040160405180910390fd5b6040518061012001604052808a61ffff16815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038981166020808501919091528982166040808601919091528983166060860152888316608086015287831660a086015291861660c0850152600160e090940184905261ffff8e8116845260028252919092208451815461ffff1916921691909117815590830151909182019061135d9082612017565b5060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff02191690831515021790555090505060038990806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff160217905550600380549050600103611525576004805461ffff191661ffff8b169081179091556040517ff6549dcfe73f8bc1cc6508ff53d144c3df78d7b2a4f3d670dd1cd6bb1752d3be90600090a25b8861ffff167f62bb0ad0b7a8956c331b58a2677c0309932bd3f9ff9275b0d913ee6f544a8a56898960405161155b9291906120d7565b60405180910390a2505050505050505050565b611576611aba565b6001600160a01b03811661159d5760405163d92e233d60e01b815260040160405180910390fd5b60095460ff166115fe5760405162461bcd60e51b815260206004820152602660248201527f55736520757064617465456e64706f696e7420647572696e67207365747570206044820152651c195c9a5bd960d21b606482015260840161087a565b7f0000000000000000000000000000000000000000000000000000000000000000421161167c5760405162461bcd60e51b815260206004820152602660248201527f55736520757064617465456e64706f696e7420647572696e67207365747570206044820152651c195c9a5bd960d21b606482015260840161087a565b604080516060810182526001600160a01b038316808252426020830181905260009290930191909152600680546001600160a01b0319168217905560078290556008805460ff19169055907f8108b665dfaa72d3e770d481bd0dbfbd301f4730fec2bfef6c892d72cb668a24906116f7906202a30090611f46565b60405190815260200160405180910390a250565b611713611aba565b6001600160a01b03811661173a5760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f75e5edf45482e367e6631d4ca082b3b0cd384562d873090aef9df4035898c37890600090a35050565b604080516101208101825260008082526060602083018190529282018190529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915261ffff8083166000818152600260205260409020549091161461181257604051635112327760e01b815261ffff8316600482015260240161087a565b61ffff80831660009081526002602090815260409182902082516101208101909352805490931682526001830180549293929184019161185190611f8e565b80601f016020809104026020016040519081016040528092919081815260200182805461187d90611f8e565b80156118ca5780601f1061189f576101008083540402835291602001916118ca565b820191906000526020600020905b8154815290600101906020018083116118ad57829003601f168201915b505050918352505060028201546001600160a01b0390811660208301526003830154811660408301526004830154811660608301526005830154811660808301526006830154811660a083015260079092015491821660c0820152600160a01b90910460ff16151560e09091015292915050565b606060038054806020026020016040519081016040528092919081815260200182805480156119b457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161197b5790505b5050505050905090565b61ffff808216600081815260026020526040812054909216146119fa57604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600601546001600160a01b031690565b61ffff80821660008181526002602052604081205490921614611a5957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600401546001600160a01b031690565b611a84611aba565b6001600160a01b038116611aae57604051631e4fbdf760e01b81526000600482015260240161087a565b611ab781611ae7565b50565b6000546001600160a01b03163314610fbe5760405163118cdaa760e01b815233600482015260240161087a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803561ffff81168114611b4957600080fd5b919050565b80358015158114611b4957600080fd5b60008060408385031215611b7157600080fd5b611b7a83611b37565b9150611b8860208401611b4e565b90509250929050565b600060208284031215611ba357600080fd5b611bac82611b37565b9392505050565b80356001600160a01b0381168114611b4957600080fd5b60008060408385031215611bdd57600080fd5b611b7a83611bb3565b600080600080600080600060e0888a031215611c0157600080fd5b611c0a88611b37565b9650611c1860208901611bb3565b9550611c2660408901611bb3565b9450611c3460608901611bb3565b9350611c4260808901611bb3565b9250611c5060a08901611bb3565b9150611c5e60c08901611bb3565b905092959891949750929550565b600060208284031215611c7e57600080fd5b611bac82611bb3565b600060208284031215611c9957600080fd5b5035919050565b600060208284031215611cb257600080fd5b813563ffffffff81168114611bac57600080fd5b60008060008060008060008060006101008a8c031215611ce557600080fd5b611cee8a611b37565b985060208a013567ffffffffffffffff80821115611d0b57600080fd5b818c0191508c601f830112611d1f57600080fd5b813581811115611d2e57600080fd5b8d6020828501011115611d4057600080fd5b602083019a50809950505050611d5860408b01611bb3565b9550611d6660608b01611bb3565b9450611d7460808b01611bb3565b9350611d8260a08b01611bb3565b9250611d9060c08b01611bb3565b9150611d9e60e08b01611bb3565b90509295985092959850929598565b6000815180845260005b81811015611dd357602081850181015186830182015201611db7565b506000602082860101526020601f19601f83011685010191505092915050565b60208152611e0860208201835161ffff169052565b60006020830151610120806040850152611e26610140850183611dad565b91506040850151611e4260608601826001600160a01b03169052565b5060608501516001600160a01b03811660808601525060808501516001600160a01b03811660a08601525060a08501516001600160a01b03811660c08601525060c08501516001600160a01b03811660e08601525060e0850151610100611eb3818701836001600160a01b03169052565b90950151151593019290925250919050565b6020808252825182820181905260009190848201906040850190845b81811015611f0157835161ffff1683529284019291840191600101611ee1565b50909695505050505050565b60008060408385031215611f2057600080fd5b82359150611b8860208401611bb3565b634e487b7160e01b600052601160045260246000fd5b80820180821115611f5957611f59611f30565b92915050565b600060018201611f7157611f71611f30565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611fa257607f821691505b602082108103611fc257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561201257600081815260208120601f850160051c81016020861015611fef5750805b601f850160051c820191505b8181101561200e57828155600101611ffb565b5050505b505050565b815167ffffffffffffffff81111561203157612031611f78565b6120458161203f8454611f8e565b84611fc8565b602080601f83116001811461207a57600084156120625750858301515b600019600386901b1c1916600185901b17855561200e565b600085815260208120601f198616915b828110156120a95788860151825594840194600190910190840161208a565b50858210156120c75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220c7e73f7b924aa1815c76c931b90bf045221ed01800f4818dfcbf29172c56d75e64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102895760003560e01c80638d06804311610153578063bddc6da2116100cb578063d59d005d1161007f578063ed1568be11610064578063ed1568be146107b2578063f151e497146107d2578063f2fde38b1461081a57610290565b8063d59d005d14610607578063dc18fa951461077757610290565b8063c4bffe2b116100b0578063c4bffe2b14610721578063ce65ec1b14610743578063d533fe1e1461075757610290565b8063bddc6da2146106d4578063c17786a0146106f457610290565b8063a7170d4811610122578063addbfbac11610107578063addbfbac14610667578063b3cc026d14610687578063b73e1b61146106b457610290565b8063a7170d4814610627578063aa1782981461064757610290565b80638d068043146105b35780638da5cb5b146105c957806393029fa7146105e75780639d3b89ba1461060757610290565b80633ae718f0116102015780635d2b6a4e116101b5578063768071111161019a57806376807111146105405780637d2b9cc0146105665780638b42babd1461058657610290565b80635d2b6a4e146104fb578063715018a61461052b57610290565b80634af91330116101e65780634af91330146104995780635c975abb146104b95780635cf0e8a4146104d857610290565b80633ae718f01461045957806340ec1b8b1461047957610290565b80631e8d846a116102585780632775b9101161023d5780632775b910146103d557806328f41de3146103ea5780633a07b8301461042157610290565b80631e8d846a146103a057806324bb7293146103b557610290565b80630214cafc146102c857806305fa92d91461030a5780630721ed461461032e578063099010391461034e57610290565b3661029057005b6004546201000090046001600160a01b03163660008037600080366000845af43d6000803e8080156102c1573d6000f35b3d6000fd5b005b3480156102d457600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020015b60405180910390f35b34801561031657600080fd5b5060095460ff165b6040519015158152602001610301565b34801561033a57600080fd5b506102c6610349366004611b5e565b61083a565b34801561035a57600080fd5b50600654600754600854610379926001600160a01b0316919060ff1683565b604080516001600160a01b0390941684526020840192909252151590820152606001610301565b3480156103ac57600080fd5b506102c661090b565b3480156103c157600080fd5b506102c66103d0366004611b91565b610b71565b3480156103e157600080fd5b506102c6610bb9565b3480156103f657600080fd5b5061031e610405366004611b91565b61ffff9081166000818152600260205260409020549091161490565b34801561042d57600080fd5b5061044161043c366004611b91565b610cb3565b6040516001600160a01b039091168152602001610301565b34801561046557600080fd5b506102c6610474366004611bca565b610d12565b34801561048557600080fd5b506102c6610494366004611be6565b610d99565b3480156104a557600080fd5b506104416104b4366004611b91565b610f4d565b3480156104c557600080fd5b50600054600160a01b900460ff1661031e565b3480156104e457600080fd5b5060045460405161ffff9091168152602001610301565b34801561050757600080fd5b5061031e610516366004611c6c565b600a6020526000908152604090205460ff1681565b34801561053757600080fd5b506102c6610fac565b34801561054c57600080fd5b50600454610441906201000090046001600160a01b031681565b34801561057257600080fd5b506102c6610581366004611c87565b610fc0565b34801561059257600080fd5b506102f76105a1366004611ca0565b600f6020526000908152604090205481565b3480156105bf57600080fd5b506102f7600b5481565b3480156105d557600080fd5b506000546001600160a01b0316610441565b3480156105f357600080fd5b50610441610602366004611b91565b61105d565b34801561061357600080fd5b50610441610622366004611b91565b6110bd565b34801561063357600080fd5b506102c6610642366004611c6c565b61111c565b34801561065357600080fd5b50600554610441906001600160a01b031681565b34801561067357600080fd5b506102c6610682366004611cc6565b611226565b34801561069357600080fd5b506102f76106a2366004611c87565b600d6020526000908152604090205481565b3480156106c057600080fd5b506102c66106cf366004611c6c565b61156e565b3480156106e057600080fd5b506102c66106ef366004611c6c565b61170b565b34801561070057600080fd5b5061071461070f366004611b91565b61178c565b6040516103019190611df3565b34801561072d57600080fd5b5061073661193e565b6040516103019190611ec5565b34801561074f57600080fd5b50600061031e565b34801561076357600080fd5b50610441610772366004611b91565b6119be565b34801561078357600080fd5b5061031e610792366004611f0d565b600c60209081526000928352604080842090915290825290205460ff1681565b3480156107be57600080fd5b506104416107cd366004611b91565b611a1d565b3480156107de57600080fd5b506108056107ed366004611c87565b600e6020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610301565b34801561082657600080fd5b506102c6610835366004611c6c565b611a7c565b610842611aba565b61ffff8083166000818152600260205260409020549091161461088357604051635112327760e01b815261ffff831660048201526024015b60405180910390fd5b61ffff8216600081815260026020526040908190206007018054841515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909116179055517f8a2e7bc3935fd57632299c1b85c1f2a2ca6b83577ced6c12e0516eb9d809c9d2906108ff90841515815260200190565b60405180910390a25050565b600680546001600160a01b03166109355760405163e8907a5560e01b815260040160405180910390fd5b600281015460ff161561095b5760405163b95c660960e01b815260040160405180910390fd5b6202a300816001015461096e9190611f46565b42101561098e5760405163621e25c360e01b815260040160405180910390fd5b8054600182015460405160609290921b6bffffffffffffffffffffffff19166020830152603482015260009060540160408051601f198184030181529181528151602092830120336000908152600a90935291205490915060ff16610a0657604051636518c33d60e11b815260040160405180910390fd5b6000818152600c6020908152604080832033845290915290205460ff1615610a705760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479207369676e6564000000000000000000000000000000000000604482015260640161087a565b6000818152600c602090815260408083203384528252808320805460ff19166001179055838352600d9091528120805491610aaa83611f5f565b9091555050600b546000828152600d60205260409020541015610ae057604051633724e34360e11b815260040160405180910390fd5b6004805483546001600160a01b039081166201000090810275ffffffffffffffffffffffffffffffffffffffff00001984161790935560028501805460ff191660011790556000848152600d60205260408082208290558654905194909304821693929091169183917f241827194635b544bceb965d0e124305c0968051403ae83cb99d1ef86bd65f5891a3505050565b610b79611aba565b6004805461ffff191661ffff83169081179091556040517ff6549dcfe73f8bc1cc6508ff53d144c3df78d7b2a4f3d670dd1cd6bb1752d3be90600090a250565b610bc1611aba565b600680546001600160a01b0316610beb5760405163e8907a5560e01b815260040160405180910390fd5b600281015460ff1615610c115760405163b95c660960e01b815260040160405180910390fd5b8054600182015460405160609290921b6bffffffffffffffffffffffff19166020830152603482015260009060540160408051601f1981840301815282825280516020918201206000818152600d90925291812081905584546001600160a01b03191685556001850181905560028501805460ff191690559092507f4b25600df6caa21596b414d6592d2d65a1a07c64cd520a05e59b004cc9dc771491a15050565b61ffff80821660008181526002602052604081205490921614610cef57604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600701546001600160a01b031690565b610d1a611aba565b6001600160a01b038216610d415760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000818152600a6020908152604091829020805460ff191685151590811790915591519182527fd71d7c88579d0d5858da8cb9f6c4ce94826a5391ff03edf44f6a431180a1a6f591016108ff565b610da1611aba565b61ffff80881660008181526002602052604090205490911614610ddd57604051635112327760e01b815261ffff8816600482015260240161087a565b6001600160a01b038616610e045760405163d92e233d60e01b815260040160405180910390fd5b61ffff8716600090815260026020819052604090912090810180546001600160a01b0319166001600160a01b0389811691909117909155861615610e60576003810180546001600160a01b0319166001600160a01b0388161790555b6001600160a01b03851615610e8d576004810180546001600160a01b0319166001600160a01b0387161790555b6001600160a01b03841615610eba576005810180546001600160a01b0319166001600160a01b0386161790555b6001600160a01b03831615610ee7576006810180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b03821615610f14576007810180546001600160a01b0319166001600160a01b0384161790555b60405161ffff8916907fe8242d0dc51110feb37170760dbf7f8f2f68ca3b7e0c076130099f0376e01df290600090a25050505050505050565b61ffff80821660008181526002602052604081205490921614610f8957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600501546001600160a01b031690565b610fb4611aba565b610fbe6000611ae7565b565b610fc8611aba565b600081116110225760405162461bcd60e51b815260206004820152602160248201527f4d7573742072657175697265206174206c656173742031207369676e617475726044820152606560f81b606482015260840161087a565b600b8190556040518181527f2d465bb3608d42a9f6601f7adf1e33540314b62582a6cd3e329dd32ff8b5d1959060200160405180910390a150565b61ffff8082166000818152600260205260408120549092161461109957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff16600090815260026020819052604090912001546001600160a01b031690565b61ffff808216600081815260026020526040812054909216146110f957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600301546001600160a01b031690565b611124611aba565b6001600160a01b03811661114b5760405163d92e233d60e01b815260040160405180910390fd5b60095460ff161561116f57604051630f583be160e21b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004211156111b0576040516326239b0b60e21b815260040160405180910390fd5b600480546001600160a01b038381166201000081810275ffffffffffffffffffffffffffffffffffffffff0000198516179094556009805460ff1916600117905560405193909204169182907f241827194635b544bceb965d0e124305c0968051403ae83cb99d1ef86bd65f5890600090a35050565b61122e611aba565b61ffff808a166000818152600260205260409020549091160361126a57604051630b4ab72d60e21b815261ffff8a16600482015260240161087a565b6001600160a01b0386166112915760405163d92e233d60e01b815260040160405180910390fd5b6040518061012001604052808a61ffff16815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b038981166020808501919091528982166040808601919091528983166060860152888316608086015287831660a086015291861660c0850152600160e090940184905261ffff8e8116845260028252919092208451815461ffff1916921691909117815590830151909182019061135d9082612017565b5060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff02191690831515021790555090505060038990806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff160217905550600380549050600103611525576004805461ffff191661ffff8b169081179091556040517ff6549dcfe73f8bc1cc6508ff53d144c3df78d7b2a4f3d670dd1cd6bb1752d3be90600090a25b8861ffff167f62bb0ad0b7a8956c331b58a2677c0309932bd3f9ff9275b0d913ee6f544a8a56898960405161155b9291906120d7565b60405180910390a2505050505050505050565b611576611aba565b6001600160a01b03811661159d5760405163d92e233d60e01b815260040160405180910390fd5b60095460ff166115fe5760405162461bcd60e51b815260206004820152602660248201527f55736520757064617465456e64706f696e7420647572696e67207365747570206044820152651c195c9a5bd960d21b606482015260840161087a565b7f0000000000000000000000000000000000000000000000000000000000000000421161167c5760405162461bcd60e51b815260206004820152602660248201527f55736520757064617465456e64706f696e7420647572696e67207365747570206044820152651c195c9a5bd960d21b606482015260840161087a565b604080516060810182526001600160a01b038316808252426020830181905260009290930191909152600680546001600160a01b0319168217905560078290556008805460ff19169055907f8108b665dfaa72d3e770d481bd0dbfbd301f4730fec2bfef6c892d72cb668a24906116f7906202a30090611f46565b60405190815260200160405180910390a250565b611713611aba565b6001600160a01b03811661173a5760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f75e5edf45482e367e6631d4ca082b3b0cd384562d873090aef9df4035898c37890600090a35050565b604080516101208101825260008082526060602083018190529282018190529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915261ffff8083166000818152600260205260409020549091161461181257604051635112327760e01b815261ffff8316600482015260240161087a565b61ffff80831660009081526002602090815260409182902082516101208101909352805490931682526001830180549293929184019161185190611f8e565b80601f016020809104026020016040519081016040528092919081815260200182805461187d90611f8e565b80156118ca5780601f1061189f576101008083540402835291602001916118ca565b820191906000526020600020905b8154815290600101906020018083116118ad57829003601f168201915b505050918352505060028201546001600160a01b0390811660208301526003830154811660408301526004830154811660608301526005830154811660808301526006830154811660a083015260079092015491821660c0820152600160a01b90910460ff16151560e09091015292915050565b606060038054806020026020016040519081016040528092919081815260200182805480156119b457602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161197b5790505b5050505050905090565b61ffff808216600081815260026020526040812054909216146119fa57604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600601546001600160a01b031690565b61ffff80821660008181526002602052604081205490921614611a5957604051635112327760e01b815261ffff8316600482015260240161087a565b5061ffff166000908152600260205260409020600401546001600160a01b031690565b611a84611aba565b6001600160a01b038116611aae57604051631e4fbdf760e01b81526000600482015260240161087a565b611ab781611ae7565b50565b6000546001600160a01b03163314610fbe5760405163118cdaa760e01b815233600482015260240161087a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803561ffff81168114611b4957600080fd5b919050565b80358015158114611b4957600080fd5b60008060408385031215611b7157600080fd5b611b7a83611b37565b9150611b8860208401611b4e565b90509250929050565b600060208284031215611ba357600080fd5b611bac82611b37565b9392505050565b80356001600160a01b0381168114611b4957600080fd5b60008060408385031215611bdd57600080fd5b611b7a83611bb3565b600080600080600080600060e0888a031215611c0157600080fd5b611c0a88611b37565b9650611c1860208901611bb3565b9550611c2660408901611bb3565b9450611c3460608901611bb3565b9350611c4260808901611bb3565b9250611c5060a08901611bb3565b9150611c5e60c08901611bb3565b905092959891949750929550565b600060208284031215611c7e57600080fd5b611bac82611bb3565b600060208284031215611c9957600080fd5b5035919050565b600060208284031215611cb257600080fd5b813563ffffffff81168114611bac57600080fd5b60008060008060008060008060006101008a8c031215611ce557600080fd5b611cee8a611b37565b985060208a013567ffffffffffffffff80821115611d0b57600080fd5b818c0191508c601f830112611d1f57600080fd5b813581811115611d2e57600080fd5b8d6020828501011115611d4057600080fd5b602083019a50809950505050611d5860408b01611bb3565b9550611d6660608b01611bb3565b9450611d7460808b01611bb3565b9350611d8260a08b01611bb3565b9250611d9060c08b01611bb3565b9150611d9e60e08b01611bb3565b90509295985092959850929598565b6000815180845260005b81811015611dd357602081850181015186830182015201611db7565b506000602082860101526020601f19601f83011685010191505092915050565b60208152611e0860208201835161ffff169052565b60006020830151610120806040850152611e26610140850183611dad565b91506040850151611e4260608601826001600160a01b03169052565b5060608501516001600160a01b03811660808601525060808501516001600160a01b03811660a08601525060a08501516001600160a01b03811660c08601525060c08501516001600160a01b03811660e08601525060e0850151610100611eb3818701836001600160a01b03169052565b90950151151593019290925250919050565b6020808252825182820181905260009190848201906040850190845b81811015611f0157835161ffff1683529284019291840191600101611ee1565b50909695505050505050565b60008060408385031215611f2057600080fd5b82359150611b8860208401611bb3565b634e487b7160e01b600052601160045260246000fd5b80820180821115611f5957611f59611f30565b92915050565b600060018201611f7157611f71611f30565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680611fa257607f821691505b602082108103611fc257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561201257600081815260208120601f850160051c81016020861015611fef5750805b601f850160051c820191505b8181101561200e57828155600101611ffb565b5050505b505050565b815167ffffffffffffffff81111561203157612031611f78565b6120458161203f8454611f8e565b84611fc8565b602080601f83116001811461207a57600084156120625750858301515b600019600386901b1c1916600185901b17855561200e565b600085815260208120601f198616915b828110156120a95788860151825594840194600190910190840161208a565b50858210156120c75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220c7e73f7b924aa1815c76c931b90bf045221ed01800f4818dfcbf29172c56d75e64736f6c63430008140033",
  "devdoc": {
    "details": "AUDIT-COMPLIANT Central registry for cross-chain configuration and chain-specific parameters CRITICAL AUDIT FIXES: - CRITICAL: Added onlyOwner protection to registerMe() function - MAJOR: Added timelock mechanism for updateEndpoint() with 48-hour delay - MAJOR: Added multi-signature requirement for critical endpoint updates - MINOR: Added event emission for setCurrentChainId() - INFORMATIONAL: Pinned Solidity version to 0.8.20 - INFORMATIONAL: Added comprehensive NatSpec documentation Manages supported chains, LayerZero endpoints, and chain-specific token addresses Essential for secure cross-chain operations in the OmniDragon ecosystem https://x.com/sonicreddragon https://t.me/sonicreddragon",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "checkFeeMStatus()": {
        "returns": {
          "isRegistered": "Whether the contract is registered for fee monetization"
        }
      },
      "constructor": {
        "details": "Constructor",
        "params": {
          "_feeMAddress": "The Sonic FeeM contract address (configurable)",
          "_initialOwner": "The initial owner of the contract",
          "_placeholderEndpoint": "A placeholder endpoint address (same for all chains)"
        }
      },
      "executeEndpointUpdate()": {
        "details": "Only for emergency updates after initial setup period      Requires multi-signature approval for critical security"
      },
      "getChainConfig(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "Chain configuration struct"
        }
      },
      "getCurrentChainId()": {
        "details": "Get the current chain's LayerZero ID",
        "returns": {
          "_0": "The LayerZero chain ID of the current chain"
        }
      },
      "getDragonToken(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The Dragon token address"
        }
      },
      "getLotteryManager(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The lottery manager address"
        }
      },
      "getPriceOracle(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The price oracle address"
        }
      },
      "getRandomnessProvider(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The randomness provider address"
        }
      },
      "getSupportedChains()": {
        "returns": {
          "_0": "Array of supported chain IDs"
        }
      },
      "getSwapTrigger(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The lottery manager address (for backward compatibility)"
        }
      },
      "getVRFConsumer(uint16)": {
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The VRF consumer address"
        }
      },
      "getWrappedNativeToken(uint16)": {
        "details": "Get the wrapped native token address for a specific chain",
        "params": {
          "_chainId": "The LayerZero chain ID"
        },
        "returns": {
          "_0": "The wrapped native token address for the specified chain"
        }
      },
      "isChainSupported(uint16)": {
        "details": "Check if a chain is supported",
        "params": {
          "_chainId": "The LayerZero chain ID to check"
        },
        "returns": {
          "_0": "True if the chain is supported, false otherwise"
        }
      },
      "isEndpointUpdated()": {
        "details": "Returns whether the endpoint has been updated",
        "returns": {
          "_0": "True if updated, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proposeEndpointUpdate(address)": {
        "details": "This function is for emergency endpoint updates after the initial setup period      Requires timelock for security. Only available after the endpoint has been      initially set using updateEndpoint during the setup period, and after the      initial setup period (7 days) has expired.",
        "params": {
          "_newEndpoint": "The new chain-specific LZ endpoint address"
        }
      },
      "registerChain(uint16,string,address,address,address,address,address,address)": {
        "params": {
          "_chainId": "The LayerZero chain ID",
          "_chainName": "The human-readable chain name",
          "_dragonToken": "The Dragon token address on this chain",
          "_lotteryManager": "The chain-specific lottery manager address",
          "_priceOracle": "The chain-specific price oracle address",
          "_randomnessProvider": "The chain-specific randomness provider address",
          "_vrfConsumer": "The chain-specific VRF consumer address",
          "_wrappedNativeToken": "The wrapped native token address (WETH, WrappedNativeToken, WSOL, WBERA, etc.)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokePendingEndpointUpdate()": {
        "details": "Allows canceling a pending update before execution"
      },
      "setAuthorizedSigner(address,bool)": {
        "params": {
          "_authorized": "Whether the signer is authorized",
          "_signer": "The signer address"
        }
      },
      "setChainActive(uint16,bool)": {
        "params": {
          "_chainId": "The LayerZero chain ID",
          "_isActive": "Whether the chain is active"
        }
      },
      "setCurrentChainId(uint16)": {
        "params": {
          "_chainId": "The current chain's LayerZero ID"
        }
      },
      "setRequiredSignatures(uint256)": {
        "params": {
          "_required": "Number of required signatures"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateChain(uint16,address,address,address,address,address,address)": {
        "params": {
          "_chainId": "The LayerZero chain ID to update",
          "_dragonToken": "The Dragon token address on this chain",
          "_lotteryManager": "The chain-specific lottery manager address",
          "_priceOracle": "The chain-specific price oracle address",
          "_randomnessProvider": "The chain-specific randomness provider address",
          "_vrfConsumer": "The chain-specific VRF consumer address",
          "_wrappedNativeToken": "The wrapped native token address"
        }
      },
      "updateDeadline()": {
        "details": "Returns the deadline for updating the endpoint",
        "returns": {
          "_0": "Timestamp of the update deadline"
        }
      },
      "updateEndpoint(address)": {
        "details": "This function allows immediate updates during the initial setup period (7 days)      After the setup period expires, must use proposeEndpointUpdate + executeEndpointUpdate",
        "params": {
          "_newEndpoint": "The new chain-specific LZ endpoint address"
        }
      },
      "updateFeeMAddress(address)": {
        "params": {
          "_newFeeMAddress": "The new FeeM contract address"
        }
      }
    },
    "title": "ChainRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkFeeMStatus()": {
        "notice": "Check if this contract is registered for Sonic FeeM"
      },
      "executeEndpointUpdate()": {
        "notice": "AUDIT FIX: Execute endpoint update after timelock with multi-signature protection"
      },
      "getChainConfig(uint16)": {
        "notice": "Get chain configuration"
      },
      "getDragonToken(uint16)": {
        "notice": "Get Dragon token address for a specific chain"
      },
      "getLotteryManager(uint16)": {
        "notice": "Get lottery manager address for a specific chain"
      },
      "getPriceOracle(uint16)": {
        "notice": "Get price oracle address for a specific chain"
      },
      "getRandomnessProvider(uint16)": {
        "notice": "Get randomness provider address for a specific chain"
      },
      "getSupportedChains()": {
        "notice": "Get all supported chain IDs"
      },
      "getSwapTrigger(uint16)": {
        "notice": "Get swap trigger address for a specific chain (deprecated - returns lottery manager)"
      },
      "getVRFConsumer(uint16)": {
        "notice": "Get VRF consumer address for a specific chain"
      },
      "proposeEndpointUpdate(address)": {
        "notice": "AUDIT FIX: Propose endpoint update with timelock (for post-setup changes)"
      },
      "registerChain(uint16,string,address,address,address,address,address,address)": {
        "notice": "Register a new chain configuration"
      },
      "revokePendingEndpointUpdate()": {
        "notice": "AUDIT FIX: Revoke pending endpoint update"
      },
      "setAuthorizedSigner(address,bool)": {
        "notice": "AUDIT FIX: Add/remove authorized signers for multi-sig operations"
      },
      "setChainActive(uint16,bool)": {
        "notice": "Set chain active status"
      },
      "setCurrentChainId(uint16)": {
        "notice": "Set the current chain ID"
      },
      "setRequiredSignatures(uint256)": {
        "notice": "AUDIT FIX: Set required signatures for critical operations"
      },
      "updateChain(uint16,address,address,address,address,address,address)": {
        "notice": "Update an existing chain configuration"
      },
      "updateEndpoint(address)": {
        "notice": "AUDIT FIX: Update endpoint immediately during initial setup period"
      },
      "updateFeeMAddress(address)": {
        "notice": "AUDIT FIX: Update FeeM contract address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1545,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1715,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1834,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 22,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "chainConfigs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(ChainConfig)1169_storage)"
      },
      {
        "astId": 25,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "supportedChains",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "currentChainId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 29,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "lzEndpointAddress",
        "offset": 2,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "feeMAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 41,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "pendingEndpointUpdate",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(EndpointUpdate)38_storage"
      },
      {
        "astId": 43,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "_endpointUpdated",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 55,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "authorizedSigners",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 58,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "requiredSignatures",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 64,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "signatures",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 68,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "signatureCount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1141,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "chainIdToEid",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 1145,
        "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
        "label": "eidToChainId",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_struct(ChainConfig)1169_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct IChainRegistry.ChainConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainConfig)1169_storage"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainConfig)1169_storage": {
        "encoding": "inplace",
        "label": "struct IChainRegistry.ChainConfig",
        "members": [
          {
            "astId": 1152,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 1154,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "chainName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1156,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "wrappedNativeToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1158,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "lotteryManager",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1160,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "randomnessProvider",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1162,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "priceOracle",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1164,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "vrfConsumer",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1166,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "dragonToken",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1168,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "isActive",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(EndpointUpdate)38_storage": {
        "encoding": "inplace",
        "label": "struct ChainRegistry.EndpointUpdate",
        "members": [
          {
            "astId": 33,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "newEndpoint",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 35,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "proposedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 37,
            "contract": "contracts/core/config/ChainRegistry.sol:ChainRegistry",
            "label": "executed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}