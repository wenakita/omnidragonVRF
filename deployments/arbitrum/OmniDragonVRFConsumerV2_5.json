{
  "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpointCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "optionType",
          "type": "uint16"
        }
      ],
      "name": "InvalidOptionType",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "options",
          "type": "bytes"
        }
      ],
      "name": "InvalidOptions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "NoPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughNative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "OnlyEndpoint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sender",
          "type": "bytes32"
        }
      ],
      "name": "OnlyPeer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chainEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "ChainSupportUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "ContractFunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "EnforcedOptionSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "MinimumBalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "name": "PeerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requester",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetChain",
          "type": "uint32"
        }
      ],
      "name": "RandomnessFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetChain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "ResponsePending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "targetChain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ResponseSentToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        }
      ],
      "name": "VRFConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalRequestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vrfRequestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "sourceChain",
          "type": "uint32"
        }
      ],
      "name": "VRFRequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVALANCHE_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BSC_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETHEREUM_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPTIMISM_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLYGON_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SONIC_EID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chainEid",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "chainName",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "addNewChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "origin",
          "type": "tuple"
        }
      ],
      "name": "allowInitializePath",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainGasLimits",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_msgType",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_extraOptions",
          "type": "bytes"
        }
      ],
      "name": "combineOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "msgType",
          "type": "uint16"
        }
      ],
      "name": "enforcedOptions",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "enforcedOption",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllChainsWithNames",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "eids",
          "type": "uint32[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "bool[]",
          "name": "supported",
          "type": "bool[]"
        },
        {
          "internalType": "uint32[]",
          "name": "gasLimits",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBalance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canSendResponses",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "supportedChainsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestById",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "responseSent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainEid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        }
      ],
      "name": "getRequestBySequence",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "responseSent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainEid",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedChains",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "eids",
          "type": "uint32[]"
        },
        {
          "internalType": "bool[]",
          "name": "supported",
          "type": "bool[]"
        },
        {
          "internalType": "uint32[]",
          "name": "gasLimits",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isComposeMsgSender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativePayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nextNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oAppVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "senderVersion",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "receiverVersion",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "peer",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "pendingResponses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "targetChainEid",
          "type": "uint32"
        }
      ],
      "name": "quoteSendToChain",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredChainEids",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        }
      ],
      "name": "retryPendingResponse",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "sequenceToRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setDefaultGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "eid",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "msgType",
              "type": "uint16"
            },
            {
              "internalType": "bytes",
              "name": "options",
              "type": "bytes"
            }
          ],
          "internalType": "struct EnforcedOptionParam[]",
          "name": "_enforcedOptions",
          "type": "tuple[]"
        }
      ],
      "name": "setEnforcedOptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumBalance",
          "type": "uint256"
        }
      ],
      "name": "setMinimumBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_eid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_peer",
          "type": "bytes32"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chainEid",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "supported",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "setSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_nativePayment",
          "type": "bool"
        }
      ],
      "name": "setVRFConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequests",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "sequence",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "sourceChainEid",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "sourcePeer",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "responseSent",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
  "receipt": {
    "to": null,
    "from": "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F",
    "contractAddress": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
    "transactionIndex": 1,
    "gasUsed": "4192075",
    "logsBloom": "0x
    "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2",
    "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ddd0050d1e084dfc72d5d06447cc10bcd3fef60f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0x1a44076050125825900e736c501f859c50fE728c",
        "topics": [
          "0x6ee10e9ed4d6ce9742703a498707862f4b00f1396a87195eb93267b3d7983981"
        ],
        "data": "0x000000000000000000000000e481621c393c622fe27a6dbbd94380f7ecb2a584000000000000000000000000ddd0050d1e084dfc72d5d06447cc10bcd3fef60f",
        "logIndex": 1,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
        "topics": [
          "0x6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000767c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002625a0",
        "logIndex": 2,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
        "topics": [
          "0x6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000759a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002625a0",
        "logIndex": 3,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
        "topics": [
          "0x6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000075e8000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002625a0",
        "logIndex": 4,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 351562307,
        "transactionHash": "0xd7e1bcf5c124a3d66bee5d6f537f6c6e74981f9f945df711136112099b2fc6c7",
        "address": "0xE481621C393C622fE27a6DBBD94380F7ecb2a584",
        "topics": [
          "0x6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000007595000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000002625a0",
        "logIndex": 5,
        "blockHash": "0x8f17fc950555b06a0ad0daad689e9ed282a7c666a820c553ed51f9280facc4b2"
      }
    ],
    "blockNumber": 351562307,
    "cumulativeGasUsed": "4192075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1a44076050125825900e736c501f859c50fE728c",
    "0xDDd0050d1E084dFc72d5d06447Cc10bcD3fEF60F",
    "0x3C0Ca683b403E37668AE3DC4FB62F4B29B6f7a3e",
    "76197290230634444536112874207591481868701552347170354938929514079949640872745",
    "0xe9f223d7d83ec85c4f78042a4845af3a1c8df7757b4997b815ce4b8d07aca68c"
  ],
  "numDeployments": 2,
  "solcInputHash": "04773fff36e3f47fb84de92bce2215b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"optionType\",\"type\":\"uint16\"}],\"name\":\"InvalidOptionType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"name\":\"InvalidOptions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"ChainSupportUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"ContractFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"EnforcedOptionSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"MinimumBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requester\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetChain\",\"type\":\"uint32\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ResponsePending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"targetChain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ResponseSentToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"VRFConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vrfRequestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"sourceChain\",\"type\":\"uint32\"}],\"name\":\"VRFRequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVALANCHE_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BSC_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREUM_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPTIMISM_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYGON_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SONIC_EID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"addNewChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainGasLimits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"}],\"name\":\"combineOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"}],\"name\":\"enforcedOptions\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"enforcedOption\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllChainsWithNames\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"eids\",\"type\":\"uint32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"uint32[]\",\"name\":\"gasLimits\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canSendResponses\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"supportedChainsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestById\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"responseSent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"name\":\"getRequestBySequence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"responseSent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainEid\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedChains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"eids\",\"type\":\"uint32[]\"},{\"internalType\":\"bool[]\",\"name\":\"supported\",\"type\":\"bool[]\"},{\"internalType\":\"uint32[]\",\"name\":\"gasLimits\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"pendingResponses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"targetChainEid\",\"type\":\"uint32\"}],\"name\":\"quoteSendToChain\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredChainEids\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"}],\"name\":\"retryPendingResponse\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sequenceToRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"}],\"name\":\"setDefaultGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"msgType\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"options\",\"type\":\"bytes\"}],\"internalType\":\"struct EnforcedOptionParam[]\",\"name\":\"_enforcedOptions\",\"type\":\"tuple[]\"}],\"name\":\"setEnforcedOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBalance\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainEid\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"setSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_nativePayment\",\"type\":\"bool\"}],\"name\":\"setVRFConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequence\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sourcePeer\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"responseSent\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"addNewChain(uint32,string,uint32)\":{\"params\":{\"chainEid\":\"The LayerZero endpoint ID of the chain\",\"chainName\":\"Human-readable name for the chain\",\"gasLimit\":\"Gas limit for responses to this chain\"}},\"allowInitializePath((uint32,bytes32,uint64))\":{\"details\":\"This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.\",\"params\":{\"origin\":\"The origin information containing the source endpoint and sender address.\"},\"returns\":{\"_0\":\"Whether the path has been initialized.\"}},\"combineOptions(uint32,uint16,bytes)\":{\"details\":\"If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.\",\"params\":{\"_eid\":\"The endpoint ID.\",\"_extraOptions\":\"Additional options passed by the caller.\",\"_msgType\":\"The OAPP message type.\"},\"returns\":{\"_0\":\"options The combination of caller specified options AND enforced options.\"}},\"fundContract()\":{\"details\":\"Fund contract with ETH for LayerZero fees\"},\"getContractStatus()\":{\"details\":\"Check contract status\"},\"getRequestById(uint256)\":{\"details\":\"Get request details by VRF request ID\"},\"getRequestBySequence(uint64)\":{\"details\":\"Get request details by sequence\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"details\":\"_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.\",\"params\":{\"_sender\":\"The sender address.\"},\"returns\":{\"_0\":\"isSender Is a valid sender.\"}},\"lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)\":{\"details\":\"Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.\",\"params\":{\"_executor\":\"The address of the executor for the received message.\",\"_extraData\":\"Additional arbitrary data provided by the corresponding executor.\",\"_guid\":\"The unique identifier for the received LayerZero message.\",\"_message\":\"The payload of the received message.\",\"_origin\":\"The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message.\"}},\"nextNonce(uint32,bytes32)\":{\"details\":\"_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\",\"returns\":{\"nonce\":\"The next nonce.\"}},\"oAppVersion()\":{\"returns\":{\"receiverVersion\":\"The version of the OAppReceiver.sol implementation.\",\"senderVersion\":\"The version of the OAppSender.sol implementation.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteSendToChain(uint32)\":{\"params\":{\"targetChainEid\":\"The chain to send the response to\"}},\"rawFulfillRandomWords(uint256,uint256[])\":{\"details\":\"This function is called by the VRF Coordinator when randomness is ready\",\"params\":{\"randomWords\":\"Array of random words\",\"requestId\":\"The request ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"retryPendingResponse(uint64)\":{\"details\":\"Call this after funding the contract to retry failed responses.\",\"params\":{\"sequence\":\"The sequence number to retry\"}},\"setDefaultGasLimit(uint32)\":{\"details\":\"Set default gas limit (owner only)\"},\"setDelegate(address)\":{\"details\":\"Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\",\"params\":{\"_delegate\":\"The address of the delegate to be set.\"}},\"setEnforcedOptions((uint32,uint16,bytes)[])\":{\"details\":\"Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\",\"params\":{\"_enforcedOptions\":\"An array of EnforcedOptionParam structures specifying enforced options.\"}},\"setMinimumBalance(uint256)\":{\"details\":\"Set minimum balance for responses (owner only)\"},\"setPeer(uint32,bytes32)\":{\"details\":\"Set peer for a specific endpoint ID (owner only)\",\"params\":{\"_eid\":\"The endpoint ID to set the peer for\",\"_peer\":\"The peer address (as bytes32)\"}},\"setSupportedChain(uint32,bool,uint32)\":{\"params\":{\"chainEid\":\"The LayerZero endpoint ID of the chain\",\"gasLimit\":\"Gas limit for responses to this chain\",\"supported\":\"Whether the chain should be supported\"}},\"setVRFConfig(uint256,bytes32,uint32,uint16,bool)\":{\"details\":\"Set VRF 2.5 configuration (owner only)\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Withdraw ETH (owner only)\"}},\"stateVariables\":{\"minimumBalance\":{\"details\":\"Minimum ETH balance threshold for monitoring purposes only.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewChain(uint32,string,uint32)\":{\"notice\":\"Add a new chain with name (for better UX)\"},\"allowInitializePath((uint32,bytes32,uint64))\":{\"notice\":\"Checks if the path initialization is allowed based on the provided origin.\"},\"combineOptions(uint32,uint16,bytes)\":{\"notice\":\"Combines options for a given endpoint and message type.\"},\"endpoint()\":{\"notice\":\"Retrieves the LayerZero endpoint associated with the OApp.\"},\"getAllChainsWithNames()\":{\"notice\":\"Get all registered chains with names\"},\"getSupportedChains()\":{\"notice\":\"Get supported chains info (EXPANDABLE VERSION)\"},\"isComposeMsgSender((uint32,bytes32,uint64),bytes,address)\":{\"notice\":\"Indicates whether an address is an approved composeMsg sender to the Endpoint.\"},\"nextNonce(uint32,bytes32)\":{\"notice\":\"Retrieves the next nonce for a given source endpoint and sender address.\"},\"oAppVersion()\":{\"notice\":\"Retrieves the OApp version information.\"},\"peers(uint32)\":{\"notice\":\"Retrieves the peer (OApp) associated with a corresponding endpoint.\"},\"quoteSendToChain(uint32)\":{\"notice\":\"Quote LayerZero fee for sending response to any supported chain\"},\"rawFulfillRandomWords(uint256,uint256[])\":{\"notice\":\"Callback function used by VRF Coordinator\"},\"retryPendingResponse(uint64)\":{\"notice\":\"Manual retry for pending responses\"},\"setDelegate(address)\":{\"notice\":\"Sets the delegate address for the OApp.\"},\"setSupportedChain(uint32,bool,uint32)\":{\"notice\":\"Add or remove support for a chain\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol\":\"OmniDragonVRFConsumerV2_5\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031373530393831383639343430\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/ExecutorOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary ExecutorOptions {\\n    using CalldataBytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 1;\\n\\n    uint8 internal constant OPTION_TYPE_LZRECEIVE = 1;\\n    uint8 internal constant OPTION_TYPE_NATIVE_DROP = 2;\\n    uint8 internal constant OPTION_TYPE_LZCOMPOSE = 3;\\n    uint8 internal constant OPTION_TYPE_ORDERED_EXECUTION = 4;\\n    uint8 internal constant OPTION_TYPE_LZREAD = 5;\\n\\n    error Executor_InvalidLzReceiveOption();\\n    error Executor_InvalidNativeDropOption();\\n    error Executor_InvalidLzComposeOption();\\n    error Executor_InvalidLzReadOption();\\n\\n    /// @dev decode the next executor option from the options starting from the specified cursor\\n    /// @param _options [executor_id][executor_option][executor_id][executor_option]...\\n    ///        executor_option = [option_size][option_type][option]\\n    ///        option_size = len(option_type) + len(option)\\n    ///        executor_id: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @param _cursor the cursor to start decoding from\\n    /// @return optionType the type of the option\\n    /// @return option the option of the executor\\n    /// @return cursor the cursor to start decoding the next executor option\\n    function nextExecutorOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor);\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 1; // skip option type\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n\\n    function decodeLzReceiveOption(bytes calldata _option) internal pure returns (uint128 gas, uint128 value) {\\n        if (_option.length != 16 && _option.length != 32) revert Executor_InvalidLzReceiveOption();\\n        gas = _option.toU128(0);\\n        value = _option.length == 32 ? _option.toU128(16) : 0;\\n    }\\n\\n    function decodeNativeDropOption(bytes calldata _option) internal pure returns (uint128 amount, bytes32 receiver) {\\n        if (_option.length != 48) revert Executor_InvalidNativeDropOption();\\n        amount = _option.toU128(0);\\n        receiver = _option.toB32(16);\\n    }\\n\\n    function decodeLzComposeOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint16 index, uint128 gas, uint128 value) {\\n        if (_option.length != 18 && _option.length != 34) revert Executor_InvalidLzComposeOption();\\n        index = _option.toU16(0);\\n        gas = _option.toU128(2);\\n        value = _option.length == 34 ? _option.toU128(18) : 0;\\n    }\\n\\n    function decodeLzReadOption(\\n        bytes calldata _option\\n    ) internal pure returns (uint128 gas, uint32 calldataSize, uint128 value) {\\n        if (_option.length != 20 && _option.length != 36) revert Executor_InvalidLzReadOption();\\n        gas = _option.toU128(0);\\n        calldataSize = _option.toU32(16);\\n        value = _option.length == 36 ? _option.toU128(20) : 0;\\n    }\\n\\n    function encodeLzReceiveOption(uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas) : abi.encodePacked(_gas, _value);\\n    }\\n\\n    function encodeNativeDropOption(uint128 _amount, bytes32 _receiver) internal pure returns (bytes memory) {\\n        return abi.encodePacked(_amount, _receiver);\\n    }\\n\\n    function encodeLzComposeOption(uint16 _index, uint128 _gas, uint128 _value) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_index, _gas) : abi.encodePacked(_index, _gas, _value);\\n    }\\n\\n    function encodeLzReadOption(\\n        uint128 _gas,\\n        uint32 _calldataSize,\\n        uint128 _value\\n    ) internal pure returns (bytes memory) {\\n        return _value == 0 ? abi.encodePacked(_gas, _calldataSize) : abi.encodePacked(_gas, _calldataSize, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x44cfd3c33a4e4e01c08863784cd8cffbca7a403a3a52eb6a7800da9b06e38a83\",\"license\":\"LZBL-1.2\"},\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport { BitMap256 } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/BitMaps.sol\\\";\\nimport { CalldataBytesLib } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol\\\";\\n\\nlibrary DVNOptions {\\n    using CalldataBytesLib for bytes;\\n    using BytesLib for bytes;\\n\\n    uint8 internal constant WORKER_ID = 2;\\n    uint8 internal constant OPTION_TYPE_PRECRIME = 1;\\n\\n    error DVN_InvalidDVNIdx();\\n    error DVN_InvalidDVNOptions(uint256 cursor);\\n\\n    /// @dev group dvn options by its idx\\n    /// @param _options [dvn_id][dvn_option][dvn_id][dvn_option]...\\n    ///        dvn_option = [option_size][dvn_idx][option_type][option]\\n    ///        option_size = len(dvn_idx) + len(option_type) + len(option)\\n    ///        dvn_id: uint8, dvn_idx: uint8, option_size: uint16, option_type: uint8, option: bytes\\n    /// @return dvnOptions the grouped options, still share the same format of _options\\n    /// @return dvnIndices the dvn indices\\n    function groupDVNOptionsByIdx(\\n        bytes memory _options\\n    ) internal pure returns (bytes[] memory dvnOptions, uint8[] memory dvnIndices) {\\n        if (_options.length == 0) return (dvnOptions, dvnIndices);\\n\\n        uint8 numDVNs = getNumDVNs(_options);\\n\\n        // if there is only 1 dvn, we can just return the whole options\\n        if (numDVNs == 1) {\\n            dvnOptions = new bytes[](1);\\n            dvnOptions[0] = _options;\\n\\n            dvnIndices = new uint8[](1);\\n            dvnIndices[0] = _options.toUint8(3); // dvn idx\\n            return (dvnOptions, dvnIndices);\\n        }\\n\\n        // otherwise, we need to group the options by dvn_idx\\n        dvnIndices = new uint8[](numDVNs);\\n        dvnOptions = new bytes[](numDVNs);\\n        unchecked {\\n            uint256 cursor = 0;\\n            uint256 start = 0;\\n            uint8 lastDVNIdx = 255; // 255 is an invalid dvn_idx\\n\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                // optionLength asserted in getNumDVNs (skip check)\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n\\n                // dvnIdx asserted in getNumDVNs (skip check)\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // dvnIdx must equal to the lastDVNIdx for the first option\\n                // so it is always skipped in the first option\\n                // this operation slices out options whenever the scan finds a different lastDVNIdx\\n                if (lastDVNIdx == 255) {\\n                    lastDVNIdx = dvnIdx;\\n                } else if (dvnIdx != lastDVNIdx) {\\n                    uint256 len = cursor - start - 3; // 3 is for worker_id and option_length\\n                    bytes memory opt = _options.slice(start, len);\\n                    _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, opt);\\n\\n                    // reset the start and lastDVNIdx\\n                    start += len;\\n                    lastDVNIdx = dvnIdx;\\n                }\\n\\n                cursor += optionLength;\\n            }\\n\\n            // skip check the cursor here because the cursor is asserted in getNumDVNs\\n            // if we have reached the end of the options, we need to process the last dvn\\n            uint256 size = cursor - start;\\n            bytes memory op = _options.slice(start, size);\\n            _insertDVNOptions(dvnOptions, dvnIndices, lastDVNIdx, op);\\n\\n            // revert dvnIndices to start from 0\\n            for (uint8 i = 0; i < numDVNs; ++i) {\\n                --dvnIndices[i];\\n            }\\n        }\\n    }\\n\\n    function _insertDVNOptions(\\n        bytes[] memory _dvnOptions,\\n        uint8[] memory _dvnIndices,\\n        uint8 _dvnIdx,\\n        bytes memory _newOptions\\n    ) internal pure {\\n        // dvnIdx starts from 0 but default value of dvnIndices is 0,\\n        // so we tell if the slot is empty by adding 1 to dvnIdx\\n        if (_dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n        uint8 dvnIdxAdj = _dvnIdx + 1;\\n\\n        for (uint256 j = 0; j < _dvnIndices.length; ++j) {\\n            uint8 index = _dvnIndices[j];\\n            if (dvnIdxAdj == index) {\\n                _dvnOptions[j] = abi.encodePacked(_dvnOptions[j], _newOptions);\\n                break;\\n            } else if (index == 0) {\\n                // empty slot, that means it is the first time we see this dvn\\n                _dvnIndices[j] = dvnIdxAdj;\\n                _dvnOptions[j] = _newOptions;\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @dev get the number of unique dvns\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    function getNumDVNs(bytes memory _options) internal pure returns (uint8 numDVNs) {\\n        uint256 cursor = 0;\\n        BitMap256 bitmap;\\n\\n        // find number of unique dvn_idx\\n        unchecked {\\n            while (cursor < _options.length) {\\n                ++cursor; // skip worker_id\\n\\n                uint16 optionLength = _options.toUint16(cursor);\\n                cursor += 2;\\n                if (optionLength < 2) revert DVN_InvalidDVNOptions(cursor); // at least 1 byte for dvn_idx and 1 byte for option_type\\n\\n                uint8 dvnIdx = _options.toUint8(cursor);\\n\\n                // if dvnIdx is not set, increment numDVNs\\n                // max num of dvns is 255, 255 is an invalid dvn_idx\\n                // The order of the dvnIdx is not required to be sequential, as enforcing the order may weaken\\n                // the composability of the options. e.g. if we refrain from enforcing the order, an OApp that has\\n                // already enforced certain options can append additional options to the end of the enforced\\n                // ones without restrictions.\\n                if (dvnIdx == 255) revert DVN_InvalidDVNIdx();\\n                if (!bitmap.get(dvnIdx)) {\\n                    ++numDVNs;\\n                    bitmap = bitmap.set(dvnIdx);\\n                }\\n\\n                cursor += optionLength;\\n            }\\n        }\\n        if (cursor != _options.length) revert DVN_InvalidDVNOptions(cursor);\\n    }\\n\\n    /// @dev decode the next dvn option from _options starting from the specified cursor\\n    /// @param _options the format is the same as groupDVNOptionsByIdx\\n    /// @param _cursor the cursor to start decoding\\n    /// @return optionType the type of the option\\n    /// @return option the option\\n    /// @return cursor the cursor to start decoding the next option\\n    function nextDVNOption(\\n        bytes calldata _options,\\n        uint256 _cursor\\n    ) internal pure returns (uint8 optionType, bytes calldata option, uint256 cursor) {\\n        unchecked {\\n            // skip worker id\\n            cursor = _cursor + 1;\\n\\n            // read option size\\n            uint16 size = _options.toU16(cursor);\\n            cursor += 2;\\n\\n            // read option type\\n            optionType = _options.toU8(cursor + 1); // skip dvn_idx\\n\\n            // startCursor and endCursor are used to slice the option from _options\\n            uint256 startCursor = cursor + 2; // skip option type and dvn_idx\\n            uint256 endCursor = cursor + size;\\n            option = _options[startCursor:endCursor];\\n            cursor += size;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf95b7e4b4e849de0d89aafb299e25ecae71c6fd3728d732854efe6df675c71e4\",\"license\":\"LZBL-1.2\"},\"contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/**\\n * @title OmniDragonVRFConsumerV2_5\\n * @dev Multi-chain VRF Consumer that accepts requests from multiple chains\\n *      (Sonic, Avalanche, etc.) and sends randomness back to the originating chain.\\n *      This acts as a centralized VRF hub on Arbitrum using Chainlink VRF 2.5.\\n *\\n * https://x.com/sonicreddragon\\n * https://t.me/sonicreddragon\\n */\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { OApp, MessagingFee, Origin } from \\\"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\\\";\\nimport { MessagingReceipt } from \\\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\\\";\\nimport { OAppOptionsType3 } from \\\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\\\";\\nimport { OptionsBuilder } from \\\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\\\";\\nimport { IVRFCoordinatorV2Plus } from \\\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport { VRFV2PlusClient } from \\\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\ncontract OmniDragonVRFConsumerV2_5 is OApp, OAppOptionsType3 {\\n    using OptionsBuilder for bytes;\\n\\n    IVRFCoordinatorV2Plus public immutable vrfCoordinator;\\n    uint32 public constant ETHEREUM_EID = 30101;\\n    uint32 public constant BSC_EID = 30102;\\n    uint32 public constant AVALANCHE_EID = 30106;\\n    uint32 public constant POLYGON_EID = 30109;\\n    uint32 public constant OPTIMISM_EID = 30111;\\n    uint32 public constant BASE_EID = 30184;\\n    uint32 public constant SONIC_EID = 30332;\\n    \\n    mapping(uint32 => bool) public supportedChains;\\n    mapping(uint32 => uint32) public chainGasLimits;\\n    \\n    uint32[] public registeredChainEids;\\n    mapping(uint32 => string) public chainNames;\\n    \\n    uint256 public subscriptionId;\\n    bytes32 public keyHash;\\n    uint32 public callbackGasLimit = 2500000;\\n    uint16 public requestConfirmations = 3;\\n    uint32 public numWords = 1;\\n    \\n    bool public nativePayment = false;\\n\\n    struct VRFRequest {\\n        uint64 sequence;\\n        uint32 sourceChainEid;\\n        bytes32 sourcePeer;\\n        uint256 randomWord;\\n        bool fulfilled;\\n        bool responseSent;\\n        uint256 timestamp;\\n    }\\n\\n    mapping(uint256 => VRFRequest) public vrfRequests;\\n    mapping(uint64 => uint256) public sequenceToRequestId;\\n    \\n    mapping(uint64 => bool) public pendingResponses;\\n    \\n    /**\\n     * @dev Minimum ETH balance threshold for monitoring purposes only.\\n     */\\n    uint256 public minimumBalance = 0.005 ether;\\n    uint32 public defaultGasLimit = 2500000;\\n\\n    event RandomWordsRequested(\\n        uint256 indexed requestId,\\n        uint32 indexed srcEid,\\n        bytes32 indexed requester,\\n        uint64 sequence,\\n        uint256 timestamp\\n    );\\n    event VRFRequestSent(uint256 indexed originalRequestId, uint256 indexed vrfRequestId, uint32 sourceChain);\\n    event RandomnessFulfilled(uint256 indexed requestId, uint256[] randomWords, uint32 targetChain);\\n    event ResponseSentToChain(uint64 indexed sequence, uint256 randomWord, uint32 targetChain, uint256 fee);\\n    event ResponsePending(uint64 indexed sequence, uint256 indexed requestId, uint32 targetChain, string reason);\\n    event VRFConfigUpdated(uint256 subscriptionId, bytes32 keyHash, uint32 callbackGasLimit, uint16 requestConfirmations);\\n    event MinimumBalanceUpdated(uint256 oldBalance, uint256 newBalance);\\n    event ChainSupportUpdated(uint32 chainEid, bool supported, uint32 gasLimit);\\n    event ContractFunded(address indexed funder, uint256 amount, uint256 newBalance);\\n\\n    constructor(\\n        address _endpoint,\\n        address _owner,\\n        address _vrfCoordinator,\\n        uint256 _subscriptionId,\\n        bytes32 _keyHash\\n    ) OApp(_endpoint, _owner) Ownable(_owner) {\\n        vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n        subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n        \\n        _setSupportedChain(SONIC_EID, true, 2500000);\\n        _setSupportedChain(AVALANCHE_EID, true, 2500000);\\n        _setSupportedChain(BASE_EID, true, 2500000);\\n        _setSupportedChain(ETHEREUM_EID, true, 2500000);\\n    }\\n\\n    /**\\n     * @notice LayerZero V2 receive function - accepts VRF requests from multiple chains\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32,\\n        bytes calldata _message,\\n        address,\\n        bytes calldata\\n    ) internal override {\\n        require(supportedChains[_origin.srcEid], \\\"Chain not supported\\\");\\n        \\n        require(peers[_origin.srcEid] == _origin.sender, \\\"Invalid source peer\\\");\\n        \\n        uint64 sequence = abi.decode(_message, (uint64));\\n        \\n        require(sequenceToRequestId[sequence] == 0, \\\"Duplicate sequence\\\");\\n\\n        bytes memory extraArgs = VRFV2PlusClient._argsToBytes(\\n            VRFV2PlusClient.ExtraArgsV1({nativePayment: nativePayment})\\n        );\\n        \\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\n            VRFV2PlusClient.RandomWordsRequest({\\n                keyHash: keyHash,\\n                subId: subscriptionId,\\n                requestConfirmations: requestConfirmations,\\n                callbackGasLimit: callbackGasLimit,\\n                numWords: numWords,\\n                extraArgs: extraArgs\\n            })\\n        );\\n        \\n        vrfRequests[requestId] = VRFRequest({\\n            sequence: sequence,\\n            sourceChainEid: _origin.srcEid,\\n            sourcePeer: _origin.sender,\\n            randomWord: 0,\\n            fulfilled: false,\\n            responseSent: false,\\n            timestamp: block.timestamp\\n        });\\n        \\n        sequenceToRequestId[sequence] = requestId;\\n\\n        emit VRFRequestSent(sequence, requestId, _origin.srcEid);\\n        emit RandomWordsRequested(requestId, _origin.srcEid, _origin.sender, sequence, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Callback function used by VRF Coordinator\\n     * @dev This function is called by the VRF Coordinator when randomness is ready\\n     * @param requestId The request ID\\n     * @param randomWords Array of random words\\n     */\\n    function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n        require(msg.sender == address(vrfCoordinator), \\\"Only VRF Coordinator can fulfill\\\");\\n\\n        VRFRequest storage request = vrfRequests[requestId];\\n        require(request.sequence != 0, \\\"Invalid request ID\\\");\\n        require(!request.fulfilled, \\\"Already fulfilled\\\");\\n\\n        request.fulfilled = true;\\n        request.randomWord = randomWords[0];\\n\\n        uint32 targetGasLimit = chainGasLimits[request.sourceChainEid];\\n        if (targetGasLimit == 0) {\\n            targetGasLimit = defaultGasLimit;\\n        }\\n\\n        bytes memory payload = abi.encode(request.sequence, request.randomWord);\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(targetGasLimit, 0);\\n        MessagingFee memory fee = _quote(request.sourceChainEid, payload, options, false);\\n\\n        if (address(this).balance < fee.nativeFee) {\\n            pendingResponses[request.sequence] = true;\\n            emit ResponsePending(request.sequence, requestId, request.sourceChainEid, \\\"Insufficient balance for LayerZero fees\\\");\\n            return;\\n        }\\n\\n        _sendResponseToChain(request, fee);\\n\\n        emit RandomnessFulfilled(requestId, randomWords, request.sourceChainEid);\\n    }\\n\\n    /**\\n     * @dev Set peer for a specific endpoint ID (owner only)\\n     * @param _eid The endpoint ID to set the peer for\\n     * @param _peer The peer address (as bytes32)\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public override onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Add or remove support for a chain\\n     * @param chainEid The LayerZero endpoint ID of the chain\\n     * @param supported Whether the chain should be supported\\n     * @param gasLimit Gas limit for responses to this chain\\n     */\\n    function setSupportedChain(uint32 chainEid, bool supported, uint32 gasLimit) external onlyOwner {\\n        _setSupportedChain(chainEid, supported, gasLimit);\\n    }\\n\\n    /**\\n     * @notice Add a new chain with name (for better UX)\\n     * @param chainEid The LayerZero endpoint ID of the chain\\n     * @param chainName Human-readable name for the chain\\n     * @param gasLimit Gas limit for responses to this chain\\n     */\\n    function addNewChain(uint32 chainEid, string calldata chainName, uint32 gasLimit) external onlyOwner {\\n        require(!supportedChains[chainEid], \\\"Chain already supported\\\");\\n        require(bytes(chainName).length > 0, \\\"Chain name required\\\");\\n        \\n        bool found = false;\\n        for (uint i = 0; i < registeredChainEids.length; i++) {\\n            if (registeredChainEids[i] == chainEid) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        if (!found) {\\n            registeredChainEids.push(chainEid);\\n        }\\n        \\n        chainNames[chainEid] = chainName;\\n        _setSupportedChain(chainEid, true, gasLimit);\\n    }\\n\\n    /**\\n     * @notice Internal function to set chain support\\n     */\\n    function _setSupportedChain(uint32 chainEid, bool supported, uint32 gasLimit) internal {\\n        supportedChains[chainEid] = supported;\\n        if (supported) {\\n            require(gasLimit >= 100000 && gasLimit <= 10000000, \\\"Invalid gas limit\\\");\\n            chainGasLimits[chainEid] = gasLimit;\\n        } else {\\n            chainGasLimits[chainEid] = 0;\\n        }\\n        emit ChainSupportUpdated(chainEid, supported, gasLimit);\\n    }\\n\\n    /**\\n     * @notice Get supported chains info (EXPANDABLE VERSION)\\n     */\\n    function getSupportedChains() external view returns (\\n        uint32[] memory eids,\\n        bool[] memory supported,\\n        uint32[] memory gasLimits\\n    ) {\\n        uint32[] memory baseChains = new uint32[](8);\\n        baseChains[0] = SONIC_EID;\\n        baseChains[1] = AVALANCHE_EID;\\n        baseChains[2] = BASE_EID;\\n        baseChains[3] = ETHEREUM_EID;\\n        baseChains[4] = POLYGON_EID;\\n        baseChains[5] = BSC_EID;\\n        baseChains[6] = OPTIMISM_EID;\\n        \\n        uint256 totalChains = baseChains.length + registeredChainEids.length;\\n        eids = new uint32[](totalChains);\\n        supported = new bool[](totalChains);\\n        gasLimits = new uint32[](totalChains);\\n        \\n        for (uint i = 0; i < baseChains.length; i++) {\\n            eids[i] = baseChains[i];\\n            supported[i] = supportedChains[baseChains[i]];\\n            gasLimits[i] = chainGasLimits[baseChains[i]];\\n        }\\n        \\n        for (uint i = 0; i < registeredChainEids.length; i++) {\\n            uint256 index = baseChains.length + i;\\n            eids[index] = registeredChainEids[i];\\n            supported[index] = supportedChains[registeredChainEids[i]];\\n            gasLimits[index] = chainGasLimits[registeredChainEids[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get all registered chains with names\\n     */\\n    function getAllChainsWithNames() external view returns (\\n        uint32[] memory eids,\\n        string[] memory names,\\n        bool[] memory supported,\\n        uint32[] memory gasLimits\\n    ) {\\n        uint32[] memory baseChains = new uint32[](8);\\n        baseChains[0] = SONIC_EID;\\n        baseChains[1] = AVALANCHE_EID;\\n        baseChains[2] = BASE_EID;\\n        baseChains[3] = ETHEREUM_EID;\\n        baseChains[4] = POLYGON_EID;\\n        baseChains[5] = BSC_EID;\\n        baseChains[6] = OPTIMISM_EID;\\n\\n        \\n        string[] memory baseNames = new string[](8);\\n        baseNames[0] = \\\"Sonic\\\";\\n        baseNames[1] = \\\"Avalanche\\\";\\n        baseNames[2] = \\\"Base\\\";\\n        baseNames[3] = \\\"Ethereum\\\";\\n        baseNames[4] = \\\"Polygon\\\";\\n        baseNames[5] = \\\"BSC\\\";\\n        baseNames[6] = \\\"Optimism\\\";\\n\\n        \\n        uint256 totalChains = baseChains.length + registeredChainEids.length;\\n        eids = new uint32[](totalChains);\\n        names = new string[](totalChains);\\n        supported = new bool[](totalChains);\\n        gasLimits = new uint32[](totalChains);\\n        \\n        for (uint i = 0; i < baseChains.length; i++) {\\n            eids[i] = baseChains[i];\\n            names[i] = baseNames[i];\\n            supported[i] = supportedChains[baseChains[i]];\\n            gasLimits[i] = chainGasLimits[baseChains[i]];\\n        }\\n        \\n        for (uint i = 0; i < registeredChainEids.length; i++) {\\n            uint256 index = baseChains.length + i;\\n            eids[index] = registeredChainEids[i];\\n            names[index] = chainNames[registeredChainEids[i]];\\n            supported[index] = supportedChains[registeredChainEids[i]];\\n            gasLimits[index] = chainGasLimits[registeredChainEids[i]];\\n        }\\n    }\\n\\n    /**\\n     * @notice Manual retry for pending responses\\n     * @dev Call this after funding the contract to retry failed responses.\\n     * @param sequence The sequence number to retry\\n     */\\n    function retryPendingResponse(uint64 sequence) external payable {\\n        require(pendingResponses[sequence], \\\"No pending response for this sequence\\\");\\n        \\n        uint256 requestId = sequenceToRequestId[sequence];\\n        require(requestId != 0, \\\"Invalid sequence\\\");\\n        \\n        VRFRequest storage request = vrfRequests[requestId];\\n        require(request.fulfilled, \\\"VRF not fulfilled yet\\\");\\n        require(!request.responseSent, \\\"Response already sent\\\");\\n        \\n        uint32 targetGasLimit = chainGasLimits[request.sourceChainEid];\\n        if (targetGasLimit == 0) {\\n            targetGasLimit = defaultGasLimit;\\n        }\\n        \\n        bytes memory payload = abi.encode(request.sequence, request.randomWord);\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(targetGasLimit, 0);\\n        MessagingFee memory fee = _quote(request.sourceChainEid, payload, options, false);\\n        \\n        require(address(this).balance >= fee.nativeFee, \\\"Insufficient contract balance for LayerZero fee\\\");\\n        \\n        delete pendingResponses[sequence];\\n\\n        _sendResponseToChain(request, fee);\\n    }\\n\\n    /**\\n     * @notice Quote LayerZero fee for sending response to any supported chain\\n     * @param targetChainEid The chain to send the response to\\n     */\\n    function quoteSendToChain(uint32 targetChainEid) external view returns (MessagingFee memory fee) {\\n        require(supportedChains[targetChainEid], \\\"Chain not supported\\\");\\n        \\n        uint32 targetGasLimit = chainGasLimits[targetChainEid];\\n        if (targetGasLimit == 0) {\\n            targetGasLimit = defaultGasLimit;\\n        }\\n        \\n        bytes memory payload = abi.encode(uint64(1), uint256(12345));\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(targetGasLimit, 0);\\n        return _quote(targetChainEid, payload, options, false);\\n    }\\n\\n    /**\\n     * @dev Internal function to send the VRF response back to the originating chain.\\n     * @param _request The VRF request struct containing all necessary data.\\n     * @param _fee The pre-calculated LayerZero messaging fee.\\n     */\\n    function _sendResponseToChain(VRFRequest storage _request, MessagingFee memory _fee) internal {\\n        uint32 targetGasLimit = chainGasLimits[_request.sourceChainEid];\\n        if (targetGasLimit == 0) {\\n            targetGasLimit = defaultGasLimit;\\n        }\\n        \\n        bytes memory payload = abi.encode(_request.sequence, _request.randomWord);\\n        bytes memory options = OptionsBuilder.newOptions().addExecutorLzReceiveOption(targetGasLimit, 0);\\n\\n        _request.responseSent = true;\\n\\n        _lzSend(\\n            _request.sourceChainEid,  // \\ud83c\\udd95 Send back to the originating chain\\n            payload,\\n            options,\\n            _fee,\\n            payable(owner()) // Refund any excess gas to the owner\\n        );\\n        \\n        emit ResponseSentToChain(_request.sequence, _request.randomWord, _request.sourceChainEid, _fee.nativeFee);\\n    }\\n\\n    /**\\n     * @dev Set VRF 2.5 configuration (owner only)\\n     */\\n    function setVRFConfig(\\n        uint256 _subscriptionId,\\n        bytes32 _keyHash,\\n        uint32 _callbackGasLimit,\\n        uint16 _requestConfirmations,\\n        bool _nativePayment\\n    ) external onlyOwner {\\n        require(_subscriptionId > 0, \\\"Invalid subscription ID\\\");\\n        require(_keyHash != bytes32(0), \\\"Invalid key hash\\\");\\n        require(_callbackGasLimit >= 40000 && _callbackGasLimit <= 2500000, \\\"Invalid callback gas limit\\\");\\n        require(_requestConfirmations >= 3 && _requestConfirmations <= 200, \\\"Invalid request confirmations\\\");\\n        \\n        subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n        callbackGasLimit = _callbackGasLimit;\\n        requestConfirmations = _requestConfirmations;\\n        nativePayment = _nativePayment;\\n        \\n        emit VRFConfigUpdated(_subscriptionId, _keyHash, _callbackGasLimit, _requestConfirmations);\\n    }\\n\\n    /**\\n     * @dev Set minimum balance for responses (owner only)\\n     */\\n    function setMinimumBalance(uint256 _minimumBalance) external onlyOwner {\\n        require(_minimumBalance <= 1 ether, \\\"Minimum balance too high\\\");\\n        \\n        uint256 oldBalance = minimumBalance;\\n        minimumBalance = _minimumBalance;\\n        emit MinimumBalanceUpdated(oldBalance, _minimumBalance);\\n    }\\n\\n    /**\\n     * @dev Set default gas limit (owner only)\\n     */\\n    function setDefaultGasLimit(uint32 _gasLimit) external onlyOwner {\\n        require(_gasLimit >= 100000 && _gasLimit <= 10000000, \\\"Invalid gas limit\\\");\\n        defaultGasLimit = _gasLimit;\\n    }\\n\\n    /**\\n     * @dev Fund contract with ETH for LayerZero fees\\n     */\\n    function fundContract() external payable {\\n        require(msg.value > 0, \\\"Must send ETH to fund contract\\\");\\n        emit ContractFunded(msg.sender, msg.value, address(this).balance);\\n    }\\n\\n    /**\\n     * @dev Override _payNative to handle payments from contract balance when msg.value is 0\\n     * This is necessary for VRF callbacks where msg.value is 0 but the contract has ETH balance\\n     */\\n    function _payNative(uint256 _nativeFee) internal override returns (uint256 nativeFee) {\\n        // If msg.value is 0 (e.g., from VRF callback), use contract balance\\n        if (msg.value == 0) {\\n            require(address(this).balance >= _nativeFee, \\\"Insufficient contract balance for LayerZero fee\\\");\\n            return _nativeFee;\\n        }\\n        \\n        // Otherwise, use the standard payment method\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Get request details by sequence\\n     */\\n    function getRequestBySequence(uint64 sequence) external view returns (\\n        uint256 requestId,\\n        bool exists,\\n        bool fulfilled,\\n        bool responseSent,\\n        uint256 randomWord,\\n        uint32 sourceChainEid,\\n        uint256 timestamp\\n    ) {\\n        requestId = sequenceToRequestId[sequence];\\n        if (requestId == 0) {\\n            return (0, false, false, false, 0, 0, 0);\\n        }\\n        \\n        VRFRequest storage request = vrfRequests[requestId];\\n        return (\\n            requestId,\\n            true,\\n            request.fulfilled,\\n            request.responseSent,\\n            request.randomWord,\\n            request.sourceChainEid,  // \\ud83c\\udd95 Include source chain info\\n            request.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Get request details by VRF request ID\\n     */\\n    function getRequestById(uint256 requestId) external view returns (\\n        uint64 sequence,\\n        bool exists,\\n        bool fulfilled,\\n        bool responseSent,\\n        uint256 randomWord,\\n        uint32 sourceChainEid,\\n        uint256 timestamp\\n    ) {\\n        VRFRequest storage request = vrfRequests[requestId];\\n        if (request.sequence == 0) {\\n            return (0, false, false, false, 0, 0, 0);\\n        }\\n        \\n        return (\\n            request.sequence,\\n            true,\\n            request.fulfilled,\\n            request.responseSent,\\n            request.randomWord,\\n            request.sourceChainEid,  // \\ud83c\\udd95 Include source chain info\\n            request.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Check contract status\\n     */\\n    function getContractStatus() external view returns (\\n        uint256 balance,\\n        uint256 minBalance,\\n        bool canSendResponses,\\n        uint32 gasLimit,\\n        uint256 supportedChainsCount\\n    ) {\\n        balance = address(this).balance;\\n        minBalance = minimumBalance;\\n        canSendResponses = balance >= minBalance;\\n        gasLimit = defaultGasLimit;\\n        \\n        uint256 count = 0;\\n        if (supportedChains[SONIC_EID]) count++;\\n        if (supportedChains[AVALANCHE_EID]) count++;\\n        if (supportedChains[BASE_EID]) count++;\\n        if (supportedChains[ETHEREUM_EID]) count++;\\n        supportedChainsCount = count;\\n        \\n        return (balance, minBalance, canSendResponses, gasLimit, supportedChainsCount);\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH (owner only)\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No balance to withdraw\\\");\\n        \\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n    }\\n\\n    /**\\n     * @dev Receive ETH for LayerZero fees\\n     */\\n    receive() external payable {}\\n}\\n\\n\",\"keccak256\":\"0x9ca53601ad813ba861508f63004eca122ba2d0a3395fdbda8d342115ca678db5\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0xb586cb0afd93daad6a94d17fbb0eedf2385c0470c15344d9b6335a05c6c143de\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x2bbebed6292d9d4b39a8813a350b82967586c932e5f916f6009a1bbc95775d8c\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x34b575e32247f1082a4888dbe6db235158cb2b56de8580acfcd1f4cae29e7ca5\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Struct representing enforced option parameters.\\n */\\nstruct EnforcedOptionParam {\\n    uint32 eid; // Endpoint ID\\n    uint16 msgType; // Message Type\\n    bytes options; // Additional options\\n}\\n\\n/**\\n * @title IOAppOptionsType3\\n * @dev Interface for the OApp with Type 3 Options, allowing the setting and combining of enforced options.\\n */\\ninterface IOAppOptionsType3 {\\n    // Custom error message for invalid options\\n    error InvalidOptions(bytes options);\\n\\n    // Event emitted when enforced options are set\\n    event EnforcedOptionSet(EnforcedOptionParam[] _enforcedOptions);\\n\\n    /**\\n     * @notice Sets enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) external;\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OApp message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) external view returns (bytes memory options);\\n}\\n\",\"keccak256\":\"0x9fc08a51e9d7c9c710c4eb26f84fe77228305ad7da63fa486ff24ebf2f3bc461\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0x43714ea20ed076dc051cfb49f99cb3650e1e900c8483698f416f490023c0372a\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OAppOptionsType3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { IOAppOptionsType3, EnforcedOptionParam } from \\\"../interfaces/IOAppOptionsType3.sol\\\";\\n\\n/**\\n * @title OAppOptionsType3\\n * @dev Abstract contract implementing the IOAppOptionsType3 interface with type 3 options.\\n */\\nabstract contract OAppOptionsType3 is IOAppOptionsType3, Ownable {\\n    uint16 internal constant OPTION_TYPE_3 = 3;\\n\\n    // @dev The \\\"msgType\\\" should be defined in the child contract.\\n    mapping(uint32 eid => mapping(uint16 msgType => bytes enforcedOption)) public enforcedOptions;\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function setEnforcedOptions(EnforcedOptionParam[] calldata _enforcedOptions) public virtual onlyOwner {\\n        _setEnforcedOptions(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @dev Sets the enforced options for specific endpoint and message type combinations.\\n     * @param _enforcedOptions An array of EnforcedOptionParam structures specifying enforced options.\\n     *\\n     * @dev Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.\\n     * @dev These enforced options can vary as the potential options/execution on the remote may differ as per the msgType.\\n     * eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay\\n     * if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().\\n     */\\n    function _setEnforcedOptions(EnforcedOptionParam[] memory _enforcedOptions) internal virtual {\\n        for (uint256 i = 0; i < _enforcedOptions.length; i++) {\\n            // @dev Enforced options are only available for optionType 3, as type 1 and 2 dont support combining.\\n            _assertOptionsType3(_enforcedOptions[i].options);\\n            enforcedOptions[_enforcedOptions[i].eid][_enforcedOptions[i].msgType] = _enforcedOptions[i].options;\\n        }\\n\\n        emit EnforcedOptionSet(_enforcedOptions);\\n    }\\n\\n    /**\\n     * @notice Combines options for a given endpoint and message type.\\n     * @param _eid The endpoint ID.\\n     * @param _msgType The OAPP message type.\\n     * @param _extraOptions Additional options passed by the caller.\\n     * @return options The combination of caller specified options AND enforced options.\\n     *\\n     * @dev If there is an enforced lzReceive option:\\n     * - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether}\\n     * - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.\\n     * @dev This presence of duplicated options is handled off-chain in the verifier/executor.\\n     */\\n    function combineOptions(\\n        uint32 _eid,\\n        uint16 _msgType,\\n        bytes calldata _extraOptions\\n    ) public view virtual returns (bytes memory) {\\n        bytes memory enforced = enforcedOptions[_eid][_msgType];\\n\\n        // No enforced options, pass whatever the caller supplied, even if it's empty or legacy type 1/2 options.\\n        if (enforced.length == 0) return _extraOptions;\\n\\n        // No caller options, return enforced\\n        if (_extraOptions.length == 0) return enforced;\\n\\n        // @dev If caller provided _extraOptions, must be type 3 as its the ONLY type that can be combined.\\n        if (_extraOptions.length >= 2) {\\n            _assertOptionsType3(_extraOptions);\\n            // @dev Remove the first 2 bytes containing the type from the _extraOptions and combine with enforced.\\n            return bytes.concat(enforced, _extraOptions[2:]);\\n        }\\n\\n        // No valid set of options was found.\\n        revert InvalidOptions(_extraOptions);\\n    }\\n\\n    /**\\n     * @dev Internal function to assert that options are of type 3.\\n     * @param _options The options to be checked.\\n     */\\n    function _assertOptionsType3(bytes memory _options) internal pure virtual {\\n        uint16 optionsType;\\n        assembly {\\n            optionsType := mload(add(_options, 2))\\n        }\\n        if (optionsType != OPTION_TYPE_3) revert InvalidOptions(_options);\\n    }\\n}\\n\",\"keccak256\":\"0x5c9bc230605f9f10faf4cb14410924051a3267a59048e5a6ae6bd37a59c7acc8\",\"license\":\"MIT\"},\"lib/devtools/packages/oapp-evm/contracts/oapp/libs/OptionsBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { BytesLib } from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport { SafeCast } from \\\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ExecutorOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/libs/ExecutorOptions.sol\\\";\\nimport { DVNOptions } from \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/uln/libs/DVNOptions.sol\\\";\\n\\n/**\\n * @title OptionsBuilder\\n * @dev Library for building and encoding various message options.\\n */\\nlibrary OptionsBuilder {\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    // Constants for options types\\n    uint16 internal constant TYPE_1 = 1; // legacy options type 1\\n    uint16 internal constant TYPE_2 = 2; // legacy options type 2\\n    uint16 internal constant TYPE_3 = 3;\\n\\n    // Custom error message\\n    error InvalidSize(uint256 max, uint256 actual);\\n    error InvalidOptionType(uint16 optionType);\\n\\n    // Modifier to ensure only options of type 3 are used\\n    modifier onlyType3(bytes memory _options) {\\n        if (_options.toUint16(0) != TYPE_3) revert InvalidOptionType(_options.toUint16(0));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new options container with type 3.\\n     * @return options The newly created options container.\\n     */\\n    function newOptions() internal pure returns (bytes memory) {\\n        return abi.encodePacked(TYPE_3);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ receive option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _gas The gasLimit used on the lzReceive() function in the OApp.\\n     * @param _value The msg.value passed to the lzReceive() function in the OApp.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor\\n     * eg. if (_gas: 200k, and _value: 1 ether) AND (_gas: 100k, _value: 0.5 ether) are sent in an option to the LayerZeroEndpoint,\\n     * that becomes (300k, 1.5 ether) when the message is executed on the remote lzReceive() function.\\n     */\\n    function addExecutorLzReceiveOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReceiveOption(_gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZRECEIVE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor native drop option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n     * @param _receiver The receiver address for the native drop option.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n     */\\n    function addExecutorNativeDropOption(\\n        bytes memory _options,\\n        uint128 _amount,\\n        bytes32 _receiver\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeNativeDropOption(_amount, _receiver);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_NATIVE_DROP, option);\\n    }\\n\\n    // /**\\n    //  * @dev Adds an executor native drop option to the existing options.\\n    //  * @param _options The existing options container.\\n    //  * @param _amount The amount for the native value that is airdropped to the 'receiver'.\\n    //  * @param _receiver The receiver address for the native drop option.\\n    //  * @return options The updated options container.\\n    //  *\\n    //  * @dev When multiples of this option are added, they are summed by the executor on the remote chain.\\n    //  */\\n    function addExecutorLzReadOption(\\n        bytes memory _options,\\n        uint128 _gas,\\n        uint32 _size,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzReadOption(_gas, _size, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZREAD, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor LZ compose option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _index The index for the lzCompose() function call.\\n     * @param _gas The gasLimit for the lzCompose() function call.\\n     * @param _value The msg.value for the lzCompose() function call.\\n     * @return options The updated options container.\\n     *\\n     * @dev When multiples of this option are added, they are summed PER index by the executor on the remote chain.\\n     * @dev If the OApp sends N lzCompose calls on the remote, you must provide N incremented indexes starting with 0.\\n     * ie. When your remote OApp composes (N = 3) messages, you must set this option for index 0,1,2\\n     */\\n    function addExecutorLzComposeOption(\\n        bytes memory _options,\\n        uint16 _index,\\n        uint128 _gas,\\n        uint128 _value\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        bytes memory option = ExecutorOptions.encodeLzComposeOption(_index, _gas, _value);\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_LZCOMPOSE, option);\\n    }\\n\\n    /**\\n     * @dev Adds an executor ordered execution option to the existing options.\\n     * @param _options The existing options container.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOrderedExecutionOption(\\n        bytes memory _options\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addExecutorOption(_options, ExecutorOptions.OPTION_TYPE_ORDERED_EXECUTION, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds a DVN pre-crime option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the pre-crime option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNPreCrimeOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return addDVNOption(_options, _dvnIdx, DVNOptions.OPTION_TYPE_PRECRIME, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Adds an executor option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _optionType The type of the executor option.\\n     * @param _option The encoded data for the executor option.\\n     * @return options The updated options container.\\n     */\\n    function addExecutorOption(\\n        bytes memory _options,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                ExecutorOptions.WORKER_ID,\\n                _option.length.toUint16() + 1, // +1 for optionType\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Adds a DVN option to the existing options.\\n     * @param _options The existing options container.\\n     * @param _dvnIdx The DVN index for the DVN option.\\n     * @param _optionType The type of the DVN option.\\n     * @param _option The encoded data for the DVN option.\\n     * @return options The updated options container.\\n     */\\n    function addDVNOption(\\n        bytes memory _options,\\n        uint8 _dvnIdx,\\n        uint8 _optionType,\\n        bytes memory _option\\n    ) internal pure onlyType3(_options) returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _options,\\n                DVNOptions.WORKER_ID,\\n                _option.length.toUint16() + 2, // +2 for optionType and dvnIdx\\n                _dvnIdx,\\n                _optionType,\\n                _option\\n            );\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 1.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @return legacyOptions The encoded legacy options.\\n     */\\n    function encodeLegacyOptionsType1(uint256 _executionGas) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        return abi.encodePacked(TYPE_1, _executionGas);\\n    }\\n\\n    /**\\n     * @dev Encodes legacy options of type 2.\\n     * @param _executionGas The gasLimit value passed to lzReceive().\\n     * @param _nativeForDst The amount of native air dropped to the receiver.\\n     * @param _receiver The _nativeForDst receiver address.\\n     * @return legacyOptions The encoded legacy options of type 2.\\n     */\\n    function encodeLegacyOptionsType2(\\n        uint256 _executionGas,\\n        uint256 _nativeForDst,\\n        bytes memory _receiver // @dev Use bytes instead of bytes32 in legacy type 2 for _receiver.\\n    ) internal pure returns (bytes memory) {\\n        if (_executionGas > type(uint128).max) revert InvalidSize(type(uint128).max, _executionGas);\\n        if (_nativeForDst > type(uint128).max) revert InvalidSize(type(uint128).max, _nativeForDst);\\n        if (_receiver.length > 32) revert InvalidSize(32, _receiver.length);\\n        return abi.encodePacked(TYPE_2, _executionGas, _nativeForDst, _receiver);\\n    }\\n}\\n\",\"keccak256\":\"0x3b3de0e975038d66d296275f03b4cd44ae03f0ba23ac7215ae0269a8fbec3030\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    event DelegateSet(address sender, address delegate);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xf7f941bee89ea6369950fe54e8ac476ae6478b958b20fc0e8a83e8ff1364eac3\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x9641abba8d53b08bb517d1b74801dd15ea7b84d77a6719085bd96c8ea94e3ca0\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0xd710f9efe703982e8eabe15d19d6114af753ef42f2796551da782a0fb6633e4b\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x0878f64dffebf58c4165569416372f40860fab546b88cd926eba0d5cb6d8d972\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/libs/CalldataBytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: LZBL-1.2\\n\\npragma solidity ^0.8.20;\\n\\nlibrary CalldataBytesLib {\\n    function toU8(bytes calldata _bytes, uint256 _start) internal pure returns (uint8) {\\n        return uint8(_bytes[_start]);\\n    }\\n\\n    function toU16(bytes calldata _bytes, uint256 _start) internal pure returns (uint16) {\\n        unchecked {\\n            uint256 end = _start + 2;\\n            return uint16(bytes2(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU32(bytes calldata _bytes, uint256 _start) internal pure returns (uint32) {\\n        unchecked {\\n            uint256 end = _start + 4;\\n            return uint32(bytes4(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU64(bytes calldata _bytes, uint256 _start) internal pure returns (uint64) {\\n        unchecked {\\n            uint256 end = _start + 8;\\n            return uint64(bytes8(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU128(bytes calldata _bytes, uint256 _start) internal pure returns (uint128) {\\n        unchecked {\\n            uint256 end = _start + 16;\\n            return uint128(bytes16(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toU256(bytes calldata _bytes, uint256 _start) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return uint256(bytes32(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toAddr(bytes calldata _bytes, uint256 _start) internal pure returns (address) {\\n        unchecked {\\n            uint256 end = _start + 20;\\n            return address(bytes20(_bytes[_start:end]));\\n        }\\n    }\\n\\n    function toB32(bytes calldata _bytes, uint256 _start) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 end = _start + 32;\\n            return bytes32(_bytes[_start:end]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c0db161cef6603c3b256d4220f489419e7478ef775e52a80056654129c61875\",\"license\":\"LZBL-1.2\"},\"lib/layerzero-v2/packages/layerzero-v2/evm/protocol/contracts/messagelib/libs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/BitMaps.sol\\npragma solidity ^0.8.20;\\n\\ntype BitMap256 is uint256;\\n\\nusing BitMaps for BitMap256 global;\\n\\nlibrary BitMaps {\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap256 bitmap, uint8 index) internal pure returns (bool) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.unwrap(bitmap) & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap256 bitmap, uint8 index) internal pure returns (BitMap256) {\\n        uint256 mask = 1 << index;\\n        return BitMap256.wrap(BitMap256.unwrap(bitmap) | mask);\\n    }\\n}\\n\",\"keccak256\":\"0xaad3c72ef43480d2253fd48b394e8fb7286d009991d2bc4e61be58ce48ac5ee9\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        // We're using the unchecked block below because otherwise execution ends \\n        // with the native overflow error code.\\n        unchecked {\\n            require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        }\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf4b07e5d8f69407bb43c6db224adfcf6c73b512dd64e85008ac3c222910c3555\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c0806040523461033d57600060a08261437d80380380916100218285610342565b83398101031261033a576100348261037b565b916100416020820161037b565b9061004e6040820161037b565b6060820151608090920151926001600160a01b031680156103265784546001600160a01b0319811682178655604051969082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08880a36001600160a01b0316608081905290813b1561032257602487878094829463ca5eb5e160e01b845260048401525af194851561031757604095610303575b5066010000000000006403002625a060018060581b03196009541617176009556611c37937e08000600d55622625a063ffffffff19600e541617600e5560018060a01b031660a05260075560085561767c81526003602052818120600160ff1982541617905561767c81526004602052818120622625a063ffffffff1982541617905560008051602061435d8339815191526060835161767c815260016020820152622625a085820152a161759a81526003602052818120600160ff19825416179055600061759a82526004602052828220622625a063ffffffff1982541617905560008051602061435d8339815191526060845161759a815260016020820152622625a086820152a16175e882526003602052828220600160ff19825416179055506175e881526004602052818120622625a063ffffffff1982541617905560008051602061435d833981519152606083516175e8815260016020820152622625a085820152a161759581526003602052818120600160ff198254161790556175958152600460205220622625a063ffffffff1982541617905560008051602061435d8339815191526060604051617595815260016020820152622625a06040820152a1604051613fcd9081610390823960805181818161063f015281816112db01528181611de60152818161371501528181613d070152613dbb015260a0518181816116f20152818161231e01526133070152f35b8461031091959295610342565b92386100ec565b6040513d86823e3d90fd5b8580fd5b631e4fbdf760e01b85526004859052602485fd5b80fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761036557604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361033d5756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630361cc851461036b57806309c1ba2e1461036657806313137d651461036157806315f88c921461035c57806317442b70146103575780631901abb8146103525780631a1d92521461034d5780631fe543e314610348578063212c896914610343578063248514dd1461033e57806324f746971461033957806326757b731461033457806328f038c51461032f5780633400288b1461032a5780633446e4b4146103255780633ccfd60b14610320578063403813ec1461031b57806347258206146103165780634dc8549214610311578063524b6f701461030c5780635394cd9e146103075780635535d4611461030257806357d4dcf9146102fd5780635a175710146102f85780635e280f11146102f357806361728f39146102ee5780636c9a0e66146102e9578063715018a6146102e45780637ccfd7fc146102df5780637d25a05e146102da57806382413eac146102d557806387b96a52146102d05780638da5cb5b146102cb5780638e2f1bd0146102c657806395368d2e146102c1578063a3e56fa8146102bc578063a8c33194146102b7578063aea051e9146102b2578063b0fb162f146102ad578063b28783a8146102a8578063b98bd070146102a3578063b9d1d49b1461029e578063bb0b6a5314610299578063bc70b35414610294578063bd097e211461028f578063c032846b1461028a578063c2b0b9f314610285578063c4bffe2b14610280578063ca5eb5e11461027b578063e3d400bf14610276578063e603acfc14610271578063f2fde38b1461026c5763ff7bd03d0361000e576121b6565b612129565b611fa6565b611e69565b611dbc565b611c3c565b611bc2565b611a65565b6119da565b611986565b61194b565b61192d565b611828565b6117ea565b6117c6565b611764565b611721565b6116dc565b6116b8565b611517565b6114e4565b6114c7565b611469565b611442565b61141b565b6113c2565b611384565b61130a565b6112c5565b61129f565b61125e565b611209565b6111bb565b61115a565b61113d565b611120565b611009565b610f84565b610ed1565b610e62565b610afe565b610991565b61096d565b61092d565b61082c565b6107f0565b610732565b610715565b6106f3565b6106d6565b6105db565b61056e565b61051b565b63ffffffff81160361037e57565b600080fd5b90600182811c921680156103b3575b602083101461039d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610392565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176103ee57604052565b6103bd565b604081019081106001600160401b038211176103ee57604052565b90601f801991011681019081106001600160401b038211176103ee57604052565b906040519182600082549261044384610383565b80845293600181169081156104b1575060011461046a575b506104689250038361040e565b565b90506000929192526020600020906000915b818310610495575050906020610468928201013861045b565b602091935080600191548385890101520191019091849261047c565b90506020925061046894915060ff191682840152151560051b8201013861045b565b60005b8381106104e65750506000910152565b81810151838201526020016104d6565b9060209161050f815180928185528580860191016104d3565b601f01601f1916010190565b3461037e57602036600319011261037e5763ffffffff60043561053d81610370565b16600052600660205261056a610556604060002061042f565b6040519182916020835260208301906104f6565b0390f35b3461037e57600036600319011261037e576020600754604051908152f35b606090600319011261037e57600490565b9181601f8401121561037e578235916001600160401b03831161037e576020838186019501011161037e57565b6001600160a01b0381160361037e57565b60e036600319011261037e576105f03661058c565b6084356001600160401b03811161037e5761060f90369060040161059d565b9061061b60a4356105ca565b60c4356001600160401b03811161037e5761063a90369060040161059d565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036106c15782359261067884610370565b6106818461300c565b936020820135809503610699575061001993506131d5565b63ffffffff816106a98793610370565b63309afaf360e21b6000521660045260245260446000fd5b6391ac5e4f60e01b6000523360045260246000fd5b3461037e57600036600319011261037e5760206040516175e88152f35b3461037e57600036600319011261037e57604080516001815260026020820152f35b3461037e57600036600319011261037e5760206040516175968152f35b3461037e57602036600319011261037e576004356000908152600a6020908152604091829020805460018201546002830154600384015460049094015486516001600160401b038516815263ffffffff94881c949094169584019590955294820152606081019390935260ff8082161515608085015260089190911c16151560a083015260c082015260e090f35b9181601f8401121561037e578235916001600160401b03831161037e576020808501948460051b01011161037e57565b3461037e57604036600319011261037e576024356004356001600160401b03821161037e576108266100199236906004016107c0565b91612317565b3461037e57602036600319011261037e5761056a61090160043561084f81610370565b6108576125ba565b5063ffffffff8116600052600360205261087f61087a604060002060ff90541690565b6125d3565b6108a661089c8263ffffffff166000526004602052604060002090565b5463ffffffff1690565b63ffffffff81161561091e575b6108fb604051916108e6836108d8602082019061303960206040840193600181520152565b03601f19810185528461040e565b63ffffffff6108f36134ce565b9116906134ea565b916136b1565b604051918291829190916020806040830194805184520151910152565b50600e5463ffffffff166108b3565b3461037e57602036600319011261037e5763ffffffff60043561094f81610370565b166000526003602052602060ff604060002054166040519015158152f35b3461037e57600036600319011261037e57602063ffffffff60095416604051908152f35b3461037e57602036600319011261037e5760e063ffffffff6109b4600435612615565b9596946001600160401b036040959295949394519816885215156020880152151560408701521515606086015260808501521660a083015260c0820152f35b906020808351928381520192019060005b818110610a115750505090565b825163ffffffff16845260209384019390920191600101610a04565b906020808351928381520192019060005b818110610a4b5750505090565b82511515845260209384019390920191600101610a3e565b9294939190610a7a906080855260808501906109f3565b948386036020850152815180875260208701906020808260051b8a01019401916000905b828210610ad25750505050610acf94955090610ac1918482036040860152610a2d565b9160608184039101526109f3565b90565b90919294602080610af06001938d601f1990820301865289516104f6565b970192019201909291610a9e565b3461037e57600036600319011261037e57610b1761268d565b610b2a610b23826126e2565b61767c9052565b610b3d610b36826126ef565b61759a9052565b610b50610b49826126ff565b6175e89052565b610b63610b5c8261270f565b6175959052565b610b76610b6f8261271f565b61759d9052565b610b89610b828261272f565b6175969052565b610b9c610b958261273f565b61759f9052565b610ba4612763565b90610bad612804565b610bb6836126e2565b52610bc0826126e2565b50610bc9612827565b610bd2836126ef565b52610bdc826126ef565b50610be561284e565b610bee836126ff565b52610bf8826126ff565b50610c01612870565b610c0a8361270f565b52610c148261270f565b50610c1d612896565b610c268361271f565b52610c308261271f565b50610c396128bb565b610c428361272f565b52610c4c8261272f565b50610c556128dc565b610c5e8361273f565b52610c688261273f565b50805190610c796005548093612918565b90610c83826126b0565b91610c8d8161279f565b94610ca0610c9a836126b0565b926126b0565b9360005b8451811015610d805780610cdf610cca610cc06001948961274f565b5163ffffffff1690565b610cd4838661274f565b9063ffffffff169052565b610ce9818561274f565b51610cf4828b61274f565b52610cff818a61274f565b50610d44610d33610d2c610d16610cc0858b61274f565b63ffffffff166000526003602052604060002090565b5460ff1690565b610d3d838861274f565b9015159052565b610d7a610d7061089c610d5a610cc0858b61274f565b63ffffffff166000526004602052604060002090565b610cd4838a61274f565b01610ca4565b50949192905060005b828110610da4575050509061056a9160405194859485610a63565b80610e5c610db56001938551612918565b610dde610dd4610dc48561133e565b905463ffffffff9160031b1c1690565b610cd4838c61274f565b610e0b610e06610df0610dc48661133e565b63ffffffff166000526006602052604060002090565b61042f565b610e15828c61274f565b52610e20818b61274f565b50610e40610e36610d2c610d16610dc48761133e565b610d3d838a61274f565b610cd4610e5561089c610d5a610dc48761133e565b918961274f565b01610d89565b3461037e57604036600319011261037e577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b6040600435610ea281610370565b63ffffffff60243591610eb36138cb565b169081600052600160205280836000205582519182526020820152a1005b3461037e57602036600319011261037e57600435610eed6138cb565b670de0b6b3a76400008111610f3f57600d8054908290556040805191825260208201929092527fc2ed71504bd70e947d9a514f52be4f28827ef83859c414054d0874ab910844a191819081015b0390a1005b60405162461bcd60e51b815260206004820152601860248201527f4d696e696d756d2062616c616e636520746f6f206869676800000000000000006044820152606490fd5b3461037e57600036600319011261037e57610f9d6138cb565b478015610fcb5760008054610019928291829182916001600160a01b03165af1610fc561292a565b5061295a565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b3461037e57606036600319011261037e5760043561102681610370565b6024356001600160401b03811161037e5761104590369060040161059d565b90916044359161105483610370565b61105c6138cb565b63ffffffff82169384600052600360205261108c611087611083604060002060ff90541690565b1590565b61299a565b6110978215156129e6565b600554600095865b8281106110eb575b505050906110d89161001995156110dd575b6110d38463ffffffff166000526006602052604060002090565b612acc565b6138f4565b6110e684612a28565b6110b9565b8163ffffffff6110fd610dc48461133e565b161461110b5760010161109f565b506001965082915061001990506110d86110a7565b3461037e57600036600319011261037e57602060405161759f8152f35b3461037e57600036600319011261037e5760206040516175958152f35b3461037e57602036600319011261037e5763ffffffff60043561117c81610370565b6111846138cb565b16620186a0811015806111ae575b61119b90612b9a565b63ffffffff19600e541617600e55600080f35b5062989680811115611192565b3461037e57600036600319011261037e57602060405161759a8152f35b6024359061ffff8216820361037e57565b6064359061ffff8216820361037e57565b359061ffff8216820361037e57565b3461037e57604036600319011261037e5761056a610556610e0660043561122f81610370565b63ffffffff61123c6111d8565b9116600052600260205260406000209061ffff16600052602052604060002090565b3461037e57602036600319011261037e5763ffffffff60043561128081610370565b166000526004602052602063ffffffff60406000205416604051908152f35b3461037e57600036600319011261037e57602060ff60095460501c166040519015158152f35b3461037e57600036600319011261037e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461037e57600036600319011261037e576020600854604051908152f35b634e487b7160e01b600052603260045260246000fd5b9060055482101561137f576005600052600382901c7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019160021b601c1690565b611328565b3461037e57602036600319011261037e5760043560055481101561037e5763ffffffff6113b260209261133e565b90549060031b1c16604051908152f35b3461037e57600036600319011261037e576113db6138cb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461037e57600036600319011261037e57602063ffffffff60095460301c16604051908152f35b3461037e57604036600319011261037e5761145e600435610370565b602060405160008152f35b3461037e5760a036600319011261037e576114833661058c565b506064356001600160401b03811161037e576114a390369060040161059d565b505060206084356114b3816105ca565b6040516001600160a01b0390911630148152f35b3461037e57600036600319011261037e57602060405161759d8152f35b3461037e57600036600319011261037e576000546040516001600160a01b039091168152602090f35b8015150361037e57565b3461037e5760a036600319011261037e5760443560243560043561153a83610370565b6115426111e9565b6084359061154f8261150d565b6115576138cb565b8215611673577f93dcb896219f0103f48ceb69144937f0d0712ae244d21815ac5e425422a1e86d9461162a610f3a93611591871515612bda565b6115ae63ffffffff8416619c408110159081611665575b50612c19565b6115c861ffff851660038110159081611659575b50612c65565b6115d186600755565b6115da87600855565b6115f48363ffffffff1663ffffffff196009541617600955565b60098054602086901b65ffff00000000166aff00000000ffff00000000199091161791151560501b60ff60501b16919091179055565b60405194859485929363ffffffff61ffff92969560609460808701988752602087015216604085015216910152565b60c891501115386115c2565b622625a091501115386115a8565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606490fd5b3461037e57600036600319011261037e57602063ffffffff600e5416604051908152f35b3461037e57600036600319011261037e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461037e57600036600319011261037e57602060405161767c8152f35b6001600160401b0381160361037e57565b9081602091031261037e5735610acf8161173e565b3461037e57602036600319011261037e5760e063ffffffff61179060043561178b8161173e565b612cb1565b95969460409491949392935197885215156020880152151560408701521515606086015260808501521660a083015260c0820152f35b3461037e57600036600319011261037e57602061ffff600954821c16604051908152f35b3461037e57602036600319011261037e576001600160401b0360043561180f8161173e565b16600052600b6020526020604060002054604051908152f35b3461037e57602036600319011261037e576004356001600160401b03811161037e576118589036906004016107c0565b906118616138cb565b61186a82612676565b90611878604051928361040e565b828252602082019260051b81019036821161037e5780935b8285106118a05761001984613aa6565b84356001600160401b03811161037e5782019060608236031261037e57604051916118ca836103d3565b80356118d581610370565b83526118e3602082016111fa565b60208401526040810135906001600160401b03821161037e57019036601f8301121561037e5760209261191d849336908581359101612d1e565b6040820152815201940193611890565b3461037e57600036600319011261037e576020600d54604051908152f35b3461037e57602036600319011261037e5763ffffffff60043561196d81610370565b1660005260016020526020604060002054604051908152f35b3461037e57606036600319011261037e576004356119a381610370565b6119ab6111d8565b604435906001600160401b03821161037e5761056a926119d261055693369060040161059d565b929091612dba565b600036600319011261037e573415611a20576040805134815247602082015233917f3b31cbadfd3fd939750f09d3bdbd6c0531dde23f05d55dcc202798f39d09089591a2005b60405162461bcd60e51b815260206004820152601e60248201527f4d7573742073656e642045544820746f2066756e6420636f6e747261637400006044820152606490fd5b3461037e57600036600319011261037e5747600d5461056a63ffffffff600e541660009061767c82526003602052611aa26040832060ff90541690565b611bb9575b61759a6000526003602052611adb7f700ed869ddb2102ef13117c5d57be7c1f3f2466a36521d63493a9ea023c4e439610d2c565b611ba9575b6175e86000526003602052611b147fdeb4a23120fded29a6337d8b295dfc6ca1d93989dd0ba98cbf218df98b464c1a610d2c565b611b99575b6175956000526003602052611b4d7fa86cf3a3ce73ca8ef44a41967d8ac73fae17ecef26cdb73ae696d106e3ac646d610d2c565b611b89575b604051948486958210159186919360809363ffffffff9297969560a085019885526020850152151560408401521660608201520152565b90611b9390612e6c565b90611b52565b90611ba390612e6c565b90611b19565b90611bb390612e6c565b90611ae0565b60019150611aa7565b3461037e57602036600319011261037e576001600160401b03600435611be78161173e565b16600052600c602052602060ff604060002054166040519015158152f35b91611c2e90611c20610acf95936060865260608601906109f3565b908482036020860152610a2d565b9160408184039101526109f3565b3461037e57600036600319011261037e57611c5561268d565b611c61610b23826126e2565b611c6d610b36826126ef565b611c79610b49826126ff565b611c85610b5c8261270f565b611c91610b6f8261271f565b611c9d610b828261272f565b611ca9610b958261273f565b8051611cb86005548092612918565b91611cc2836126b0565b90611cd5611ccf856126b0565b946126b0565b9160005b8251811015611d315780611cf5610cca610cc06001948761274f565b611d0b610e36610d2c610d16610cc0858961274f565b611d2b611d2161089c610d5a610cc0858961274f565b610cd4838861274f565b01611cd9565b50929060005b828110611d515750505061056a9060405193849384611c05565b80611db6611d626001938551612918565b611d7b611d71610dc48561133e565b610cd4838b61274f565b611d9a611d90610d2c610d16610dc48761133e565b610d3d838c61274f565b610cd4611daf61089c610d5a610dc48761133e565b918861274f565b01611d37565b3461037e5760006020366003190112611e665780600435611ddc816105ca565b611de46138cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e625760405163ca5eb5e160e01b81526001600160a01b0390921660048301529091908290602490829084905af18015611e5d578290611e4f5780f35b611e589161040e565b388180f35b612e7b565b5050fd5b80fd5b3461037e57606036600319011261037e577f6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d600435611ea781610370565b60243590611eb48261150d565b610f3a604435611ec381610370565b611ecb6138cb565b63ffffffff8316806000526003602052611ef58560406000209060ff801983541691151516179055565b8415611f845750611f1a63ffffffff8216620186a08110159081611f76575b50612b9a565b611f4d81611f388563ffffffff166000526004602052604060002090565b9063ffffffff1663ffffffff19825416179055565b6040519384938491604091949363ffffffff918260608601971685521515602085015216910152565b629896809150111538611f14565b6000526004602052611fa1604060002063ffffffff198154169055565b611f4d565b602036600319011261037e57610019600435611fc18161173e565b611fe9611fe4610d2c836001600160401b0316600052600c602052604060002090565b612e87565b612025612009826001600160401b0316600052600b602052604060002090565b54612015811515612ee1565b600052600a602052604060002090565b61205361204e61108360038401546120456120408260ff1690565b612f20565b60081c60ff1690565b612f64565b6121046120fa6120d3835461206f8163ffffffff9060401c1690565b9061208d61089c8363ffffffff166000526004602052604060002090565b9063ffffffff821615612109575b6108fb906001600160401b03165b6002880154604080516001600160401b039093166020840152820152916108e683606081016108d8565b936120e14786511115612fa8565b6001600160401b0316600052600c602052604060002090565b805460ff19169055565b61377a565b90506108fb6120a9612120600e5463ffffffff1690565b9291505061209b565b3461037e57602036600319011261037e57600435612146816105ca565b61214e6138cb565b6001600160a01b031680156121a057600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b3461037e57606036600319011261037e5760206121d23661058c565b63ffffffff81356121e281610370565b16600052600182528160406000205491013560405191148152f35b35610acf81610370565b1561220e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c792056524620436f6f7264696e61746f722063616e2066756c66696c6c6044820152fd5b1561225957565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606490fd5b1561229a57565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48199d5b199a5b1b1959607a1b6044820152606490fd5b901561137f5790565b6040808252810183905292939291906001600160fb1b03821161037e57606063ffffffff9160209360051b8091838701378401019416910152565b9161234c337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612207565b61236083600052600a602052604060002090565b916123856001600160401b0361237d85546001600160401b031690565b161515612252565b6123af600384016123a261239d611083835460ff1690565b612293565b805460ff19166001179055565b6123b982826122d3565b356002840190815561243d84546108d86108fb6123dd8363ffffffff9060401c1690565b926123fb61089c8563ffffffff166000526004602052604060002090565b9063ffffffff82161561255e575b6108e6906001600160401b03165b9654604080516001600160401b038a166020820152908101919091529384906060820190565b9047825111612497575061248684612479612492937f8b9858deebdff025dbc2c181daee2661d05b08e45c441dcf16b0bdecbe9600009761377a565b5460401c63ffffffff1690565b604051938493846122dc565b0390a2565b90506124bc92506123a291506001600160401b0316600052600c602052604060002090565b547f4fdfe35ce22ceb31be6af9548351f205f08b537fad4b1a63464761c4c7f29b8c6001600160401b036124f98184169360401c63ffffffff1690565b9261255960405192839216948263ffffffff60a09216815260406020820152602760408201527f496e73756666696369656e742062616c616e636520666f72204c617965725a65606082015266726f206665657360c81b60808201520190565b0390a3565b90506108e6612417612575600e5463ffffffff1690565b92915050612409565b6040519061046860208361040e565b6040519061046860c08361040e565b6040519061046860e08361040e565b6040519061046860a08361040e565b604051906125c7826103f3565b60006020838281520152565b156125da57565b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b600052600a60205260406000209081546001600160401b038116928315612662576003810154916004600283015492015460019463ffffffff60ff8087169660081c16949360401c169190565b506000925082918291508190819081908190565b6001600160401b0381116103ee5760051b60200190565b604051610120919061269f838261040e565b6008815291601f1901366020840137565b906126ba82612676565b6126c7604051918261040e565b82815280926126d8601f1991612676565b0190602036910137565b80511561137f5760200190565b80516001101561137f5760400190565b80516002101561137f5760600190565b80516003101561137f5760800190565b80516004101561137f5760a00190565b80516005101561137f5760c00190565b80516006101561137f5760e00190565b805182101561137f5760209160051b010190565b6040516101209190612775838261040e565b6008815291601f19018260005b82811061278e57505050565b806060602080938501015201612782565b906127a982612676565b6127b6604051918261040e565b82815280926127c7601f1991612676565b019060005b8281106127d857505050565b8060606020809385010152016127cc565b6001600160401b0381116103ee57601f01601f191660200190565b6040519061281360408361040e565b6005825264536f6e696360d81b6020830152565b6040519061283660408361040e565b60098252684176616c616e63686560b81b6020830152565b6040519061285d60408361040e565b60048252634261736560e01b6020830152565b6040519061287f60408361040e565b6008825267457468657265756d60c01b6020830152565b604051906128a560408361040e565b60078252662837b63cb3b7b760c91b6020830152565b604051906128ca60408361040e565b600382526242534360e81b6020830152565b604051906128eb60408361040e565b60088252674f7074696d69736d60c01b6020830152565b634e487b7160e01b600052601160045260246000fd5b9190820180921161292557565b612902565b3d15612955573d9061293b826127e9565b91612949604051938461040e565b82523d6000602084013e565b606090565b1561296157565b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b156129a157565b60405162461bcd60e51b815260206004820152601760248201527f436861696e20616c726561647920737570706f727465640000000000000000006044820152606490fd5b156129ed57565b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b985b59481c995c5d5a5c9959606a1b6044820152606490fd5b60055490680100000000000000008210156103ee5760018201600555600060055483101561137f5780600560209252208260031c019163ffffffff8060e085549360051b169316831b921b1916179055565b601f8211612a8757505050565b6000526020600020906020601f840160051c83019310612ac2575b601f0160051c01905b818110612ab6575050565b60008155600101612aab565b9091508190612aa2565b9092916001600160401b0381116103ee57612af181612aeb8454610383565b84612a7a565b6000601f8211600114612b32578190612b23939495600092612b27575b50508160011b916000199060031b1c19161790565b9055565b013590503880612b0e565b601f19821694612b4784600052602060002090565b91805b878110612b82575083600195969710612b68575b505050811b019055565b0135600019600384901b60f8161c19169055388080612b5e565b90926020600181928686013581550194019101612b4a565b15612ba157565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819d85cc81b1a5b5a5d607a1b6044820152606490fd5b15612be157565b60405162461bcd60e51b815260206004820152601060248201526f092dcecc2d8d2c840d6caf240d0c2e6d60831b6044820152606490fd5b15612c2057565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642063616c6c6261636b20676173206c696d69740000000000006044820152606490fd5b15612c6c57565b60405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207265717565737420636f6e6669726d6174696f6e730000006044820152606490fd5b6001600160401b0316600052600b602052604060002054908115612d0c5781600052600a6020526040600020600381015490600281015490600463ffffffff825460401c1691015460019460ff8086169560081c1693929190565b60009150819081908190819081908190565b929192612d2a826127e9565b91612d38604051938461040e565b82948184528183011161037e578281602093846000960137010152565b602083610468939594956040519684612d77899651809287808a0191016104d3565b8501918483013701016000815203601f19810184528361040e565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b612dec9163ffffffff610e06929694959616600052600260205260406000209061ffff16600052602052604060002090565b805115612e5e578315612e58576002841015612e24575050612e20604051928392639a6d49cd60e01b845260048401612d92565b0390fd5b909192612e3a612e35368387612d1e565b613b68565b600081600211611e6657506002610acf939401906001190191612d55565b92509050565b509190610acf913691612d1e565b60001981146129255760010190565b6040513d6000823e3d90fd5b15612e8e57565b60405162461bcd60e51b815260206004820152602560248201527f4e6f2070656e64696e6720726573706f6e736520666f7220746869732073657160448201526475656e636560d81b6064820152608490fd5b15612ee857565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c69642073657175656e636560801b6044820152606490fd5b15612f2757565b60405162461bcd60e51b8152602060048201526015602482015274159491881b9bdd08199d5b199a5b1b1959081e595d605a1b6044820152606490fd5b15612f6b57565b60405162461bcd60e51b815260206004820152601560248201527414995cdc1bdb9cd948185b1c9958591e481cd95b9d605a1b6044820152606490fd5b15612faf57565b60405162461bcd60e51b815260206004820152602f60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636520666f60448201526e72204c617965725a65726f2066656560881b6064820152608490fd5b63ffffffff1680600052600160205260406000205490811561302c575090565b63f6ff4fb760e01b60005260045260246000fd5b1561304757565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039b7bab931b2903832b2b960691b6044820152606490fd5b1561308957565b60405162461bcd60e51b81526020600482015260126024820152714475706c69636174652073657175656e636560701b6044820152606490fd5b9081602091031261037e575190565b60e060a0610acf9360208452805160208501526020810151604085015261ffff604082015116606085015263ffffffff606082015116608085015263ffffffff6080820151168285015201519160c08082015201906104f6565b9060c06004916001600160401b038151166001600160401b031985541617845563ffffffff60208201511663ffffffff60401b85549160401b169063ffffffff60401b191617845560408101516001850155606081015160028501556131ce600385016131b161319f6080850151151590565b829060ff801983541691151516179055565b60a08301511515815461ff00191690151560081b61ff0016179055565b0151910155565b9061322b613301916131ef61087a610d2c610d16876121fd565b6132116131fb856121fd565b63ffffffff166000526001602052604060002090565b54946132236020860135809714613040565b81019061174f565b9161325361324c846001600160401b0316600052600b602052604060002090565b5415613082565b60206009546132806132698260ff9060501c1690565b61327b61327461257e565b9115158252565b613ba0565b6132e2600854926132d5600754916132c86132a08261ffff9060201c1690565b63ffffffff8381169360301c16946132b661258d565b9889528989015261ffff166040880152565b63ffffffff166060860152565b63ffffffff166080840152565b60a082015260405180948192634d8e1c2f60e11b8352600483016130d2565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1918215611e5d5760009261346d575b5061346863ffffffff613446836133d961337a7fd3510f10ff680c9036c5ce988154f0c85864d5bfef3145a87afbc76c774b85a5966121fd565b61339f61338561259c565b6001600160401b038b1681529163ffffffff166020830152565b8960408201526000606082015260006080820152600060a08201524260c08201526133d488600052600a602052604060002090565b61312c565b856133f7886001600160401b0316600052600b602052604060002090565b5585613402826121fd565b60405163ffffffff9190911681526001600160401b038916907f3250ff00efd6be9d7cd1aff3a571c4438eaca6177b003b960446054bfe3fd99490602090a36121fd565b604080516001600160401b039097168752426020880152911694918291820190565b0390a4565b7fd3510f10ff680c9036c5ce988154f0c85864d5bfef3145a87afbc76c774b85a591925063ffffffff6134466134bd6134689360203d6020116134c7575b6134b5818361040e565b8101906130c3565b9493505050613340565b503d6134ab565b604051600360f01b602082015260028152610acf60228261040e565b600361ffff6134f883613bc8565b16036135e657604051916fffffffffffffffffffffffffffffffff199060801b1660208301526010825261352d60308361040e565b600361ffff61353b83613bc8565b16036135e657815161ffff81116135cd5761ffff60019116019161ffff831161292557610acf916020600492604051958361357f88955180928680890191016104d3565b600160f81b90850184810182905260f09290921b6001600160f01b031916602183015260238201528151916135bc908390602484019086016104d3565b01010301601f19810183528261040e565b6306dfcc6560e41b600052601060045260245260446000fd5b6135f261ffff91613bc8565b633a51740d60e01b6000521660045260246000fd5b919082604091031261037e5760405161361f816103f3565b6020808294805184520151910152565b9060408282031261037e57610acf91613607565b906020909392936040835263ffffffff81511660408401528181015160608401526080613697613681604084015160a08488015260e08701906104f6565b6060840151868203603f190160a08801526104f6565b910151151560c08401526001600160a01b03909416910152565b613711926040926136c06125ba565b506136ca8361300c565b6136e16136d56125ab565b63ffffffff9095168552565b602084015283830152606082015260006080820152815180938192631bb8518b60e31b8352309060048401613643565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611e5d57600091613751575090565b610acf915060403d604011613773575b61376b818361040e565b81019061362f565b503d613761565b6001600160401b037f2ca2c51f832d9f7f0adffb85be66ed33d38379367a2f942c846a17ff8691c4e5918054906137be61089c610d5a8463ffffffff9060401c1690565b9063ffffffff8216156138a8575b6138616137e361249293946001600160401b031690565b600283018054604080516001600160401b03949094166020850152838101919091528252948890613819906108e660608561040e565b60038501805461ff001916610100179055845460401c63ffffffff1660005490939061385b9061384f906001600160a01b031681565b6001600160a01b031690565b93613c7e565b5054946138806001600160401b03871693549660401c63ffffffff1690565b90519060405194859416968463ffffffff604092959493606083019683521660208201520152565b61249291506138616137e36138c2600e5463ffffffff1690565b935050506137cc565b6000546001600160a01b031633036138df57565b63118cdaa760e01b6000523360045260246000fd5b6001906139577f6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d9363ffffffff8316600052600360205260406000208460ff19825416179055611f1a63ffffffff8216620186a08110159081611f765750612b9a565b0390a1565b91909182516001600160401b0381116103ee5761397d81612aeb8454610383565b6020601f82116001146139b9578190612b239394956000926139ae5750508160011b916000199060031b1c19161790565b015190503880612b0e565b601f198216906139ce84600052602060002090565b9160005b818110613a09575095836001959697106139f057505050811b019055565b015160001960f88460031b161c19169055388080612b5e565b9192602060018192868b0151815501940192016139d2565b602081016020825282518091526040820191602060408360051b8301019401926000915b838310613a5457505050505090565b9091929394602080613a97600193603f19868203018752606060408b5163ffffffff815116845261ffff86820151168685015201519181604082015201906104f6565b97019301930191939290613a45565b60005b8151811015613b365780613acc6040613ac46001948661274f565b510151613b68565b613b306040613adb838661274f565b51015163ffffffff613aed848761274f565b5151166000526002602052613b2b6040600020613b196020613b0f878a61274f565b51015161ffff1690565b61ffff16600052602052604060002090565b61395c565b01613aa9565b506139577fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6749160405191829182613a21565b600361ffff60028301511603613b7b5750565b604051639a6d49cd60e01b815260206004820152908190612e209060248301906104f6565b6040519063125fa26760e31b6020830152511515602482015260248152610acf60448261040e565b6002815110613bd8576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fd5b60405190613c21826103d3565b8160008152600060208201526040613c376125ba565b910152565b9060808282031261037e57613c76906040805193613c59856103d3565b805185526020810151613c6b8161173e565b602086015201613607565b604082015290565b613ce760809492613d039694613c92613c14565b506020613c9f8651613d7b565b950191825180613d6c575b50613cb48561300c565b9251151592613cd0613cc46125ab565b63ffffffff9097168752565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401613643565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611e5d57600091613d43575090565b610acf915060803d608011613d65575b613d5d818361040e565b810190613c3c565b503d613d53565b613d7590613dac565b38613caa565b3415613da057803403613d8b5790565b6304fb820960e51b6000523460045260246000fd5b610acf81471015612fa8565b60405163393f876560e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602081600481865afa908115611e5d57600091613e2a575b506001600160a01b0316918215613e1957610468923390613e65565b6329b99a9560e11b60005260046000fd5b90506020813d602011613e5d575b81613e456020938361040e565b8101031261037e5751613e57816105ca565b38613dfd565b3d9150613e38565b6040516323b872dd60e01b602082019081526001600160a01b03938416602483015293909216604483015260648083019490945292815291613ed091600091829190613eb260848761040e565b60018060a01b031694519082865af1613ec961292a565b9083613f36565b8051908115159182613f03575b5050613ee65750565b635274afe760e01b6000526001600160a01b031660045260246000fd5b613f1a925090602080611083938301019101613f21565b3880613edd565b9081602091031261037e5751610acf8161150d565b90613f5c5750805115613f4b57805190602001fd5b630a12f52160e11b60005260046000fd5b81511580613f8e575b613f6d575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b15613f6556fea2646970667358221220e735249e82b575b7931889eeeb746f57e6f09cdecab6854992b9787566508f9264736f6c634300081c00336a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630361cc851461036b57806309c1ba2e1461036657806313137d651461036157806315f88c921461035c57806317442b70146103575780631901abb8146103525780631a1d92521461034d5780631fe543e314610348578063212c896914610343578063248514dd1461033e57806324f746971461033957806326757b731461033457806328f038c51461032f5780633400288b1461032a5780633446e4b4146103255780633ccfd60b14610320578063403813ec1461031b57806347258206146103165780634dc8549214610311578063524b6f701461030c5780635394cd9e146103075780635535d4611461030257806357d4dcf9146102fd5780635a175710146102f85780635e280f11146102f357806361728f39146102ee5780636c9a0e66146102e9578063715018a6146102e45780637ccfd7fc146102df5780637d25a05e146102da57806382413eac146102d557806387b96a52146102d05780638da5cb5b146102cb5780638e2f1bd0146102c657806395368d2e146102c1578063a3e56fa8146102bc578063a8c33194146102b7578063aea051e9146102b2578063b0fb162f146102ad578063b28783a8146102a8578063b98bd070146102a3578063b9d1d49b1461029e578063bb0b6a5314610299578063bc70b35414610294578063bd097e211461028f578063c032846b1461028a578063c2b0b9f314610285578063c4bffe2b14610280578063ca5eb5e11461027b578063e3d400bf14610276578063e603acfc14610271578063f2fde38b1461026c5763ff7bd03d0361000e576121b6565b612129565b611fa6565b611e69565b611dbc565b611c3c565b611bc2565b611a65565b6119da565b611986565b61194b565b61192d565b611828565b6117ea565b6117c6565b611764565b611721565b6116dc565b6116b8565b611517565b6114e4565b6114c7565b611469565b611442565b61141b565b6113c2565b611384565b61130a565b6112c5565b61129f565b61125e565b611209565b6111bb565b61115a565b61113d565b611120565b611009565b610f84565b610ed1565b610e62565b610afe565b610991565b61096d565b61092d565b61082c565b6107f0565b610732565b610715565b6106f3565b6106d6565b6105db565b61056e565b61051b565b63ffffffff81160361037e57565b600080fd5b90600182811c921680156103b3575b602083101461039d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610392565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b038211176103ee57604052565b6103bd565b604081019081106001600160401b038211176103ee57604052565b90601f801991011681019081106001600160401b038211176103ee57604052565b906040519182600082549261044384610383565b80845293600181169081156104b1575060011461046a575b506104689250038361040e565b565b90506000929192526020600020906000915b818310610495575050906020610468928201013861045b565b602091935080600191548385890101520191019091849261047c565b90506020925061046894915060ff191682840152151560051b8201013861045b565b60005b8381106104e65750506000910152565b81810151838201526020016104d6565b9060209161050f815180928185528580860191016104d3565b601f01601f1916010190565b3461037e57602036600319011261037e5763ffffffff60043561053d81610370565b16600052600660205261056a610556604060002061042f565b6040519182916020835260208301906104f6565b0390f35b3461037e57600036600319011261037e576020600754604051908152f35b606090600319011261037e57600490565b9181601f8401121561037e578235916001600160401b03831161037e576020838186019501011161037e57565b6001600160a01b0381160361037e57565b60e036600319011261037e576105f03661058c565b6084356001600160401b03811161037e5761060f90369060040161059d565b9061061b60a4356105ca565b60c4356001600160401b03811161037e5761063a90369060040161059d565b5050337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316036106c15782359261067884610370565b6106818461300c565b936020820135809503610699575061001993506131d5565b63ffffffff816106a98793610370565b63309afaf360e21b6000521660045260245260446000fd5b6391ac5e4f60e01b6000523360045260246000fd5b3461037e57600036600319011261037e5760206040516175e88152f35b3461037e57600036600319011261037e57604080516001815260026020820152f35b3461037e57600036600319011261037e5760206040516175968152f35b3461037e57602036600319011261037e576004356000908152600a6020908152604091829020805460018201546002830154600384015460049094015486516001600160401b038516815263ffffffff94881c949094169584019590955294820152606081019390935260ff8082161515608085015260089190911c16151560a083015260c082015260e090f35b9181601f8401121561037e578235916001600160401b03831161037e576020808501948460051b01011161037e57565b3461037e57604036600319011261037e576024356004356001600160401b03821161037e576108266100199236906004016107c0565b91612317565b3461037e57602036600319011261037e5761056a61090160043561084f81610370565b6108576125ba565b5063ffffffff8116600052600360205261087f61087a604060002060ff90541690565b6125d3565b6108a661089c8263ffffffff166000526004602052604060002090565b5463ffffffff1690565b63ffffffff81161561091e575b6108fb604051916108e6836108d8602082019061303960206040840193600181520152565b03601f19810185528461040e565b63ffffffff6108f36134ce565b9116906134ea565b916136b1565b604051918291829190916020806040830194805184520151910152565b50600e5463ffffffff166108b3565b3461037e57602036600319011261037e5763ffffffff60043561094f81610370565b166000526003602052602060ff604060002054166040519015158152f35b3461037e57600036600319011261037e57602063ffffffff60095416604051908152f35b3461037e57602036600319011261037e5760e063ffffffff6109b4600435612615565b9596946001600160401b036040959295949394519816885215156020880152151560408701521515606086015260808501521660a083015260c0820152f35b906020808351928381520192019060005b818110610a115750505090565b825163ffffffff16845260209384019390920191600101610a04565b906020808351928381520192019060005b818110610a4b5750505090565b82511515845260209384019390920191600101610a3e565b9294939190610a7a906080855260808501906109f3565b948386036020850152815180875260208701906020808260051b8a01019401916000905b828210610ad25750505050610acf94955090610ac1918482036040860152610a2d565b9160608184039101526109f3565b90565b90919294602080610af06001938d601f1990820301865289516104f6565b970192019201909291610a9e565b3461037e57600036600319011261037e57610b1761268d565b610b2a610b23826126e2565b61767c9052565b610b3d610b36826126ef565b61759a9052565b610b50610b49826126ff565b6175e89052565b610b63610b5c8261270f565b6175959052565b610b76610b6f8261271f565b61759d9052565b610b89610b828261272f565b6175969052565b610b9c610b958261273f565b61759f9052565b610ba4612763565b90610bad612804565b610bb6836126e2565b52610bc0826126e2565b50610bc9612827565b610bd2836126ef565b52610bdc826126ef565b50610be561284e565b610bee836126ff565b52610bf8826126ff565b50610c01612870565b610c0a8361270f565b52610c148261270f565b50610c1d612896565b610c268361271f565b52610c308261271f565b50610c396128bb565b610c428361272f565b52610c4c8261272f565b50610c556128dc565b610c5e8361273f565b52610c688261273f565b50805190610c796005548093612918565b90610c83826126b0565b91610c8d8161279f565b94610ca0610c9a836126b0565b926126b0565b9360005b8451811015610d805780610cdf610cca610cc06001948961274f565b5163ffffffff1690565b610cd4838661274f565b9063ffffffff169052565b610ce9818561274f565b51610cf4828b61274f565b52610cff818a61274f565b50610d44610d33610d2c610d16610cc0858b61274f565b63ffffffff166000526003602052604060002090565b5460ff1690565b610d3d838861274f565b9015159052565b610d7a610d7061089c610d5a610cc0858b61274f565b63ffffffff166000526004602052604060002090565b610cd4838a61274f565b01610ca4565b50949192905060005b828110610da4575050509061056a9160405194859485610a63565b80610e5c610db56001938551612918565b610dde610dd4610dc48561133e565b905463ffffffff9160031b1c1690565b610cd4838c61274f565b610e0b610e06610df0610dc48661133e565b63ffffffff166000526006602052604060002090565b61042f565b610e15828c61274f565b52610e20818b61274f565b50610e40610e36610d2c610d16610dc48761133e565b610d3d838a61274f565b610cd4610e5561089c610d5a610dc48761133e565b918961274f565b01610d89565b3461037e57604036600319011261037e577f238399d427b947898edb290f5ff0f9109849b1c3ba196a42e35f00c50a54b98b6040600435610ea281610370565b63ffffffff60243591610eb36138cb565b169081600052600160205280836000205582519182526020820152a1005b3461037e57602036600319011261037e57600435610eed6138cb565b670de0b6b3a76400008111610f3f57600d8054908290556040805191825260208201929092527fc2ed71504bd70e947d9a514f52be4f28827ef83859c414054d0874ab910844a191819081015b0390a1005b60405162461bcd60e51b815260206004820152601860248201527f4d696e696d756d2062616c616e636520746f6f206869676800000000000000006044820152606490fd5b3461037e57600036600319011261037e57610f9d6138cb565b478015610fcb5760008054610019928291829182916001600160a01b03165af1610fc561292a565b5061295a565b60405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606490fd5b3461037e57606036600319011261037e5760043561102681610370565b6024356001600160401b03811161037e5761104590369060040161059d565b90916044359161105483610370565b61105c6138cb565b63ffffffff82169384600052600360205261108c611087611083604060002060ff90541690565b1590565b61299a565b6110978215156129e6565b600554600095865b8281106110eb575b505050906110d89161001995156110dd575b6110d38463ffffffff166000526006602052604060002090565b612acc565b6138f4565b6110e684612a28565b6110b9565b8163ffffffff6110fd610dc48461133e565b161461110b5760010161109f565b506001965082915061001990506110d86110a7565b3461037e57600036600319011261037e57602060405161759f8152f35b3461037e57600036600319011261037e5760206040516175958152f35b3461037e57602036600319011261037e5763ffffffff60043561117c81610370565b6111846138cb565b16620186a0811015806111ae575b61119b90612b9a565b63ffffffff19600e541617600e55600080f35b5062989680811115611192565b3461037e57600036600319011261037e57602060405161759a8152f35b6024359061ffff8216820361037e57565b6064359061ffff8216820361037e57565b359061ffff8216820361037e57565b3461037e57604036600319011261037e5761056a610556610e0660043561122f81610370565b63ffffffff61123c6111d8565b9116600052600260205260406000209061ffff16600052602052604060002090565b3461037e57602036600319011261037e5763ffffffff60043561128081610370565b166000526004602052602063ffffffff60406000205416604051908152f35b3461037e57600036600319011261037e57602060ff60095460501c166040519015158152f35b3461037e57600036600319011261037e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461037e57600036600319011261037e576020600854604051908152f35b634e487b7160e01b600052603260045260246000fd5b9060055482101561137f576005600052600382901c7f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019160021b601c1690565b611328565b3461037e57602036600319011261037e5760043560055481101561037e5763ffffffff6113b260209261133e565b90549060031b1c16604051908152f35b3461037e57600036600319011261037e576113db6138cb565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461037e57600036600319011261037e57602063ffffffff60095460301c16604051908152f35b3461037e57604036600319011261037e5761145e600435610370565b602060405160008152f35b3461037e5760a036600319011261037e576114833661058c565b506064356001600160401b03811161037e576114a390369060040161059d565b505060206084356114b3816105ca565b6040516001600160a01b0390911630148152f35b3461037e57600036600319011261037e57602060405161759d8152f35b3461037e57600036600319011261037e576000546040516001600160a01b039091168152602090f35b8015150361037e57565b3461037e5760a036600319011261037e5760443560243560043561153a83610370565b6115426111e9565b6084359061154f8261150d565b6115576138cb565b8215611673577f93dcb896219f0103f48ceb69144937f0d0712ae244d21815ac5e425422a1e86d9461162a610f3a93611591871515612bda565b6115ae63ffffffff8416619c408110159081611665575b50612c19565b6115c861ffff851660038110159081611659575b50612c65565b6115d186600755565b6115da87600855565b6115f48363ffffffff1663ffffffff196009541617600955565b60098054602086901b65ffff00000000166aff00000000ffff00000000199091161791151560501b60ff60501b16919091179055565b60405194859485929363ffffffff61ffff92969560609460808701988752602087015216604085015216910152565b60c891501115386115c2565b622625a091501115386115a8565b60405162461bcd60e51b815260206004820152601760248201527f496e76616c696420737562736372697074696f6e2049440000000000000000006044820152606490fd5b3461037e57600036600319011261037e57602063ffffffff600e5416604051908152f35b3461037e57600036600319011261037e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461037e57600036600319011261037e57602060405161767c8152f35b6001600160401b0381160361037e57565b9081602091031261037e5735610acf8161173e565b3461037e57602036600319011261037e5760e063ffffffff61179060043561178b8161173e565b612cb1565b95969460409491949392935197885215156020880152151560408701521515606086015260808501521660a083015260c0820152f35b3461037e57600036600319011261037e57602061ffff600954821c16604051908152f35b3461037e57602036600319011261037e576001600160401b0360043561180f8161173e565b16600052600b6020526020604060002054604051908152f35b3461037e57602036600319011261037e576004356001600160401b03811161037e576118589036906004016107c0565b906118616138cb565b61186a82612676565b90611878604051928361040e565b828252602082019260051b81019036821161037e5780935b8285106118a05761001984613aa6565b84356001600160401b03811161037e5782019060608236031261037e57604051916118ca836103d3565b80356118d581610370565b83526118e3602082016111fa565b60208401526040810135906001600160401b03821161037e57019036601f8301121561037e5760209261191d849336908581359101612d1e565b6040820152815201940193611890565b3461037e57600036600319011261037e576020600d54604051908152f35b3461037e57602036600319011261037e5763ffffffff60043561196d81610370565b1660005260016020526020604060002054604051908152f35b3461037e57606036600319011261037e576004356119a381610370565b6119ab6111d8565b604435906001600160401b03821161037e5761056a926119d261055693369060040161059d565b929091612dba565b600036600319011261037e573415611a20576040805134815247602082015233917f3b31cbadfd3fd939750f09d3bdbd6c0531dde23f05d55dcc202798f39d09089591a2005b60405162461bcd60e51b815260206004820152601e60248201527f4d7573742073656e642045544820746f2066756e6420636f6e747261637400006044820152606490fd5b3461037e57600036600319011261037e5747600d5461056a63ffffffff600e541660009061767c82526003602052611aa26040832060ff90541690565b611bb9575b61759a6000526003602052611adb7f700ed869ddb2102ef13117c5d57be7c1f3f2466a36521d63493a9ea023c4e439610d2c565b611ba9575b6175e86000526003602052611b147fdeb4a23120fded29a6337d8b295dfc6ca1d93989dd0ba98cbf218df98b464c1a610d2c565b611b99575b6175956000526003602052611b4d7fa86cf3a3ce73ca8ef44a41967d8ac73fae17ecef26cdb73ae696d106e3ac646d610d2c565b611b89575b604051948486958210159186919360809363ffffffff9297969560a085019885526020850152151560408401521660608201520152565b90611b9390612e6c565b90611b52565b90611ba390612e6c565b90611b19565b90611bb390612e6c565b90611ae0565b60019150611aa7565b3461037e57602036600319011261037e576001600160401b03600435611be78161173e565b16600052600c602052602060ff604060002054166040519015158152f35b91611c2e90611c20610acf95936060865260608601906109f3565b908482036020860152610a2d565b9160408184039101526109f3565b3461037e57600036600319011261037e57611c5561268d565b611c61610b23826126e2565b611c6d610b36826126ef565b611c79610b49826126ff565b611c85610b5c8261270f565b611c91610b6f8261271f565b611c9d610b828261272f565b611ca9610b958261273f565b8051611cb86005548092612918565b91611cc2836126b0565b90611cd5611ccf856126b0565b946126b0565b9160005b8251811015611d315780611cf5610cca610cc06001948761274f565b611d0b610e36610d2c610d16610cc0858961274f565b611d2b611d2161089c610d5a610cc0858961274f565b610cd4838861274f565b01611cd9565b50929060005b828110611d515750505061056a9060405193849384611c05565b80611db6611d626001938551612918565b611d7b611d71610dc48561133e565b610cd4838b61274f565b611d9a611d90610d2c610d16610dc48761133e565b610d3d838c61274f565b610cd4611daf61089c610d5a610dc48761133e565b918861274f565b01611d37565b3461037e5760006020366003190112611e665780600435611ddc816105ca565b611de46138cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b15611e625760405163ca5eb5e160e01b81526001600160a01b0390921660048301529091908290602490829084905af18015611e5d578290611e4f5780f35b611e589161040e565b388180f35b612e7b565b5050fd5b80fd5b3461037e57606036600319011261037e577f6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d600435611ea781610370565b60243590611eb48261150d565b610f3a604435611ec381610370565b611ecb6138cb565b63ffffffff8316806000526003602052611ef58560406000209060ff801983541691151516179055565b8415611f845750611f1a63ffffffff8216620186a08110159081611f76575b50612b9a565b611f4d81611f388563ffffffff166000526004602052604060002090565b9063ffffffff1663ffffffff19825416179055565b6040519384938491604091949363ffffffff918260608601971685521515602085015216910152565b629896809150111538611f14565b6000526004602052611fa1604060002063ffffffff198154169055565b611f4d565b602036600319011261037e57610019600435611fc18161173e565b611fe9611fe4610d2c836001600160401b0316600052600c602052604060002090565b612e87565b612025612009826001600160401b0316600052600b602052604060002090565b54612015811515612ee1565b600052600a602052604060002090565b61205361204e61108360038401546120456120408260ff1690565b612f20565b60081c60ff1690565b612f64565b6121046120fa6120d3835461206f8163ffffffff9060401c1690565b9061208d61089c8363ffffffff166000526004602052604060002090565b9063ffffffff821615612109575b6108fb906001600160401b03165b6002880154604080516001600160401b039093166020840152820152916108e683606081016108d8565b936120e14786511115612fa8565b6001600160401b0316600052600c602052604060002090565b805460ff19169055565b61377a565b90506108fb6120a9612120600e5463ffffffff1690565b9291505061209b565b3461037e57602036600319011261037e57600435612146816105ca565b61214e6138cb565b6001600160a01b031680156121a057600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b3461037e57606036600319011261037e5760206121d23661058c565b63ffffffff81356121e281610370565b16600052600182528160406000205491013560405191148152f35b35610acf81610370565b1561220e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f6e6c792056524620436f6f7264696e61746f722063616e2066756c66696c6c6044820152fd5b1561225957565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081c995c5d595cdd08125160721b6044820152606490fd5b1561229a57565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48199d5b199a5b1b1959607a1b6044820152606490fd5b901561137f5790565b6040808252810183905292939291906001600160fb1b03821161037e57606063ffffffff9160209360051b8091838701378401019416910152565b9161234c337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614612207565b61236083600052600a602052604060002090565b916123856001600160401b0361237d85546001600160401b031690565b161515612252565b6123af600384016123a261239d611083835460ff1690565b612293565b805460ff19166001179055565b6123b982826122d3565b356002840190815561243d84546108d86108fb6123dd8363ffffffff9060401c1690565b926123fb61089c8563ffffffff166000526004602052604060002090565b9063ffffffff82161561255e575b6108e6906001600160401b03165b9654604080516001600160401b038a166020820152908101919091529384906060820190565b9047825111612497575061248684612479612492937f8b9858deebdff025dbc2c181daee2661d05b08e45c441dcf16b0bdecbe9600009761377a565b5460401c63ffffffff1690565b604051938493846122dc565b0390a2565b90506124bc92506123a291506001600160401b0316600052600c602052604060002090565b547f4fdfe35ce22ceb31be6af9548351f205f08b537fad4b1a63464761c4c7f29b8c6001600160401b036124f98184169360401c63ffffffff1690565b9261255960405192839216948263ffffffff60a09216815260406020820152602760408201527f496e73756666696369656e742062616c616e636520666f72204c617965725a65606082015266726f206665657360c81b60808201520190565b0390a3565b90506108e6612417612575600e5463ffffffff1690565b92915050612409565b6040519061046860208361040e565b6040519061046860c08361040e565b6040519061046860e08361040e565b6040519061046860a08361040e565b604051906125c7826103f3565b60006020838281520152565b156125da57565b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b600052600a60205260406000209081546001600160401b038116928315612662576003810154916004600283015492015460019463ffffffff60ff8087169660081c16949360401c169190565b506000925082918291508190819081908190565b6001600160401b0381116103ee5760051b60200190565b604051610120919061269f838261040e565b6008815291601f1901366020840137565b906126ba82612676565b6126c7604051918261040e565b82815280926126d8601f1991612676565b0190602036910137565b80511561137f5760200190565b80516001101561137f5760400190565b80516002101561137f5760600190565b80516003101561137f5760800190565b80516004101561137f5760a00190565b80516005101561137f5760c00190565b80516006101561137f5760e00190565b805182101561137f5760209160051b010190565b6040516101209190612775838261040e565b6008815291601f19018260005b82811061278e57505050565b806060602080938501015201612782565b906127a982612676565b6127b6604051918261040e565b82815280926127c7601f1991612676565b019060005b8281106127d857505050565b8060606020809385010152016127cc565b6001600160401b0381116103ee57601f01601f191660200190565b6040519061281360408361040e565b6005825264536f6e696360d81b6020830152565b6040519061283660408361040e565b60098252684176616c616e63686560b81b6020830152565b6040519061285d60408361040e565b60048252634261736560e01b6020830152565b6040519061287f60408361040e565b6008825267457468657265756d60c01b6020830152565b604051906128a560408361040e565b60078252662837b63cb3b7b760c91b6020830152565b604051906128ca60408361040e565b600382526242534360e81b6020830152565b604051906128eb60408361040e565b60088252674f7074696d69736d60c01b6020830152565b634e487b7160e01b600052601160045260246000fd5b9190820180921161292557565b612902565b3d15612955573d9061293b826127e9565b91612949604051938461040e565b82523d6000602084013e565b606090565b1561296157565b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b156129a157565b60405162461bcd60e51b815260206004820152601760248201527f436861696e20616c726561647920737570706f727465640000000000000000006044820152606490fd5b156129ed57565b60405162461bcd60e51b815260206004820152601360248201527210da185a5b881b985b59481c995c5d5a5c9959606a1b6044820152606490fd5b60055490680100000000000000008210156103ee5760018201600555600060055483101561137f5780600560209252208260031c019163ffffffff8060e085549360051b169316831b921b1916179055565b601f8211612a8757505050565b6000526020600020906020601f840160051c83019310612ac2575b601f0160051c01905b818110612ab6575050565b60008155600101612aab565b9091508190612aa2565b9092916001600160401b0381116103ee57612af181612aeb8454610383565b84612a7a565b6000601f8211600114612b32578190612b23939495600092612b27575b50508160011b916000199060031b1c19161790565b9055565b013590503880612b0e565b601f19821694612b4784600052602060002090565b91805b878110612b82575083600195969710612b68575b505050811b019055565b0135600019600384901b60f8161c19169055388080612b5e565b90926020600181928686013581550194019101612b4a565b15612ba157565b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a590819d85cc81b1a5b5a5d607a1b6044820152606490fd5b15612be157565b60405162461bcd60e51b815260206004820152601060248201526f092dcecc2d8d2c840d6caf240d0c2e6d60831b6044820152606490fd5b15612c2057565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642063616c6c6261636b20676173206c696d69740000000000006044820152606490fd5b15612c6c57565b60405162461bcd60e51b815260206004820152601d60248201527f496e76616c6964207265717565737420636f6e6669726d6174696f6e730000006044820152606490fd5b6001600160401b0316600052600b602052604060002054908115612d0c5781600052600a6020526040600020600381015490600281015490600463ffffffff825460401c1691015460019460ff8086169560081c1693929190565b60009150819081908190819081908190565b929192612d2a826127e9565b91612d38604051938461040e565b82948184528183011161037e578281602093846000960137010152565b602083610468939594956040519684612d77899651809287808a0191016104d3565b8501918483013701016000815203601f19810184528361040e565b90918060409360208452816020850152848401376000828201840152601f01601f1916010190565b612dec9163ffffffff610e06929694959616600052600260205260406000209061ffff16600052602052604060002090565b805115612e5e578315612e58576002841015612e24575050612e20604051928392639a6d49cd60e01b845260048401612d92565b0390fd5b909192612e3a612e35368387612d1e565b613b68565b600081600211611e6657506002610acf939401906001190191612d55565b92509050565b509190610acf913691612d1e565b60001981146129255760010190565b6040513d6000823e3d90fd5b15612e8e57565b60405162461bcd60e51b815260206004820152602560248201527f4e6f2070656e64696e6720726573706f6e736520666f7220746869732073657160448201526475656e636560d81b6064820152608490fd5b15612ee857565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c69642073657175656e636560801b6044820152606490fd5b15612f2757565b60405162461bcd60e51b8152602060048201526015602482015274159491881b9bdd08199d5b199a5b1b1959081e595d605a1b6044820152606490fd5b15612f6b57565b60405162461bcd60e51b815260206004820152601560248201527414995cdc1bdb9cd948185b1c9958591e481cd95b9d605a1b6044820152606490fd5b15612faf57565b60405162461bcd60e51b815260206004820152602f60248201527f496e73756666696369656e7420636f6e74726163742062616c616e636520666f60448201526e72204c617965725a65726f2066656560881b6064820152608490fd5b63ffffffff1680600052600160205260406000205490811561302c575090565b63f6ff4fb760e01b60005260045260246000fd5b1561304757565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039b7bab931b2903832b2b960691b6044820152606490fd5b1561308957565b60405162461bcd60e51b81526020600482015260126024820152714475706c69636174652073657175656e636560701b6044820152606490fd5b9081602091031261037e575190565b60e060a0610acf9360208452805160208501526020810151604085015261ffff604082015116606085015263ffffffff606082015116608085015263ffffffff6080820151168285015201519160c08082015201906104f6565b9060c06004916001600160401b038151166001600160401b031985541617845563ffffffff60208201511663ffffffff60401b85549160401b169063ffffffff60401b191617845560408101516001850155606081015160028501556131ce600385016131b161319f6080850151151590565b829060ff801983541691151516179055565b60a08301511515815461ff00191690151560081b61ff0016179055565b0151910155565b9061322b613301916131ef61087a610d2c610d16876121fd565b6132116131fb856121fd565b63ffffffff166000526001602052604060002090565b54946132236020860135809714613040565b81019061174f565b9161325361324c846001600160401b0316600052600b602052604060002090565b5415613082565b60206009546132806132698260ff9060501c1690565b61327b61327461257e565b9115158252565b613ba0565b6132e2600854926132d5600754916132c86132a08261ffff9060201c1690565b63ffffffff8381169360301c16946132b661258d565b9889528989015261ffff166040880152565b63ffffffff166060860152565b63ffffffff166080840152565b60a082015260405180948192634d8e1c2f60e11b8352600483016130d2565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1918215611e5d5760009261346d575b5061346863ffffffff613446836133d961337a7fd3510f10ff680c9036c5ce988154f0c85864d5bfef3145a87afbc76c774b85a5966121fd565b61339f61338561259c565b6001600160401b038b1681529163ffffffff166020830152565b8960408201526000606082015260006080820152600060a08201524260c08201526133d488600052600a602052604060002090565b61312c565b856133f7886001600160401b0316600052600b602052604060002090565b5585613402826121fd565b60405163ffffffff9190911681526001600160401b038916907f3250ff00efd6be9d7cd1aff3a571c4438eaca6177b003b960446054bfe3fd99490602090a36121fd565b604080516001600160401b039097168752426020880152911694918291820190565b0390a4565b7fd3510f10ff680c9036c5ce988154f0c85864d5bfef3145a87afbc76c774b85a591925063ffffffff6134466134bd6134689360203d6020116134c7575b6134b5818361040e565b8101906130c3565b9493505050613340565b503d6134ab565b604051600360f01b602082015260028152610acf60228261040e565b600361ffff6134f883613bc8565b16036135e657604051916fffffffffffffffffffffffffffffffff199060801b1660208301526010825261352d60308361040e565b600361ffff61353b83613bc8565b16036135e657815161ffff81116135cd5761ffff60019116019161ffff831161292557610acf916020600492604051958361357f88955180928680890191016104d3565b600160f81b90850184810182905260f09290921b6001600160f01b031916602183015260238201528151916135bc908390602484019086016104d3565b01010301601f19810183528261040e565b6306dfcc6560e41b600052601060045260245260446000fd5b6135f261ffff91613bc8565b633a51740d60e01b6000521660045260246000fd5b919082604091031261037e5760405161361f816103f3565b6020808294805184520151910152565b9060408282031261037e57610acf91613607565b906020909392936040835263ffffffff81511660408401528181015160608401526080613697613681604084015160a08488015260e08701906104f6565b6060840151868203603f190160a08801526104f6565b910151151560c08401526001600160a01b03909416910152565b613711926040926136c06125ba565b506136ca8361300c565b6136e16136d56125ab565b63ffffffff9095168552565b602084015283830152606082015260006080820152815180938192631bb8518b60e31b8352309060048401613643565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611e5d57600091613751575090565b610acf915060403d604011613773575b61376b818361040e565b81019061362f565b503d613761565b6001600160401b037f2ca2c51f832d9f7f0adffb85be66ed33d38379367a2f942c846a17ff8691c4e5918054906137be61089c610d5a8463ffffffff9060401c1690565b9063ffffffff8216156138a8575b6138616137e361249293946001600160401b031690565b600283018054604080516001600160401b03949094166020850152838101919091528252948890613819906108e660608561040e565b60038501805461ff001916610100179055845460401c63ffffffff1660005490939061385b9061384f906001600160a01b031681565b6001600160a01b031690565b93613c7e565b5054946138806001600160401b03871693549660401c63ffffffff1690565b90519060405194859416968463ffffffff604092959493606083019683521660208201520152565b61249291506138616137e36138c2600e5463ffffffff1690565b935050506137cc565b6000546001600160a01b031633036138df57565b63118cdaa760e01b6000523360045260246000fd5b6001906139577f6a257ec2468c24e520c72c0196611555ab662517a8d2396e7202a13f25599e0d9363ffffffff8316600052600360205260406000208460ff19825416179055611f1a63ffffffff8216620186a08110159081611f765750612b9a565b0390a1565b91909182516001600160401b0381116103ee5761397d81612aeb8454610383565b6020601f82116001146139b9578190612b239394956000926139ae5750508160011b916000199060031b1c19161790565b015190503880612b0e565b601f198216906139ce84600052602060002090565b9160005b818110613a09575095836001959697106139f057505050811b019055565b015160001960f88460031b161c19169055388080612b5e565b9192602060018192868b0151815501940192016139d2565b602081016020825282518091526040820191602060408360051b8301019401926000915b838310613a5457505050505090565b9091929394602080613a97600193603f19868203018752606060408b5163ffffffff815116845261ffff86820151168685015201519181604082015201906104f6565b97019301930191939290613a45565b60005b8151811015613b365780613acc6040613ac46001948661274f565b510151613b68565b613b306040613adb838661274f565b51015163ffffffff613aed848761274f565b5151166000526002602052613b2b6040600020613b196020613b0f878a61274f565b51015161ffff1690565b61ffff16600052602052604060002090565b61395c565b01613aa9565b506139577fbe4864a8e820971c0247f5992e2da559595f7bf076a21cb5928d443d2a13b6749160405191829182613a21565b600361ffff60028301511603613b7b5750565b604051639a6d49cd60e01b815260206004820152908190612e209060248301906104f6565b6040519063125fa26760e31b6020830152511515602482015260248152610acf60448261040e565b6002815110613bd8576002015190565b60405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b6044820152606490fd5b60405190613c21826103d3565b8160008152600060208201526040613c376125ba565b910152565b9060808282031261037e57613c76906040805193613c59856103d3565b805185526020810151613c6b8161173e565b602086015201613607565b604082015290565b613ce760809492613d039694613c92613c14565b506020613c9f8651613d7b565b950191825180613d6c575b50613cb48561300c565b9251151592613cd0613cc46125ab565b63ffffffff9097168752565b602086015260408501526060840152151585830152565b6040518095819482936302637a4560e41b845260048401613643565b03917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115611e5d57600091613d43575090565b610acf915060803d608011613d65575b613d5d818361040e565b810190613c3c565b503d613d53565b613d7590613dac565b38613caa565b3415613da057803403613d8b5790565b6304fb820960e51b6000523460045260246000fd5b610acf81471015612fa8565b60405163393f876560e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602081600481865afa908115611e5d57600091613e2a575b506001600160a01b0316918215613e1957610468923390613e65565b6329b99a9560e11b60005260046000fd5b90506020813d602011613e5d575b81613e456020938361040e565b8101031261037e5751613e57816105ca565b38613dfd565b3d9150613e38565b6040516323b872dd60e01b602082019081526001600160a01b03938416602483015293909216604483015260648083019490945292815291613ed091600091829190613eb260848761040e565b60018060a01b031694519082865af1613ec961292a565b9083613f36565b8051908115159182613f03575b5050613ee65750565b635274afe760e01b6000526001600160a01b031660045260246000fd5b613f1a925090602080611083938301019101613f21565b3880613edd565b9081602091031261037e5751610acf8161150d565b90613f5c5750805115613f4b57805190602001fd5b630a12f52160e11b60005260046000fd5b81511580613f8e575b613f6d575090565b639996b31560e01b60009081526001600160a01b0391909116600452602490fd5b50803b15613f6556fea2646970667358221220e735249e82b575b7931889eeeb746f57e6f09cdecab6854992b9787566508f9264736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addNewChain(uint32,string,uint32)": {
        "params": {
          "chainEid": "The LayerZero endpoint ID of the chain",
          "chainName": "Human-readable name for the chain",
          "gasLimit": "Gas limit for responses to this chain"
        }
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "details": "This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.This defaults to assuming if a peer has been set, its initialized. Can be overridden by the OApp if there is other logic to determine this.",
        "params": {
          "origin": "The origin information containing the source endpoint and sender address."
        },
        "returns": {
          "_0": "Whether the path has been initialized."
        }
      },
      "combineOptions(uint32,uint16,bytes)": {
        "details": "If there is an enforced lzReceive option: - {gasLimit: 200k, msg.value: 1 ether} AND a caller supplies a lzReceive option: {gasLimit: 100k, msg.value: 0.5 ether} - The resulting options will be {gasLimit: 300k, msg.value: 1.5 ether} when the message is executed on the remote lzReceive() function.This presence of duplicated options is handled off-chain in the verifier/executor.",
        "params": {
          "_eid": "The endpoint ID.",
          "_extraOptions": "Additional options passed by the caller.",
          "_msgType": "The OAPP message type."
        },
        "returns": {
          "_0": "options The combination of caller specified options AND enforced options."
        }
      },
      "fundContract()": {
        "details": "Fund contract with ETH for LayerZero fees"
      },
      "getContractStatus()": {
        "details": "Check contract status"
      },
      "getRequestById(uint256)": {
        "details": "Get request details by VRF request ID"
      },
      "getRequestBySequence(uint64)": {
        "details": "Get request details by sequence"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "details": "_origin The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message._message The lzReceive payload.Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.The default sender IS the OAppReceiver implementer.",
        "params": {
          "_sender": "The sender address."
        },
        "returns": {
          "_0": "isSender Is a valid sender."
        }
      },
      "lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)": {
        "details": "Entry point for receiving messages or packets from the endpoint.Entry point for receiving msg/packet from the LayerZero endpoint.",
        "params": {
          "_executor": "The address of the executor for the received message.",
          "_extraData": "Additional arbitrary data provided by the corresponding executor.",
          "_guid": "The unique identifier for the received LayerZero message.",
          "_message": "The payload of the received message.",
          "_origin": "The origin information containing the source endpoint and sender address.  - srcEid: The source chain endpoint ID.  - sender: The sender address on the src chain.  - nonce: The nonce of the message."
        }
      },
      "nextNonce(uint32,bytes32)": {
        "details": "_srcEid The source endpoint ID._sender The sender address.The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.Is required by the off-chain executor to determine the OApp expects msg execution is ordered.This is also enforced by the OApp.By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.",
        "returns": {
          "nonce": "The next nonce."
        }
      },
      "oAppVersion()": {
        "returns": {
          "receiverVersion": "The version of the OAppReceiver.sol implementation.",
          "senderVersion": "The version of the OAppSender.sol implementation."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteSendToChain(uint32)": {
        "params": {
          "targetChainEid": "The chain to send the response to"
        }
      },
      "rawFulfillRandomWords(uint256,uint256[])": {
        "details": "This function is called by the VRF Coordinator when randomness is ready",
        "params": {
          "randomWords": "Array of random words",
          "requestId": "The request ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "retryPendingResponse(uint64)": {
        "details": "Call this after funding the contract to retry failed responses.",
        "params": {
          "sequence": "The sequence number to retry"
        }
      },
      "setDefaultGasLimit(uint32)": {
        "details": "Set default gas limit (owner only)"
      },
      "setDelegate(address)": {
        "details": "Only the owner/admin of the OApp can call this function.Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.",
        "params": {
          "_delegate": "The address of the delegate to be set."
        }
      },
      "setEnforcedOptions((uint32,uint16,bytes)[])": {
        "details": "Sets the enforced options for specific endpoint and message type combinations.Only the owner/admin of the OApp can call this function.Provides a way for the OApp to enforce things like paying for PreCrime, AND/OR minimum dst lzReceive gas amounts etc.These enforced options can vary as the potential options/execution on the remote may differ as per the msgType. eg. Amount of lzReceive() gas necessary to deliver a lzCompose() message adds overhead you dont want to pay if you are only making a standard LayerZero message ie. lzReceive() WITHOUT sendCompose().",
        "params": {
          "_enforcedOptions": "An array of EnforcedOptionParam structures specifying enforced options."
        }
      },
      "setMinimumBalance(uint256)": {
        "details": "Set minimum balance for responses (owner only)"
      },
      "setPeer(uint32,bytes32)": {
        "details": "Set peer for a specific endpoint ID (owner only)",
        "params": {
          "_eid": "The endpoint ID to set the peer for",
          "_peer": "The peer address (as bytes32)"
        }
      },
      "setSupportedChain(uint32,bool,uint32)": {
        "params": {
          "chainEid": "The LayerZero endpoint ID of the chain",
          "gasLimit": "Gas limit for responses to this chain",
          "supported": "Whether the chain should be supported"
        }
      },
      "setVRFConfig(uint256,bytes32,uint32,uint16,bool)": {
        "details": "Set VRF 2.5 configuration (owner only)"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Withdraw ETH (owner only)"
      }
    },
    "stateVariables": {
      "minimumBalance": {
        "details": "Minimum ETH balance threshold for monitoring purposes only."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewChain(uint32,string,uint32)": {
        "notice": "Add a new chain with name (for better UX)"
      },
      "allowInitializePath((uint32,bytes32,uint64))": {
        "notice": "Checks if the path initialization is allowed based on the provided origin."
      },
      "combineOptions(uint32,uint16,bytes)": {
        "notice": "Combines options for a given endpoint and message type."
      },
      "endpoint()": {
        "notice": "Retrieves the LayerZero endpoint associated with the OApp."
      },
      "getAllChainsWithNames()": {
        "notice": "Get all registered chains with names"
      },
      "getSupportedChains()": {
        "notice": "Get supported chains info (EXPANDABLE VERSION)"
      },
      "isComposeMsgSender((uint32,bytes32,uint64),bytes,address)": {
        "notice": "Indicates whether an address is an approved composeMsg sender to the Endpoint."
      },
      "nextNonce(uint32,bytes32)": {
        "notice": "Retrieves the next nonce for a given source endpoint and sender address."
      },
      "oAppVersion()": {
        "notice": "Retrieves the OApp version information."
      },
      "peers(uint32)": {
        "notice": "Retrieves the peer (OApp) associated with a corresponding endpoint."
      },
      "quoteSendToChain(uint32)": {
        "notice": "Quote LayerZero fee for sending response to any supported chain"
      },
      "rawFulfillRandomWords(uint256,uint256[])": {
        "notice": "Callback function used by VRF Coordinator"
      },
      "retryPendingResponse(uint64)": {
        "notice": "Manual retry for pending responses"
      },
      "setDelegate(address)": {
        "notice": "Sets the delegate address for the OApp."
      },
      "setSupportedChain(uint32,bool,uint32)": {
        "notice": "Add or remove support for a chain"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 42109,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 39575,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "peers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 40171,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "enforcedOptions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))"
      },
      {
        "astId": 1694,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "supportedChains",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 1698,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "chainGasLimits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 1701,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "registeredChainEids",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 1705,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "chainNames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_string_storage)"
      },
      {
        "astId": 1707,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "subscriptionId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1709,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 1712,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 1715,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1718,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "numWords",
        "offset": 6,
        "slot": "9",
        "type": "t_uint32"
      },
      {
        "astId": 1721,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "nativePayment",
        "offset": 10,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 1741,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "vrfRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(VRFRequest)1736_storage)"
      },
      {
        "astId": 1745,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "sequenceToRequestId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint64,t_uint256)"
      },
      {
        "astId": 1749,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "pendingResponses",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1753,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "minimumBalance",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1756,
        "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
        "label": "defaultGasLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_struct(VRFRequest)1736_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OmniDragonVRFConsumerV2_5.VRFRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(VRFRequest)1736_storage"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_mapping(t_uint16,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint16 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_bytes_storage)"
      },
      "t_mapping(t_uint32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint64,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VRFRequest)1736_storage": {
        "encoding": "inplace",
        "label": "struct OmniDragonVRFConsumerV2_5.VRFRequest",
        "members": [
          {
            "astId": 1723,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "sequence",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1725,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "sourceChainEid",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1727,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "sourcePeer",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 1729,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "randomWord",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1731,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "fulfilled",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1733,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "responseSent",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1735,
            "contract": "contracts/core/external/chainlink/OmniDragonVRFConsumerV2_5.sol:OmniDragonVRFConsumerV2_5",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}